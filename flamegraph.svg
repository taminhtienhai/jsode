<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="2320"><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.09%)</title><rect x="0.0000%" y="581" width="0.0862%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::convert::AsMut&lt;[T]&gt;&gt;::as_mut (1 samples, 0.04%)</title><rect x="0.0862%" y="581" width="0.0431%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.3362%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="0.1293%" y="581" width="0.0431%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.3793%" y="591.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="0.1293%" y="565" width="0.0431%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.3793%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="0.1724%" y="581" width="0.0431%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="0.4224%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.13%)</title><rect x="0.2155%" y="581" width="0.1293%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="3"/><text x="0.4655%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.22%)</title><rect x="0.9052%" y="517" width="0.2155%" height="15" fill="rgb(207,160,47)" fg:x="21" fg:w="5"/><text x="1.1552%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.13%)</title><rect x="1.1207%" y="517" width="0.1293%" height="15" fill="rgb(228,23,34)" fg:x="26" fg:w="3"/><text x="1.3707%" y="527.50"></text></g><g><title>&lt;core::ptr::unique::Unique&lt;T&gt; as core::convert::From&lt;core::ptr::non_null::NonNull&lt;T&gt;&gt;&gt;::from (1 samples, 0.04%)</title><rect x="1.3362%" y="501" width="0.0431%" height="15" fill="rgb(218,30,26)" fg:x="31" fg:w="1"/><text x="1.5862%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (4 samples, 0.17%)</title><rect x="1.2500%" y="517" width="0.1724%" height="15" fill="rgb(220,122,19)" fg:x="29" fg:w="4"/><text x="1.5000%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::cast (1 samples, 0.04%)</title><rect x="1.3793%" y="501" width="0.0431%" height="15" fill="rgb(250,228,42)" fg:x="32" fg:w="1"/><text x="1.6293%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="1.6379%" y="469" width="0.0431%" height="15" fill="rgb(240,193,28)" fg:x="38" fg:w="1"/><text x="1.8879%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,F&gt; as core::ops::try_trait::FromResidual&lt;core::result::Result&lt;core::convert::Infallible,E&gt;&gt;&gt;::from_residual (2 samples, 0.09%)</title><rect x="1.6810%" y="469" width="0.0862%" height="15" fill="rgb(216,20,37)" fg:x="39" fg:w="2"/><text x="1.9310%" y="479.50"></text></g><g><title>&lt;T as core::convert::From&lt;T&gt;&gt;::from (2 samples, 0.09%)</title><rect x="1.6810%" y="453" width="0.0862%" height="15" fill="rgb(206,188,39)" fg:x="39" fg:w="2"/><text x="1.9310%" y="463.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="1.8103%" y="453" width="0.0431%" height="15" fill="rgb(217,207,13)" fg:x="42" fg:w="1"/><text x="2.0603%" y="463.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="1.8103%" y="437" width="0.0431%" height="15" fill="rgb(231,73,38)" fg:x="42" fg:w="1"/><text x="2.0603%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::align (2 samples, 0.09%)</title><rect x="1.8534%" y="453" width="0.0862%" height="15" fill="rgb(225,20,46)" fg:x="43" fg:w="2"/><text x="2.1034%" y="463.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (2 samples, 0.09%)</title><rect x="1.8534%" y="437" width="0.0862%" height="15" fill="rgb(210,31,41)" fg:x="43" fg:w="2"/><text x="2.1034%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (12 samples, 0.52%)</title><rect x="2.5862%" y="405" width="0.5172%" height="15" fill="rgb(221,200,47)" fg:x="60" fg:w="12"/><text x="2.8362%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (12 samples, 0.52%)</title><rect x="2.5862%" y="389" width="0.5172%" height="15" fill="rgb(226,26,5)" fg:x="60" fg:w="12"/><text x="2.8362%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (12 samples, 0.52%)</title><rect x="2.5862%" y="373" width="0.5172%" height="15" fill="rgb(249,33,26)" fg:x="60" fg:w="12"/><text x="2.8362%" y="383.50"></text></g><g><title>core::ptr::read_volatile (28 samples, 1.21%)</title><rect x="1.9397%" y="453" width="1.2069%" height="15" fill="rgb(235,183,28)" fg:x="45" fg:w="28"/><text x="2.1897%" y="463.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (20 samples, 0.86%)</title><rect x="2.2845%" y="437" width="0.8621%" height="15" fill="rgb(221,5,38)" fg:x="53" fg:w="20"/><text x="2.5345%" y="447.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (15 samples, 0.65%)</title><rect x="2.5000%" y="421" width="0.6466%" height="15" fill="rgb(247,18,42)" fg:x="58" fg:w="15"/><text x="2.7500%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.04%)</title><rect x="3.1034%" y="405" width="0.0431%" height="15" fill="rgb(241,131,45)" fg:x="72" fg:w="1"/><text x="3.3534%" y="415.50"></text></g><g><title>[libc.so.6] (24 samples, 1.03%)</title><rect x="3.6207%" y="437" width="1.0345%" height="15" fill="rgb(249,31,29)" fg:x="84" fg:w="24"/><text x="3.8707%" y="447.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 2.93%)</title><rect x="1.7672%" y="469" width="2.9310%" height="15" fill="rgb(225,111,53)" fg:x="41" fg:w="68"/><text x="2.0172%" y="479.50">al..</text></g><g><title>malloc (36 samples, 1.55%)</title><rect x="3.1466%" y="453" width="1.5517%" height="15" fill="rgb(238,160,17)" fg:x="73" fg:w="36"/><text x="3.3966%" y="463.50"></text></g><g><title>__rust_alloc_error_handler_should_panic (1 samples, 0.04%)</title><rect x="4.6552%" y="437" width="0.0431%" height="15" fill="rgb(214,148,48)" fg:x="108" fg:w="1"/><text x="4.9052%" y="447.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="4.6552%" y="421" width="0.0431%" height="15" fill="rgb(232,36,49)" fg:x="108" fg:w="1"/><text x="4.9052%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::size (2 samples, 0.09%)</title><rect x="4.6983%" y="469" width="0.0862%" height="15" fill="rgb(209,103,24)" fg:x="109" fg:w="2"/><text x="4.9483%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (2 samples, 0.09%)</title><rect x="4.7845%" y="469" width="0.0862%" height="15" fill="rgb(229,88,8)" fg:x="111" fg:w="2"/><text x="5.0345%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (84 samples, 3.62%)</title><rect x="1.5086%" y="501" width="3.6207%" height="15" fill="rgb(213,181,19)" fg:x="35" fg:w="84"/><text x="1.7586%" y="511.50">&lt;all..</text></g><g><title>alloc::alloc::Global::alloc_impl (84 samples, 3.62%)</title><rect x="1.5086%" y="485" width="3.6207%" height="15" fill="rgb(254,191,54)" fg:x="35" fg:w="84"/><text x="1.7586%" y="495.50">allo..</text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (6 samples, 0.26%)</title><rect x="4.8707%" y="469" width="0.2586%" height="15" fill="rgb(241,83,37)" fg:x="113" fg:w="6"/><text x="5.1207%" y="479.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (5 samples, 0.22%)</title><rect x="4.9138%" y="453" width="0.2155%" height="15" fill="rgb(233,36,39)" fg:x="114" fg:w="5"/><text x="5.1638%" y="463.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (5 samples, 0.22%)</title><rect x="4.9138%" y="437" width="0.2155%" height="15" fill="rgb(226,3,54)" fg:x="114" fg:w="5"/><text x="5.1638%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="5.1293%" y="501" width="0.0431%" height="15" fill="rgb(245,192,40)" fg:x="119" fg:w="1"/><text x="5.3793%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="5.1293%" y="485" width="0.0431%" height="15" fill="rgb(238,167,29)" fg:x="119" fg:w="1"/><text x="5.3793%" y="495.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="5.1293%" y="469" width="0.0431%" height="15" fill="rgb(232,182,51)" fg:x="119" fg:w="1"/><text x="5.3793%" y="479.50"></text></g><g><title>realloc (1 samples, 0.04%)</title><rect x="5.1293%" y="453" width="0.0431%" height="15" fill="rgb(231,60,39)" fg:x="119" fg:w="1"/><text x="5.3793%" y="463.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="5.1293%" y="437" width="0.0431%" height="15" fill="rgb(208,69,12)" fg:x="119" fg:w="1"/><text x="5.3793%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="5.1724%" y="501" width="0.0431%" height="15" fill="rgb(235,93,37)" fg:x="120" fg:w="1"/><text x="5.4224%" y="511.50"></text></g><g><title>core::alloc::layout::Layout::size (1 samples, 0.04%)</title><rect x="5.2155%" y="501" width="0.0431%" height="15" fill="rgb(213,116,39)" fg:x="121" fg:w="1"/><text x="5.4655%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (96 samples, 4.14%)</title><rect x="1.4224%" y="517" width="4.1379%" height="15" fill="rgb(222,207,29)" fg:x="33" fg:w="96"/><text x="1.6724%" y="527.50">alloc..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (7 samples, 0.30%)</title><rect x="5.2586%" y="501" width="0.3017%" height="15" fill="rgb(206,96,30)" fg:x="122" fg:w="7"/><text x="5.5086%" y="511.50"></text></g><g><title>core::alloc::layout::Layout::array (22 samples, 0.95%)</title><rect x="5.5603%" y="517" width="0.9483%" height="15" fill="rgb(218,138,4)" fg:x="129" fg:w="22"/><text x="5.8103%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (21 samples, 0.91%)</title><rect x="5.6034%" y="501" width="0.9052%" height="15" fill="rgb(250,191,14)" fg:x="130" fg:w="21"/><text x="5.8534%" y="511.50"></text></g><g><title>core::alloc::layout::Layout::max_size_for_align (1 samples, 0.04%)</title><rect x="6.4655%" y="485" width="0.0431%" height="15" fill="rgb(239,60,40)" fg:x="150" fg:w="1"/><text x="6.7155%" y="495.50"></text></g><g><title>core::cmp::max (20 samples, 0.86%)</title><rect x="6.5086%" y="517" width="0.8621%" height="15" fill="rgb(206,27,48)" fg:x="151" fg:w="20"/><text x="6.7586%" y="527.50"></text></g><g><title>core::cmp::Ord::max (20 samples, 0.86%)</title><rect x="6.5086%" y="501" width="0.8621%" height="15" fill="rgb(225,35,8)" fg:x="151" fg:w="20"/><text x="6.7586%" y="511.50"></text></g><g><title>core::cmp::max_by (19 samples, 0.82%)</title><rect x="6.5517%" y="485" width="0.8190%" height="15" fill="rgb(250,213,24)" fg:x="152" fg:w="19"/><text x="6.8017%" y="495.50"></text></g><g><title>core::ops::function::FnOnce::call_once (5 samples, 0.22%)</title><rect x="7.1552%" y="469" width="0.2155%" height="15" fill="rgb(247,123,22)" fg:x="166" fg:w="5"/><text x="7.4052%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (4 samples, 0.17%)</title><rect x="7.1983%" y="453" width="0.1724%" height="15" fill="rgb(231,138,38)" fg:x="167" fg:w="4"/><text x="7.4483%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (162 samples, 6.98%)</title><rect x="0.5172%" y="533" width="6.9828%" height="15" fill="rgb(231,145,46)" fg:x="12" fg:w="162"/><text x="0.7672%" y="543.50">alloc::ra..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.13%)</title><rect x="7.3707%" y="517" width="0.1293%" height="15" fill="rgb(251,118,11)" fg:x="171" fg:w="3"/><text x="7.6207%" y="527.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.09%)</title><rect x="7.4138%" y="501" width="0.0862%" height="15" fill="rgb(217,147,25)" fg:x="172" fg:w="2"/><text x="7.6638%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (164 samples, 7.07%)</title><rect x="0.5172%" y="565" width="7.0690%" height="15" fill="rgb(247,81,37)" fg:x="12" fg:w="164"/><text x="0.7672%" y="575.50">alloc::ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (164 samples, 7.07%)</title><rect x="0.5172%" y="549" width="7.0690%" height="15" fill="rgb(209,12,38)" fg:x="12" fg:w="164"/><text x="0.7672%" y="559.50">alloc::ra..</text></g><g><title>alloc::raw_vec::handle_reserve (2 samples, 0.09%)</title><rect x="7.5000%" y="533" width="0.0862%" height="15" fill="rgb(227,1,9)" fg:x="174" fg:w="2"/><text x="7.7500%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.09%)</title><rect x="7.5000%" y="517" width="0.0862%" height="15" fill="rgb(248,47,43)" fg:x="174" fg:w="2"/><text x="7.7500%" y="527.50"></text></g><g><title>jsode::core::Sign::to_integer (1 samples, 0.04%)</title><rect x="7.5862%" y="565" width="0.0431%" height="15" fill="rgb(221,10,30)" fg:x="176" fg:w="1"/><text x="7.8362%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (12 samples, 0.52%)</title><rect x="10.9483%" y="517" width="0.5172%" height="15" fill="rgb(210,229,1)" fg:x="254" fg:w="12"/><text x="11.1983%" y="527.50"></text></g><g><title>jsode::lexer::Tokenizer::move_backward_then_consume_until (108 samples, 4.66%)</title><rect x="7.6293%" y="565" width="4.6552%" height="15" fill="rgb(222,148,37)" fg:x="177" fg:w="108"/><text x="7.8793%" y="575.50">jsode..</text></g><g><title>jsode::lexer::Tokenizer::consume_until (108 samples, 4.66%)</title><rect x="7.6293%" y="549" width="4.6552%" height="15" fill="rgb(234,67,33)" fg:x="177" fg:w="108"/><text x="7.8793%" y="559.50">jsode..</text></g><g><title>jsode::lexer::Tokenizer::next_item (108 samples, 4.66%)</title><rect x="7.6293%" y="533" width="4.6552%" height="15" fill="rgb(247,98,35)" fg:x="177" fg:w="108"/><text x="7.8793%" y="543.50">jsode..</text></g><g><title>core::ptr::read (19 samples, 0.82%)</title><rect x="11.4655%" y="517" width="0.8190%" height="15" fill="rgb(247,138,52)" fg:x="266" fg:w="19"/><text x="11.7155%" y="527.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.04%)</title><rect x="12.3276%" y="549" width="0.0431%" height="15" fill="rgb(213,79,30)" fg:x="286" fg:w="1"/><text x="12.5776%" y="559.50"></text></g><g><title>jsode::lexer::Tokenizer::parse_keyword::_{{closure}} (1 samples, 0.04%)</title><rect x="12.3276%" y="533" width="0.0431%" height="15" fill="rgb(246,177,23)" fg:x="286" fg:w="1"/><text x="12.5776%" y="543.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (1 samples, 0.04%)</title><rect x="12.3276%" y="517" width="0.0431%" height="15" fill="rgb(230,62,27)" fg:x="286" fg:w="1"/><text x="12.5776%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.04%)</title><rect x="12.3276%" y="501" width="0.0431%" height="15" fill="rgb(216,154,8)" fg:x="286" fg:w="1"/><text x="12.5776%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[U]&gt; for [T]&gt;::eq (1 samples, 0.04%)</title><rect x="12.3276%" y="485" width="0.0431%" height="15" fill="rgb(244,35,45)" fg:x="286" fg:w="1"/><text x="12.5776%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.04%)</title><rect x="12.3276%" y="469" width="0.0431%" height="15" fill="rgb(251,115,12)" fg:x="286" fg:w="1"/><text x="12.5776%" y="479.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (2 samples, 0.09%)</title><rect x="12.3707%" y="549" width="0.0862%" height="15" fill="rgb(240,54,50)" fg:x="287" fg:w="2"/><text x="12.6207%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="12.4138%" y="533" width="0.0431%" height="15" fill="rgb(233,84,52)" fg:x="288" fg:w="1"/><text x="12.6638%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts (2 samples, 0.09%)</title><rect x="12.4569%" y="549" width="0.0862%" height="15" fill="rgb(207,117,47)" fg:x="289" fg:w="2"/><text x="12.7069%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (2 samples, 0.09%)</title><rect x="12.4569%" y="533" width="0.0862%" height="15" fill="rgb(249,43,39)" fg:x="289" fg:w="2"/><text x="12.7069%" y="543.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (2 samples, 0.09%)</title><rect x="12.4569%" y="517" width="0.0862%" height="15" fill="rgb(209,38,44)" fg:x="289" fg:w="2"/><text x="12.7069%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.04%)</title><rect x="12.5000%" y="501" width="0.0431%" height="15" fill="rgb(236,212,23)" fg:x="290" fg:w="1"/><text x="12.7500%" y="511.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.04%)</title><rect x="12.5000%" y="485" width="0.0431%" height="15" fill="rgb(242,79,21)" fg:x="290" fg:w="1"/><text x="12.7500%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.04%)</title><rect x="12.5000%" y="469" width="0.0431%" height="15" fill="rgb(211,96,35)" fg:x="290" fg:w="1"/><text x="12.7500%" y="479.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (284 samples, 12.24%)</title><rect x="0.3448%" y="581" width="12.2414%" height="15" fill="rgb(253,215,40)" fg:x="8" fg:w="284"/><text x="0.5948%" y="591.50">&lt;jsode::lexer::Tok..</text></g><g><title>jsode::lexer::Tokenizer::parse_keyword (7 samples, 0.30%)</title><rect x="12.2845%" y="565" width="0.3017%" height="15" fill="rgb(211,81,21)" fg:x="285" fg:w="7"/><text x="12.5345%" y="575.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.04%)</title><rect x="12.5431%" y="549" width="0.0431%" height="15" fill="rgb(208,190,38)" fg:x="291" fg:w="1"/><text x="12.7931%" y="559.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.04%)</title><rect x="12.5431%" y="533" width="0.0431%" height="15" fill="rgb(235,213,38)" fg:x="291" fg:w="1"/><text x="12.7931%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="12.5862%" y="565" width="0.0431%" height="15" fill="rgb(237,122,38)" fg:x="292" fg:w="1"/><text x="12.8362%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="12.6293%" y="565" width="0.0431%" height="15" fill="rgb(244,218,35)" fg:x="293" fg:w="1"/><text x="12.8793%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="12.6724%" y="565" width="0.0431%" height="15" fill="rgb(240,68,47)" fg:x="294" fg:w="1"/><text x="12.9224%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_back (1 samples, 0.04%)</title><rect x="12.7155%" y="565" width="0.0431%" height="15" fill="rgb(210,16,53)" fg:x="295" fg:w="1"/><text x="12.9655%" y="575.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.04%)</title><rect x="12.7586%" y="565" width="0.0431%" height="15" fill="rgb(235,124,12)" fg:x="296" fg:w="1"/><text x="13.0086%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="12.8017%" y="565" width="0.0431%" height="15" fill="rgb(224,169,11)" fg:x="297" fg:w="1"/><text x="13.0517%" y="575.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="12.8448%" y="565" width="0.0431%" height="15" fill="rgb(250,166,2)" fg:x="298" fg:w="1"/><text x="13.0948%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.04%)</title><rect x="12.8879%" y="565" width="0.0431%" height="15" fill="rgb(242,216,29)" fg:x="299" fg:w="1"/><text x="13.1379%" y="575.50"></text></g><g><title>core::ptr::swap_nonoverlapping::precondition_check (1 samples, 0.04%)</title><rect x="12.9310%" y="565" width="0.0431%" height="15" fill="rgb(230,116,27)" fg:x="300" fg:w="1"/><text x="13.1810%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="12.9741%" y="565" width="0.0431%" height="15" fill="rgb(228,99,48)" fg:x="301" fg:w="1"/><text x="13.2241%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.04%)</title><rect x="13.0172%" y="565" width="0.0431%" height="15" fill="rgb(253,11,6)" fg:x="302" fg:w="1"/><text x="13.2672%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (1 samples, 0.04%)</title><rect x="13.0172%" y="549" width="0.0431%" height="15" fill="rgb(247,143,39)" fg:x="302" fg:w="1"/><text x="13.2672%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="13.0172%" y="533" width="0.0431%" height="15" fill="rgb(236,97,10)" fg:x="302" fg:w="1"/><text x="13.2672%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (1 samples, 0.04%)</title><rect x="13.0603%" y="565" width="0.0431%" height="15" fill="rgb(233,208,19)" fg:x="303" fg:w="1"/><text x="13.3103%" y="575.50"></text></g><g><title>[[heap]] (13 samples, 0.56%)</title><rect x="12.5862%" y="581" width="0.5603%" height="15" fill="rgb(216,164,2)" fg:x="292" fg:w="13"/><text x="12.8362%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.04%)</title><rect x="13.1034%" y="565" width="0.0431%" height="15" fill="rgb(220,129,5)" fg:x="304" fg:w="1"/><text x="13.3534%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="13.1466%" y="565" width="0.0431%" height="15" fill="rgb(242,17,10)" fg:x="305" fg:w="1"/><text x="13.3966%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="13.1897%" y="565" width="0.0431%" height="15" fill="rgb(242,107,0)" fg:x="306" fg:w="1"/><text x="13.4397%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.04%)</title><rect x="13.2328%" y="565" width="0.0431%" height="15" fill="rgb(251,28,31)" fg:x="307" fg:w="1"/><text x="13.4828%" y="575.50"></text></g><g><title>&lt;core::core_arch::x86::__m128i as core::core_arch::x86::m128iExt&gt;::as_m128i (1 samples, 0.04%)</title><rect x="13.2759%" y="565" width="0.0431%" height="15" fill="rgb(233,223,10)" fg:x="308" fg:w="1"/><text x="13.5259%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (3 samples, 0.13%)</title><rect x="13.3190%" y="565" width="0.1293%" height="15" fill="rgb(215,21,27)" fg:x="309" fg:w="3"/><text x="13.5690%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.17%)</title><rect x="13.4483%" y="565" width="0.1724%" height="15" fill="rgb(232,23,21)" fg:x="312" fg:w="4"/><text x="13.6983%" y="575.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.26%)</title><rect x="13.6207%" y="565" width="0.2586%" height="15" fill="rgb(244,5,23)" fg:x="316" fg:w="6"/><text x="13.8707%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="13.8793%" y="565" width="0.0431%" height="15" fill="rgb(226,81,46)" fg:x="322" fg:w="1"/><text x="14.1293%" y="575.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="13.9224%" y="565" width="0.0431%" height="15" fill="rgb(247,70,30)" fg:x="323" fg:w="1"/><text x="14.1724%" y="575.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="13.9224%" y="549" width="0.0431%" height="15" fill="rgb(212,68,19)" fg:x="323" fg:w="1"/><text x="14.1724%" y="559.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="13.9224%" y="533" width="0.0431%" height="15" fill="rgb(240,187,13)" fg:x="323" fg:w="1"/><text x="14.1724%" y="543.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="13.9655%" y="565" width="0.2155%" height="15" fill="rgb(223,113,26)" fg:x="324" fg:w="5"/><text x="14.2155%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::back_mut (1 samples, 0.04%)</title><rect x="14.1810%" y="565" width="0.0431%" height="15" fill="rgb(206,192,2)" fg:x="329" fg:w="1"/><text x="14.4310%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.13%)</title><rect x="14.2241%" y="565" width="0.1293%" height="15" fill="rgb(241,108,4)" fg:x="330" fg:w="3"/><text x="14.4741%" y="575.50"></text></g><g><title>core::cmp::max (2 samples, 0.09%)</title><rect x="14.2672%" y="549" width="0.0862%" height="15" fill="rgb(247,173,49)" fg:x="331" fg:w="2"/><text x="14.5172%" y="559.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.09%)</title><rect x="14.2672%" y="533" width="0.0862%" height="15" fill="rgb(224,114,35)" fg:x="331" fg:w="2"/><text x="14.5172%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.09%)</title><rect x="14.3534%" y="565" width="0.0862%" height="15" fill="rgb(245,159,27)" fg:x="333" fg:w="2"/><text x="14.6034%" y="575.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.04%)</title><rect x="14.4397%" y="565" width="0.0431%" height="15" fill="rgb(245,172,44)" fg:x="335" fg:w="1"/><text x="14.6897%" y="575.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.04%)</title><rect x="14.4828%" y="565" width="0.0431%" height="15" fill="rgb(236,23,11)" fg:x="336" fg:w="1"/><text x="14.7328%" y="575.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (2 samples, 0.09%)</title><rect x="14.5259%" y="565" width="0.0862%" height="15" fill="rgb(205,117,38)" fg:x="337" fg:w="2"/><text x="14.7759%" y="575.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.04%)</title><rect x="14.6121%" y="565" width="0.0431%" height="15" fill="rgb(237,72,25)" fg:x="339" fg:w="1"/><text x="14.8621%" y="575.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.09%)</title><rect x="14.6552%" y="565" width="0.0862%" height="15" fill="rgb(244,70,9)" fg:x="340" fg:w="2"/><text x="14.9052%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.13%)</title><rect x="14.7414%" y="565" width="0.1293%" height="15" fill="rgb(217,125,39)" fg:x="342" fg:w="3"/><text x="14.9914%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="14.8707%" y="565" width="0.0431%" height="15" fill="rgb(235,36,10)" fg:x="345" fg:w="1"/><text x="15.1207%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;jsode::core::StrType&gt;&gt; (1 samples, 0.04%)</title><rect x="14.9138%" y="565" width="0.0431%" height="15" fill="rgb(251,123,47)" fg:x="346" fg:w="1"/><text x="15.1638%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsode::core::JsonType&gt; (1 samples, 0.04%)</title><rect x="14.9569%" y="565" width="0.0431%" height="15" fill="rgb(221,13,13)" fg:x="347" fg:w="1"/><text x="15.2069%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="15.0000%" y="565" width="0.0431%" height="15" fill="rgb(238,131,9)" fg:x="348" fg:w="1"/><text x="15.2500%" y="575.50"></text></g><g><title>jsode::lexer::Tokenizer::take_slice (2 samples, 0.09%)</title><rect x="15.0431%" y="565" width="0.0862%" height="15" fill="rgb(211,50,8)" fg:x="349" fg:w="2"/><text x="15.2931%" y="575.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (1 samples, 0.04%)</title><rect x="15.1293%" y="565" width="0.0431%" height="15" fill="rgb(245,182,24)" fg:x="351" fg:w="1"/><text x="15.3793%" y="575.50"></text></g><g><title>jsode::parser::JsonParser::next_token (1 samples, 0.04%)</title><rect x="15.1724%" y="565" width="0.0431%" height="15" fill="rgb(242,14,37)" fg:x="352" fg:w="1"/><text x="15.4224%" y="575.50"></text></g><g><title>[[stack]] (50 samples, 2.16%)</title><rect x="13.1466%" y="581" width="2.1552%" height="15" fill="rgb(246,228,12)" fg:x="305" fg:w="50"/><text x="13.3966%" y="591.50">[..</text></g><g><title>jsode::parser::JsonParser::next_token_skip (2 samples, 0.09%)</title><rect x="15.2155%" y="565" width="0.0862%" height="15" fill="rgb(213,55,15)" fg:x="353" fg:w="2"/><text x="15.4655%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="15.3017%" y="565" width="0.0431%" height="15" fill="rgb(209,9,3)" fg:x="355" fg:w="1"/><text x="15.5517%" y="575.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="15.3448%" y="565" width="0.0431%" height="15" fill="rgb(230,59,30)" fg:x="356" fg:w="1"/><text x="15.5948%" y="575.50"></text></g><g><title>[anon] (3 samples, 0.13%)</title><rect x="15.3017%" y="581" width="0.1293%" height="15" fill="rgb(209,121,21)" fg:x="355" fg:w="3"/><text x="15.5517%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.04%)</title><rect x="15.3879%" y="565" width="0.0431%" height="15" fill="rgb(220,109,13)" fg:x="357" fg:w="1"/><text x="15.6379%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.30%)</title><rect x="15.4310%" y="581" width="0.3017%" height="15" fill="rgb(232,18,1)" fg:x="358" fg:w="7"/><text x="15.6810%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.09%)</title><rect x="15.6466%" y="565" width="0.0862%" height="15" fill="rgb(215,41,42)" fg:x="363" fg:w="2"/><text x="15.8966%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="15.6897%" y="549" width="0.0431%" height="15" fill="rgb(224,123,36)" fg:x="364" fg:w="1"/><text x="15.9397%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="15.6897%" y="533" width="0.0431%" height="15" fill="rgb(240,125,3)" fg:x="364" fg:w="1"/><text x="15.9397%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.04%)</title><rect x="15.6897%" y="517" width="0.0431%" height="15" fill="rgb(205,98,50)" fg:x="364" fg:w="1"/><text x="15.9397%" y="527.50"></text></g><g><title>jsode::parser::JsonCursor::create_array_block (2 samples, 0.09%)</title><rect x="15.7759%" y="293" width="0.0862%" height="15" fill="rgb(205,185,37)" fg:x="366" fg:w="2"/><text x="16.0259%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.09%)</title><rect x="15.7759%" y="277" width="0.0862%" height="15" fill="rgb(238,207,15)" fg:x="366" fg:w="2"/><text x="16.0259%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="15.7759%" y="261" width="0.0862%" height="15" fill="rgb(213,199,42)" fg:x="366" fg:w="2"/><text x="16.0259%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.09%)</title><rect x="15.7759%" y="245" width="0.0862%" height="15" fill="rgb(235,201,11)" fg:x="366" fg:w="2"/><text x="16.0259%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.09%)</title><rect x="15.7759%" y="229" width="0.0862%" height="15" fill="rgb(207,46,11)" fg:x="366" fg:w="2"/><text x="16.0259%" y="239.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.04%)</title><rect x="15.8190%" y="213" width="0.0431%" height="15" fill="rgb(241,35,35)" fg:x="367" fg:w="1"/><text x="16.0690%" y="223.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (2 samples, 0.09%)</title><rect x="15.8621%" y="261" width="0.0862%" height="15" fill="rgb(243,32,47)" fg:x="368" fg:w="2"/><text x="16.1121%" y="271.50"></text></g><g><title>std::hash::random::RandomState::new (2 samples, 0.09%)</title><rect x="15.8621%" y="245" width="0.0862%" height="15" fill="rgb(247,202,23)" fg:x="368" fg:w="2"/><text x="16.1121%" y="255.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.09%)</title><rect x="15.8621%" y="229" width="0.0862%" height="15" fill="rgb(219,102,11)" fg:x="368" fg:w="2"/><text x="16.1121%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.09%)</title><rect x="15.8621%" y="213" width="0.0862%" height="15" fill="rgb(243,110,44)" fg:x="368" fg:w="2"/><text x="16.1121%" y="223.50"></text></g><g><title>std::hash::random::RandomState::new::KEYS::__getit (2 samples, 0.09%)</title><rect x="15.8621%" y="197" width="0.0862%" height="15" fill="rgb(222,74,54)" fg:x="368" fg:w="2"/><text x="16.1121%" y="207.50"></text></g><g><title>std::sys::thread_local::fast_local::Key&lt;T&gt;::get (2 samples, 0.09%)</title><rect x="15.8621%" y="181" width="0.0862%" height="15" fill="rgb(216,99,12)" fg:x="368" fg:w="2"/><text x="16.1121%" y="191.50"></text></g><g><title>jsode::parser::JsonCursor::create_object_block (3 samples, 0.13%)</title><rect x="15.8621%" y="293" width="0.1293%" height="15" fill="rgb(226,22,26)" fg:x="368" fg:w="3"/><text x="16.1121%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (3 samples, 0.13%)</title><rect x="15.8621%" y="277" width="0.1293%" height="15" fill="rgb(217,163,10)" fg:x="368" fg:w="3"/><text x="16.1121%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.04%)</title><rect x="15.9483%" y="261" width="0.0431%" height="15" fill="rgb(213,25,53)" fg:x="370" fg:w="1"/><text x="16.1983%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.04%)</title><rect x="15.9483%" y="245" width="0.0431%" height="15" fill="rgb(252,105,26)" fg:x="370" fg:w="1"/><text x="16.1983%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (1 samples, 0.04%)</title><rect x="15.9483%" y="229" width="0.0431%" height="15" fill="rgb(220,39,43)" fg:x="370" fg:w="1"/><text x="16.1983%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="15.9483%" y="213" width="0.0431%" height="15" fill="rgb(229,68,48)" fg:x="370" fg:w="1"/><text x="16.1983%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (1 samples, 0.04%)</title><rect x="15.9483%" y="197" width="0.0431%" height="15" fill="rgb(252,8,32)" fg:x="370" fg:w="1"/><text x="16.1983%" y="207.50"></text></g><g><title>jsode::common::hash_str (1 samples, 0.04%)</title><rect x="15.9914%" y="277" width="0.0431%" height="15" fill="rgb(223,20,43)" fg:x="371" fg:w="1"/><text x="16.2414%" y="287.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="15.9914%" y="261" width="0.0431%" height="15" fill="rgb(229,81,49)" fg:x="371" fg:w="1"/><text x="16.2414%" y="271.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="15.9914%" y="245" width="0.0431%" height="15" fill="rgb(236,28,36)" fg:x="371" fg:w="1"/><text x="16.2414%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="15.9914%" y="229" width="0.0431%" height="15" fill="rgb(249,185,26)" fg:x="371" fg:w="1"/><text x="16.2414%" y="239.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="16.0345%" y="213" width="0.0431%" height="15" fill="rgb(249,174,33)" fg:x="372" fg:w="1"/><text x="16.2845%" y="223.50"></text></g><g><title>jsode::parser::JsonParser::take_slice (3 samples, 0.13%)</title><rect x="16.0345%" y="277" width="0.1293%" height="15" fill="rgb(233,201,37)" fg:x="372" fg:w="3"/><text x="16.2845%" y="287.50"></text></g><g><title>jsode::lexer::Tokenizer::take_slice (3 samples, 0.13%)</title><rect x="16.0345%" y="261" width="0.1293%" height="15" fill="rgb(221,78,26)" fg:x="372" fg:w="3"/><text x="16.2845%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts (3 samples, 0.13%)</title><rect x="16.0345%" y="245" width="0.1293%" height="15" fill="rgb(250,127,30)" fg:x="372" fg:w="3"/><text x="16.2845%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (3 samples, 0.13%)</title><rect x="16.0345%" y="229" width="0.1293%" height="15" fill="rgb(230,49,44)" fg:x="372" fg:w="3"/><text x="16.2845%" y="239.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (2 samples, 0.09%)</title><rect x="16.0776%" y="213" width="0.0862%" height="15" fill="rgb(229,67,23)" fg:x="373" fg:w="2"/><text x="16.3276%" y="223.50"></text></g><g><title>jsode::parser::JsonCursor::update_prop_index (5 samples, 0.22%)</title><rect x="15.9914%" y="293" width="0.2155%" height="15" fill="rgb(249,83,47)" fg:x="371" fg:w="5"/><text x="16.2414%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.04%)</title><rect x="16.1638%" y="277" width="0.0431%" height="15" fill="rgb(215,43,3)" fg:x="375" fg:w="1"/><text x="16.4138%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.04%)</title><rect x="16.1638%" y="261" width="0.0431%" height="15" fill="rgb(238,154,13)" fg:x="375" fg:w="1"/><text x="16.4138%" y="271.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.04%)</title><rect x="16.1638%" y="245" width="0.0431%" height="15" fill="rgb(219,56,2)" fg:x="375" fg:w="1"/><text x="16.4138%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.04%)</title><rect x="16.1638%" y="229" width="0.0431%" height="15" fill="rgb(233,0,4)" fg:x="375" fg:w="1"/><text x="16.4138%" y="239.50"></text></g><g><title>[libc.so.6] (25 samples, 1.08%)</title><rect x="15.7328%" y="581" width="1.0776%" height="15" fill="rgb(235,30,7)" fg:x="365" fg:w="25"/><text x="15.9828%" y="591.50"></text></g><g><title>main (24 samples, 1.03%)</title><rect x="15.7759%" y="565" width="1.0345%" height="15" fill="rgb(250,79,13)" fg:x="366" fg:w="24"/><text x="16.0259%" y="575.50"></text></g><g><title>std::rt::lang_start (24 samples, 1.03%)</title><rect x="15.7759%" y="549" width="1.0345%" height="15" fill="rgb(211,146,34)" fg:x="366" fg:w="24"/><text x="16.0259%" y="559.50"></text></g><g><title>std::rt::lang_start_internal (24 samples, 1.03%)</title><rect x="15.7759%" y="533" width="1.0345%" height="15" fill="rgb(228,22,38)" fg:x="366" fg:w="24"/><text x="16.0259%" y="543.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 1.03%)</title><rect x="15.7759%" y="517" width="1.0345%" height="15" fill="rgb(235,168,5)" fg:x="366" fg:w="24"/><text x="16.0259%" y="527.50"></text></g><g><title>std::panicking::try (24 samples, 1.03%)</title><rect x="15.7759%" y="501" width="1.0345%" height="15" fill="rgb(221,155,16)" fg:x="366" fg:w="24"/><text x="16.0259%" y="511.50"></text></g><g><title>std::panicking::try::do_call (24 samples, 1.03%)</title><rect x="15.7759%" y="485" width="1.0345%" height="15" fill="rgb(215,215,53)" fg:x="366" fg:w="24"/><text x="16.0259%" y="495.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (24 samples, 1.03%)</title><rect x="15.7759%" y="469" width="1.0345%" height="15" fill="rgb(223,4,10)" fg:x="366" fg:w="24"/><text x="16.0259%" y="479.50"></text></g><g><title>std::panic::catch_unwind (24 samples, 1.03%)</title><rect x="15.7759%" y="453" width="1.0345%" height="15" fill="rgb(234,103,6)" fg:x="366" fg:w="24"/><text x="16.0259%" y="463.50"></text></g><g><title>std::panicking::try (24 samples, 1.03%)</title><rect x="15.7759%" y="437" width="1.0345%" height="15" fill="rgb(227,97,0)" fg:x="366" fg:w="24"/><text x="16.0259%" y="447.50"></text></g><g><title>std::panicking::try::do_call (24 samples, 1.03%)</title><rect x="15.7759%" y="421" width="1.0345%" height="15" fill="rgb(234,150,53)" fg:x="366" fg:w="24"/><text x="16.0259%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (24 samples, 1.03%)</title><rect x="15.7759%" y="405" width="1.0345%" height="15" fill="rgb(228,201,54)" fg:x="366" fg:w="24"/><text x="16.0259%" y="415.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (24 samples, 1.03%)</title><rect x="15.7759%" y="389" width="1.0345%" height="15" fill="rgb(222,22,37)" fg:x="366" fg:w="24"/><text x="16.0259%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24 samples, 1.03%)</title><rect x="15.7759%" y="373" width="1.0345%" height="15" fill="rgb(237,53,32)" fg:x="366" fg:w="24"/><text x="16.0259%" y="383.50"></text></g><g><title>core::ops::function::FnOnce::call_once (24 samples, 1.03%)</title><rect x="15.7759%" y="357" width="1.0345%" height="15" fill="rgb(233,25,53)" fg:x="366" fg:w="24"/><text x="16.0259%" y="367.50"></text></g><g><title>jsode::main (24 samples, 1.03%)</title><rect x="15.7759%" y="341" width="1.0345%" height="15" fill="rgb(210,40,34)" fg:x="366" fg:w="24"/><text x="16.0259%" y="351.50"></text></g><g><title>jsode::parser::JsonParser::parse (24 samples, 1.03%)</title><rect x="15.7759%" y="325" width="1.0345%" height="15" fill="rgb(241,220,44)" fg:x="366" fg:w="24"/><text x="16.0259%" y="335.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (24 samples, 1.03%)</title><rect x="15.7759%" y="309" width="1.0345%" height="15" fill="rgb(235,28,35)" fg:x="366" fg:w="24"/><text x="16.0259%" y="319.50"></text></g><g><title>jsode::parser::JsonParser::next_token_skip (14 samples, 0.60%)</title><rect x="16.2069%" y="293" width="0.6034%" height="15" fill="rgb(210,56,17)" fg:x="376" fg:w="14"/><text x="16.4569%" y="303.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (14 samples, 0.60%)</title><rect x="16.2069%" y="277" width="0.6034%" height="15" fill="rgb(224,130,29)" fg:x="376" fg:w="14"/><text x="16.4569%" y="287.50"></text></g><g><title>[libc.so.6] (11 samples, 0.47%)</title><rect x="16.3362%" y="261" width="0.4741%" height="15" fill="rgb(235,212,8)" fg:x="379" fg:w="11"/><text x="16.5862%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (4 samples, 0.17%)</title><rect x="16.8103%" y="565" width="0.1724%" height="15" fill="rgb(223,33,50)" fg:x="390" fg:w="4"/><text x="17.0603%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.17%)</title><rect x="16.9828%" y="565" width="0.1724%" height="15" fill="rgb(219,149,13)" fg:x="394" fg:w="4"/><text x="17.2328%" y="575.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="17.1552%" y="565" width="0.0431%" height="15" fill="rgb(250,156,29)" fg:x="398" fg:w="1"/><text x="17.4052%" y="575.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.13%)</title><rect x="17.1983%" y="565" width="0.1293%" height="15" fill="rgb(216,193,19)" fg:x="399" fg:w="3"/><text x="17.4483%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (1 samples, 0.04%)</title><rect x="17.3276%" y="565" width="0.0431%" height="15" fill="rgb(216,135,14)" fg:x="402" fg:w="1"/><text x="17.5776%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="17.3707%" y="565" width="0.0431%" height="15" fill="rgb(241,47,5)" fg:x="403" fg:w="1"/><text x="17.6207%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="17.4138%" y="565" width="0.0431%" height="15" fill="rgb(233,42,35)" fg:x="404" fg:w="1"/><text x="17.6638%" y="575.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2 samples, 0.09%)</title><rect x="17.4569%" y="565" width="0.0862%" height="15" fill="rgb(231,13,6)" fg:x="405" fg:w="2"/><text x="17.7069%" y="575.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.04%)</title><rect x="17.5431%" y="565" width="0.0431%" height="15" fill="rgb(207,181,40)" fg:x="407" fg:w="1"/><text x="17.7931%" y="575.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="17.5862%" y="565" width="0.0862%" height="15" fill="rgb(254,173,49)" fg:x="408" fg:w="2"/><text x="17.8362%" y="575.50"></text></g><g><title>__rdl_realloc (1 samples, 0.04%)</title><rect x="17.6724%" y="565" width="0.0431%" height="15" fill="rgb(221,1,38)" fg:x="410" fg:w="1"/><text x="17.9224%" y="575.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="17.6724%" y="549" width="0.0431%" height="15" fill="rgb(206,124,46)" fg:x="410" fg:w="1"/><text x="17.9224%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="17.7155%" y="565" width="0.0431%" height="15" fill="rgb(249,21,11)" fg:x="411" fg:w="1"/><text x="17.9655%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="17.7155%" y="549" width="0.0431%" height="15" fill="rgb(222,201,40)" fg:x="411" fg:w="1"/><text x="17.9655%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="17.7155%" y="533" width="0.0431%" height="15" fill="rgb(235,61,29)" fg:x="411" fg:w="1"/><text x="17.9655%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="17.7586%" y="565" width="0.0431%" height="15" fill="rgb(219,207,3)" fg:x="412" fg:w="1"/><text x="18.0086%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::back_mut (1 samples, 0.04%)</title><rect x="17.8017%" y="565" width="0.0431%" height="15" fill="rgb(222,56,46)" fg:x="413" fg:w="1"/><text x="18.0517%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="17.8448%" y="565" width="0.0431%" height="15" fill="rgb(239,76,54)" fg:x="414" fg:w="1"/><text x="18.0948%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="17.8879%" y="565" width="0.0431%" height="15" fill="rgb(231,124,27)" fg:x="415" fg:w="1"/><text x="18.1379%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.09%)</title><rect x="17.9310%" y="565" width="0.0862%" height="15" fill="rgb(249,195,6)" fg:x="416" fg:w="2"/><text x="18.1810%" y="575.50"></text></g><g><title>core::cmp::max_by (3 samples, 0.13%)</title><rect x="18.0172%" y="565" width="0.1293%" height="15" fill="rgb(237,174,47)" fg:x="418" fg:w="3"/><text x="18.2672%" y="575.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (4 samples, 0.17%)</title><rect x="18.1466%" y="565" width="0.1724%" height="15" fill="rgb(206,201,31)" fg:x="421" fg:w="4"/><text x="18.3966%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="18.3190%" y="565" width="0.0431%" height="15" fill="rgb(231,57,52)" fg:x="425" fg:w="1"/><text x="18.5690%" y="575.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.09%)</title><rect x="18.3621%" y="565" width="0.0862%" height="15" fill="rgb(248,177,22)" fg:x="426" fg:w="2"/><text x="18.6121%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (2 samples, 0.09%)</title><rect x="18.4483%" y="565" width="0.0862%" height="15" fill="rgb(215,211,37)" fg:x="428" fg:w="2"/><text x="18.6983%" y="575.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (1 samples, 0.04%)</title><rect x="18.5345%" y="565" width="0.0431%" height="15" fill="rgb(241,128,51)" fg:x="430" fg:w="1"/><text x="18.7845%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.09%)</title><rect x="18.5776%" y="565" width="0.0862%" height="15" fill="rgb(227,165,31)" fg:x="431" fg:w="2"/><text x="18.8276%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.04%)</title><rect x="18.6638%" y="565" width="0.0431%" height="15" fill="rgb(228,167,24)" fg:x="433" fg:w="1"/><text x="18.9138%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.04%)</title><rect x="18.7069%" y="565" width="0.0431%" height="15" fill="rgb(228,143,12)" fg:x="434" fg:w="1"/><text x="18.9569%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="18.7500%" y="565" width="0.0431%" height="15" fill="rgb(249,149,8)" fg:x="435" fg:w="1"/><text x="19.0000%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsode::core::JsonType&gt; (1 samples, 0.04%)</title><rect x="18.7931%" y="565" width="0.0431%" height="15" fill="rgb(243,35,44)" fg:x="436" fg:w="1"/><text x="19.0431%" y="575.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (3 samples, 0.13%)</title><rect x="18.8362%" y="565" width="0.1293%" height="15" fill="rgb(246,89,9)" fg:x="437" fg:w="3"/><text x="19.0862%" y="575.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="18.9655%" y="565" width="0.0431%" height="15" fill="rgb(233,213,13)" fg:x="440" fg:w="1"/><text x="19.2155%" y="575.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (1 samples, 0.04%)</title><rect x="19.0086%" y="565" width="0.0431%" height="15" fill="rgb(233,141,41)" fg:x="441" fg:w="1"/><text x="19.2586%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="19.0517%" y="565" width="0.0431%" height="15" fill="rgb(239,167,4)" fg:x="442" fg:w="1"/><text x="19.3017%" y="575.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.04%)</title><rect x="19.0948%" y="565" width="0.0431%" height="15" fill="rgb(209,217,16)" fg:x="443" fg:w="1"/><text x="19.3448%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="19.1379%" y="565" width="0.0431%" height="15" fill="rgb(219,88,35)" fg:x="444" fg:w="1"/><text x="19.3879%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.04%)</title><rect x="19.1810%" y="565" width="0.0431%" height="15" fill="rgb(220,193,23)" fg:x="445" fg:w="1"/><text x="19.4310%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (1 samples, 0.04%)</title><rect x="19.1810%" y="549" width="0.0431%" height="15" fill="rgb(230,90,52)" fg:x="445" fg:w="1"/><text x="19.4310%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (1 samples, 0.04%)</title><rect x="19.1810%" y="533" width="0.0431%" height="15" fill="rgb(252,106,19)" fg:x="445" fg:w="1"/><text x="19.4310%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (1 samples, 0.04%)</title><rect x="19.1810%" y="517" width="0.0431%" height="15" fill="rgb(206,74,20)" fg:x="445" fg:w="1"/><text x="19.4310%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="19.1810%" y="501" width="0.0431%" height="15" fill="rgb(230,138,44)" fg:x="445" fg:w="1"/><text x="19.4310%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.04%)</title><rect x="19.2241%" y="565" width="0.0431%" height="15" fill="rgb(235,182,43)" fg:x="446" fg:w="1"/><text x="19.4741%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (2 samples, 0.09%)</title><rect x="19.2672%" y="565" width="0.0862%" height="15" fill="rgb(242,16,51)" fg:x="447" fg:w="2"/><text x="19.5172%" y="575.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.04%)</title><rect x="19.3103%" y="549" width="0.0431%" height="15" fill="rgb(248,9,4)" fg:x="448" fg:w="1"/><text x="19.5603%" y="559.50"></text></g><g><title>jsode::common::hash_str (1 samples, 0.04%)</title><rect x="19.3534%" y="565" width="0.0431%" height="15" fill="rgb(210,31,22)" fg:x="449" fg:w="1"/><text x="19.6034%" y="575.50"></text></g><g><title>jsode::lexer::Tokenizer::consume_until (12 samples, 0.52%)</title><rect x="19.3966%" y="565" width="0.5172%" height="15" fill="rgb(239,54,39)" fg:x="450" fg:w="12"/><text x="19.6466%" y="575.50"></text></g><g><title>jsode::lexer::Tokenizer::next_item (14 samples, 0.60%)</title><rect x="19.9138%" y="565" width="0.6034%" height="15" fill="rgb(230,99,41)" fg:x="462" fg:w="14"/><text x="20.1638%" y="575.50"></text></g><g><title>jsode::parser::JsonCursor::pop_state (1 samples, 0.04%)</title><rect x="20.5172%" y="565" width="0.0431%" height="15" fill="rgb(253,106,12)" fg:x="476" fg:w="1"/><text x="20.7672%" y="575.50"></text></g><g><title>[unknown] (88 samples, 3.79%)</title><rect x="16.8103%" y="581" width="3.7931%" height="15" fill="rgb(213,46,41)" fg:x="390" fg:w="88"/><text x="17.0603%" y="591.50">[unk..</text></g><g><title>jsode::parser::JsonParser::take_slice (1 samples, 0.04%)</title><rect x="20.5603%" y="565" width="0.0431%" height="15" fill="rgb(215,133,35)" fg:x="477" fg:w="1"/><text x="20.8103%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (1 samples, 0.04%)</title><rect x="20.6034%" y="261" width="0.0431%" height="15" fill="rgb(213,28,5)" fg:x="478" fg:w="1"/><text x="20.8534%" y="271.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (2 samples, 0.09%)</title><rect x="20.6466%" y="245" width="0.0862%" height="15" fill="rgb(215,77,49)" fg:x="479" fg:w="2"/><text x="20.8966%" y="255.50"></text></g><g><title>std::hash::random::RandomState::new (2 samples, 0.09%)</title><rect x="20.6466%" y="229" width="0.0862%" height="15" fill="rgb(248,100,22)" fg:x="479" fg:w="2"/><text x="20.8966%" y="239.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.09%)</title><rect x="20.6466%" y="213" width="0.0862%" height="15" fill="rgb(208,67,9)" fg:x="479" fg:w="2"/><text x="20.8966%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.09%)</title><rect x="20.6466%" y="197" width="0.0862%" height="15" fill="rgb(219,133,21)" fg:x="479" fg:w="2"/><text x="20.8966%" y="207.50"></text></g><g><title>std::hash::random::RandomState::new::_{{closure}} (1 samples, 0.04%)</title><rect x="20.6897%" y="181" width="0.0431%" height="15" fill="rgb(246,46,29)" fg:x="480" fg:w="1"/><text x="20.9397%" y="191.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (1 samples, 0.04%)</title><rect x="20.6897%" y="165" width="0.0431%" height="15" fill="rgb(246,185,52)" fg:x="480" fg:w="1"/><text x="20.9397%" y="175.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (1 samples, 0.04%)</title><rect x="20.6897%" y="149" width="0.0431%" height="15" fill="rgb(252,136,11)" fg:x="480" fg:w="1"/><text x="20.9397%" y="159.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="20.6897%" y="133" width="0.0431%" height="15" fill="rgb(219,138,53)" fg:x="480" fg:w="1"/><text x="20.9397%" y="143.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="20.6897%" y="117" width="0.0431%" height="15" fill="rgb(211,51,23)" fg:x="480" fg:w="1"/><text x="20.9397%" y="127.50"></text></g><g><title>jsode::parser::JsonCursor::create_object_block (4 samples, 0.17%)</title><rect x="20.6034%" y="277" width="0.1724%" height="15" fill="rgb(247,221,28)" fg:x="478" fg:w="4"/><text x="20.8534%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (3 samples, 0.13%)</title><rect x="20.6466%" y="261" width="0.1293%" height="15" fill="rgb(251,222,45)" fg:x="479" fg:w="3"/><text x="20.8966%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.04%)</title><rect x="20.7328%" y="245" width="0.0431%" height="15" fill="rgb(217,162,53)" fg:x="481" fg:w="1"/><text x="20.9828%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (1 samples, 0.04%)</title><rect x="20.7328%" y="229" width="0.0431%" height="15" fill="rgb(229,93,14)" fg:x="481" fg:w="1"/><text x="20.9828%" y="239.50"></text></g><g><title>jsode::common::hash_str (2 samples, 0.09%)</title><rect x="20.7759%" y="261" width="0.0862%" height="15" fill="rgb(209,67,49)" fg:x="482" fg:w="2"/><text x="21.0259%" y="271.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="20.7759%" y="245" width="0.0862%" height="15" fill="rgb(213,87,29)" fg:x="482" fg:w="2"/><text x="21.0259%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="20.7759%" y="229" width="0.0862%" height="15" fill="rgb(205,151,52)" fg:x="482" fg:w="2"/><text x="21.0259%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.09%)</title><rect x="20.7759%" y="213" width="0.0862%" height="15" fill="rgb(253,215,39)" fg:x="482" fg:w="2"/><text x="21.0259%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="20.7759%" y="197" width="0.0862%" height="15" fill="rgb(221,220,41)" fg:x="482" fg:w="2"/><text x="21.0259%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="20.8190%" y="181" width="0.0431%" height="15" fill="rgb(218,133,21)" fg:x="483" fg:w="1"/><text x="21.0690%" y="191.50"></text></g><g><title>jsode::parser::JsonParser::take_slice (1 samples, 0.04%)</title><rect x="20.8621%" y="261" width="0.0431%" height="15" fill="rgb(221,193,43)" fg:x="484" fg:w="1"/><text x="21.1121%" y="271.50"></text></g><g><title>jsode::lexer::Tokenizer::take_slice (1 samples, 0.04%)</title><rect x="20.8621%" y="245" width="0.0431%" height="15" fill="rgb(240,128,52)" fg:x="484" fg:w="1"/><text x="21.1121%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.04%)</title><rect x="20.8621%" y="229" width="0.0431%" height="15" fill="rgb(253,114,12)" fg:x="484" fg:w="1"/><text x="21.1121%" y="239.50"></text></g><g><title>jsode::parser::JsonCursor::update_prop_index (5 samples, 0.22%)</title><rect x="20.7759%" y="277" width="0.2155%" height="15" fill="rgb(215,223,47)" fg:x="482" fg:w="5"/><text x="21.0259%" y="287.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.09%)</title><rect x="20.9052%" y="261" width="0.0862%" height="15" fill="rgb(248,225,23)" fg:x="485" fg:w="2"/><text x="21.1552%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.09%)</title><rect x="20.9052%" y="245" width="0.0862%" height="15" fill="rgb(250,108,0)" fg:x="485" fg:w="2"/><text x="21.1552%" y="255.50"></text></g><g><title>__libc_start_main (16 samples, 0.69%)</title><rect x="20.6034%" y="581" width="0.6897%" height="15" fill="rgb(228,208,7)" fg:x="478" fg:w="16"/><text x="20.8534%" y="591.50"></text></g><g><title>[libc.so.6] (16 samples, 0.69%)</title><rect x="20.6034%" y="565" width="0.6897%" height="15" fill="rgb(244,45,10)" fg:x="478" fg:w="16"/><text x="20.8534%" y="575.50"></text></g><g><title>main (16 samples, 0.69%)</title><rect x="20.6034%" y="549" width="0.6897%" height="15" fill="rgb(207,125,25)" fg:x="478" fg:w="16"/><text x="20.8534%" y="559.50"></text></g><g><title>std::rt::lang_start (16 samples, 0.69%)</title><rect x="20.6034%" y="533" width="0.6897%" height="15" fill="rgb(210,195,18)" fg:x="478" fg:w="16"/><text x="20.8534%" y="543.50"></text></g><g><title>std::rt::lang_start_internal (16 samples, 0.69%)</title><rect x="20.6034%" y="517" width="0.6897%" height="15" fill="rgb(249,80,12)" fg:x="478" fg:w="16"/><text x="20.8534%" y="527.50"></text></g><g><title>std::panic::catch_unwind (16 samples, 0.69%)</title><rect x="20.6034%" y="501" width="0.6897%" height="15" fill="rgb(221,65,9)" fg:x="478" fg:w="16"/><text x="20.8534%" y="511.50"></text></g><g><title>std::panicking::try (16 samples, 0.69%)</title><rect x="20.6034%" y="485" width="0.6897%" height="15" fill="rgb(235,49,36)" fg:x="478" fg:w="16"/><text x="20.8534%" y="495.50"></text></g><g><title>std::panicking::try::do_call (16 samples, 0.69%)</title><rect x="20.6034%" y="469" width="0.6897%" height="15" fill="rgb(225,32,20)" fg:x="478" fg:w="16"/><text x="20.8534%" y="479.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (16 samples, 0.69%)</title><rect x="20.6034%" y="453" width="0.6897%" height="15" fill="rgb(215,141,46)" fg:x="478" fg:w="16"/><text x="20.8534%" y="463.50"></text></g><g><title>std::panic::catch_unwind (16 samples, 0.69%)</title><rect x="20.6034%" y="437" width="0.6897%" height="15" fill="rgb(250,160,47)" fg:x="478" fg:w="16"/><text x="20.8534%" y="447.50"></text></g><g><title>std::panicking::try (16 samples, 0.69%)</title><rect x="20.6034%" y="421" width="0.6897%" height="15" fill="rgb(216,222,40)" fg:x="478" fg:w="16"/><text x="20.8534%" y="431.50"></text></g><g><title>std::panicking::try::do_call (16 samples, 0.69%)</title><rect x="20.6034%" y="405" width="0.6897%" height="15" fill="rgb(234,217,39)" fg:x="478" fg:w="16"/><text x="20.8534%" y="415.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (16 samples, 0.69%)</title><rect x="20.6034%" y="389" width="0.6897%" height="15" fill="rgb(207,178,40)" fg:x="478" fg:w="16"/><text x="20.8534%" y="399.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (16 samples, 0.69%)</title><rect x="20.6034%" y="373" width="0.6897%" height="15" fill="rgb(221,136,13)" fg:x="478" fg:w="16"/><text x="20.8534%" y="383.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16 samples, 0.69%)</title><rect x="20.6034%" y="357" width="0.6897%" height="15" fill="rgb(249,199,10)" fg:x="478" fg:w="16"/><text x="20.8534%" y="367.50"></text></g><g><title>core::ops::function::FnOnce::call_once (16 samples, 0.69%)</title><rect x="20.6034%" y="341" width="0.6897%" height="15" fill="rgb(249,222,13)" fg:x="478" fg:w="16"/><text x="20.8534%" y="351.50"></text></g><g><title>jsode::main (16 samples, 0.69%)</title><rect x="20.6034%" y="325" width="0.6897%" height="15" fill="rgb(244,185,38)" fg:x="478" fg:w="16"/><text x="20.8534%" y="335.50"></text></g><g><title>jsode::parser::JsonParser::parse (16 samples, 0.69%)</title><rect x="20.6034%" y="309" width="0.6897%" height="15" fill="rgb(236,202,9)" fg:x="478" fg:w="16"/><text x="20.8534%" y="319.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (16 samples, 0.69%)</title><rect x="20.6034%" y="293" width="0.6897%" height="15" fill="rgb(250,229,37)" fg:x="478" fg:w="16"/><text x="20.8534%" y="303.50"></text></g><g><title>jsode::parser::JsonParser::next_token (7 samples, 0.30%)</title><rect x="20.9914%" y="277" width="0.3017%" height="15" fill="rgb(206,174,23)" fg:x="487" fg:w="7"/><text x="21.2414%" y="287.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.30%)</title><rect x="20.9914%" y="261" width="0.3017%" height="15" fill="rgb(211,33,43)" fg:x="487" fg:w="7"/><text x="21.2414%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="21.0776%" y="245" width="0.2155%" height="15" fill="rgb(245,58,50)" fg:x="489" fg:w="5"/><text x="21.3276%" y="255.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (4 samples, 0.17%)</title><rect x="21.2931%" y="293" width="0.1724%" height="15" fill="rgb(244,68,36)" fg:x="494" fg:w="4"/><text x="21.5431%" y="303.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (4 samples, 0.17%)</title><rect x="21.2931%" y="277" width="0.1724%" height="15" fill="rgb(232,229,15)" fg:x="494" fg:w="4"/><text x="21.5431%" y="287.50"></text></g><g><title>std::io::default_read_to_string (4 samples, 0.17%)</title><rect x="21.2931%" y="261" width="0.1724%" height="15" fill="rgb(254,30,23)" fg:x="494" fg:w="4"/><text x="21.5431%" y="271.50"></text></g><g><title>std::io::append_to_string (4 samples, 0.17%)</title><rect x="21.2931%" y="245" width="0.1724%" height="15" fill="rgb(235,160,14)" fg:x="494" fg:w="4"/><text x="21.5431%" y="255.50"></text></g><g><title>core::str::converts::from_utf8 (4 samples, 0.17%)</title><rect x="21.2931%" y="229" width="0.1724%" height="15" fill="rgb(212,155,44)" fg:x="494" fg:w="4"/><text x="21.5431%" y="239.50"></text></g><g><title>core::str::validations::run_utf8_validation (4 samples, 0.17%)</title><rect x="21.2931%" y="213" width="0.1724%" height="15" fill="rgb(226,2,50)" fg:x="494" fg:w="4"/><text x="21.5431%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="22.1121%" y="245" width="0.0431%" height="15" fill="rgb(234,177,6)" fg:x="513" fg:w="1"/><text x="22.3621%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="22.1121%" y="229" width="0.0431%" height="15" fill="rgb(217,24,9)" fg:x="513" fg:w="1"/><text x="22.3621%" y="239.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="22.1121%" y="213" width="0.0431%" height="15" fill="rgb(220,13,46)" fg:x="513" fg:w="1"/><text x="22.3621%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="22.1121%" y="197" width="0.0431%" height="15" fill="rgb(239,221,27)" fg:x="513" fg:w="1"/><text x="22.3621%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.04%)</title><rect x="22.2414%" y="229" width="0.0431%" height="15" fill="rgb(222,198,25)" fg:x="516" fg:w="1"/><text x="22.4914%" y="239.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="22.2414%" y="213" width="0.0431%" height="15" fill="rgb(211,99,13)" fg:x="516" fg:w="1"/><text x="22.4914%" y="223.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (2 samples, 0.09%)</title><rect x="22.3276%" y="213" width="0.0862%" height="15" fill="rgb(232,111,31)" fg:x="518" fg:w="2"/><text x="22.5776%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.04%)</title><rect x="22.3707%" y="197" width="0.0431%" height="15" fill="rgb(245,82,37)" fg:x="519" fg:w="1"/><text x="22.6207%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.04%)</title><rect x="22.3707%" y="181" width="0.0431%" height="15" fill="rgb(227,149,46)" fg:x="519" fg:w="1"/><text x="22.6207%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.04%)</title><rect x="22.3707%" y="165" width="0.0431%" height="15" fill="rgb(218,36,50)" fg:x="519" fg:w="1"/><text x="22.6207%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::convert::AsMut&lt;[T]&gt;&gt;::as_mut (20 samples, 0.86%)</title><rect x="22.1121%" y="277" width="0.8621%" height="15" fill="rgb(226,80,48)" fg:x="513" fg:w="20"/><text x="22.3621%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (20 samples, 0.86%)</title><rect x="22.1121%" y="261" width="0.8621%" height="15" fill="rgb(238,224,15)" fg:x="513" fg:w="20"/><text x="22.3621%" y="271.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (19 samples, 0.82%)</title><rect x="22.1552%" y="245" width="0.8190%" height="15" fill="rgb(241,136,10)" fg:x="514" fg:w="19"/><text x="22.4052%" y="255.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut::precondition_check (16 samples, 0.69%)</title><rect x="22.2845%" y="229" width="0.6897%" height="15" fill="rgb(208,32,45)" fg:x="517" fg:w="16"/><text x="22.5345%" y="239.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (13 samples, 0.56%)</title><rect x="22.4138%" y="213" width="0.5603%" height="15" fill="rgb(207,135,9)" fg:x="520" fg:w="13"/><text x="22.6638%" y="223.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.39%)</title><rect x="22.9741%" y="277" width="0.3879%" height="15" fill="rgb(206,86,44)" fg:x="533" fg:w="9"/><text x="23.2241%" y="287.50"></text></g><g><title>[libc.so.6] (9 samples, 0.39%)</title><rect x="22.9741%" y="261" width="0.3879%" height="15" fill="rgb(245,177,15)" fg:x="533" fg:w="9"/><text x="23.2241%" y="271.50"></text></g><g><title>[libc.so.6] (60 samples, 2.59%)</title><rect x="23.3621%" y="277" width="2.5862%" height="15" fill="rgb(206,64,50)" fg:x="542" fg:w="60"/><text x="23.6121%" y="287.50">[l..</text></g><g><title>alloc::collections::vec_deque::wrap_index (1 samples, 0.04%)</title><rect x="26.2069%" y="213" width="0.0431%" height="15" fill="rgb(234,36,40)" fg:x="608" fg:w="1"/><text x="26.4569%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::back (8 samples, 0.34%)</title><rect x="25.9483%" y="277" width="0.3448%" height="15" fill="rgb(213,64,8)" fg:x="602" fg:w="8"/><text x="26.1983%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get (8 samples, 0.34%)</title><rect x="25.9483%" y="261" width="0.3448%" height="15" fill="rgb(210,75,36)" fg:x="602" fg:w="8"/><text x="26.1983%" y="271.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (5 samples, 0.22%)</title><rect x="26.0776%" y="245" width="0.2155%" height="15" fill="rgb(229,88,21)" fg:x="605" fg:w="5"/><text x="26.3276%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (2 samples, 0.09%)</title><rect x="26.2069%" y="229" width="0.0862%" height="15" fill="rgb(252,204,47)" fg:x="608" fg:w="2"/><text x="26.4569%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_add (1 samples, 0.04%)</title><rect x="26.2500%" y="213" width="0.0431%" height="15" fill="rgb(208,77,27)" fg:x="609" fg:w="1"/><text x="26.5000%" y="223.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::is_empty (1 samples, 0.04%)</title><rect x="26.2931%" y="277" width="0.0431%" height="15" fill="rgb(221,76,26)" fg:x="610" fg:w="1"/><text x="26.5431%" y="287.50"></text></g><g><title>[libc.so.6] (8 samples, 0.34%)</title><rect x="26.4655%" y="261" width="0.3448%" height="15" fill="rgb(225,139,18)" fg:x="614" fg:w="8"/><text x="26.7155%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="26.8103%" y="261" width="0.0431%" height="15" fill="rgb(230,137,11)" fg:x="622" fg:w="1"/><text x="27.0603%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="26.8103%" y="245" width="0.0431%" height="15" fill="rgb(212,28,1)" fg:x="622" fg:w="1"/><text x="27.0603%" y="255.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="26.8103%" y="229" width="0.0431%" height="15" fill="rgb(248,164,17)" fg:x="622" fg:w="1"/><text x="27.0603%" y="239.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="26.8103%" y="213" width="0.0431%" height="15" fill="rgb(222,171,42)" fg:x="622" fg:w="1"/><text x="27.0603%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (17 samples, 0.73%)</title><rect x="26.3362%" y="277" width="0.7328%" height="15" fill="rgb(243,84,45)" fg:x="611" fg:w="17"/><text x="26.5862%" y="287.50"></text></g><g><title>core::ptr::write (5 samples, 0.22%)</title><rect x="26.8534%" y="261" width="0.2155%" height="15" fill="rgb(252,49,23)" fg:x="623" fg:w="5"/><text x="27.1034%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="26.8534%" y="245" width="0.2155%" height="15" fill="rgb(215,19,7)" fg:x="623" fg:w="5"/><text x="27.1034%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;jsode::core::JsonToken&gt;&gt; (1 samples, 0.04%)</title><rect x="27.0690%" y="277" width="0.0431%" height="15" fill="rgb(238,81,41)" fg:x="628" fg:w="1"/><text x="27.3190%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="27.1121%" y="229" width="0.0431%" height="15" fill="rgb(210,199,37)" fg:x="629" fg:w="1"/><text x="27.3621%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsode::core::JsonToken&gt; (5 samples, 0.22%)</title><rect x="27.1121%" y="277" width="0.2155%" height="15" fill="rgb(244,192,49)" fg:x="629" fg:w="5"/><text x="27.3621%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsode::core::JsonType&gt; (5 samples, 0.22%)</title><rect x="27.1121%" y="261" width="0.2155%" height="15" fill="rgb(226,211,11)" fg:x="629" fg:w="5"/><text x="27.3621%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;jsode::core::StrType&gt;&gt; (5 samples, 0.22%)</title><rect x="27.1121%" y="245" width="0.2155%" height="15" fill="rgb(236,162,54)" fg:x="629" fg:w="5"/><text x="27.3621%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;jsode::core::StrType&gt;&gt; (4 samples, 0.17%)</title><rect x="27.1552%" y="229" width="0.1724%" height="15" fill="rgb(220,229,9)" fg:x="630" fg:w="4"/><text x="27.4052%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.17%)</title><rect x="27.1552%" y="213" width="0.1724%" height="15" fill="rgb(250,87,22)" fg:x="630" fg:w="4"/><text x="27.4052%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.17%)</title><rect x="27.1552%" y="197" width="0.1724%" height="15" fill="rgb(239,43,17)" fg:x="630" fg:w="4"/><text x="27.4052%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.17%)</title><rect x="27.1552%" y="181" width="0.1724%" height="15" fill="rgb(231,177,25)" fg:x="630" fg:w="4"/><text x="27.4052%" y="191.50"></text></g><g><title>cfree (4 samples, 0.17%)</title><rect x="27.1552%" y="165" width="0.1724%" height="15" fill="rgb(219,179,1)" fg:x="630" fg:w="4"/><text x="27.4052%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.13%)</title><rect x="27.1983%" y="149" width="0.1293%" height="15" fill="rgb(238,219,53)" fg:x="631" fg:w="3"/><text x="27.4483%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="27.3276%" y="261" width="0.0431%" height="15" fill="rgb(232,167,36)" fg:x="634" fg:w="1"/><text x="27.5776%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="27.4138%" y="245" width="0.0431%" height="15" fill="rgb(244,19,51)" fg:x="636" fg:w="1"/><text x="27.6638%" y="255.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::default::Default&gt;::default (1 samples, 0.04%)</title><rect x="27.4569%" y="229" width="0.0431%" height="15" fill="rgb(224,6,22)" fg:x="637" fg:w="1"/><text x="27.7069%" y="239.50"></text></g><g><title>std::hash::random::RandomState::new (1 samples, 0.04%)</title><rect x="27.4569%" y="213" width="0.0431%" height="15" fill="rgb(224,145,5)" fg:x="637" fg:w="1"/><text x="27.7069%" y="223.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (1 samples, 0.04%)</title><rect x="27.4569%" y="197" width="0.0431%" height="15" fill="rgb(234,130,49)" fg:x="637" fg:w="1"/><text x="27.7069%" y="207.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.04%)</title><rect x="27.4569%" y="181" width="0.0431%" height="15" fill="rgb(254,6,2)" fg:x="637" fg:w="1"/><text x="27.7069%" y="191.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="27.5000%" y="213" width="0.0862%" height="15" fill="rgb(208,96,46)" fg:x="638" fg:w="2"/><text x="27.7500%" y="223.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or_else (1 samples, 0.04%)</title><rect x="27.6293%" y="133" width="0.0431%" height="15" fill="rgb(239,3,39)" fg:x="641" fg:w="1"/><text x="27.8793%" y="143.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="27.6724%" y="117" width="0.0431%" height="15" fill="rgb(233,210,1)" fg:x="642" fg:w="1"/><text x="27.9224%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="27.7155%" y="69" width="0.0431%" height="15" fill="rgb(244,137,37)" fg:x="643" fg:w="1"/><text x="27.9655%" y="79.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="27.7155%" y="53" width="0.0431%" height="15" fill="rgb(240,136,2)" fg:x="643" fg:w="1"/><text x="27.9655%" y="63.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.13%)</title><rect x="27.6724%" y="133" width="0.1293%" height="15" fill="rgb(239,18,37)" fg:x="642" fg:w="3"/><text x="27.9224%" y="143.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.09%)</title><rect x="27.7155%" y="117" width="0.0862%" height="15" fill="rgb(218,185,22)" fg:x="643" fg:w="2"/><text x="27.9655%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="27.7155%" y="101" width="0.0862%" height="15" fill="rgb(225,218,4)" fg:x="643" fg:w="2"/><text x="27.9655%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="27.7155%" y="85" width="0.0862%" height="15" fill="rgb(230,182,32)" fg:x="643" fg:w="2"/><text x="27.9655%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="27.7586%" y="69" width="0.0431%" height="15" fill="rgb(242,56,43)" fg:x="644" fg:w="1"/><text x="28.0086%" y="79.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.04%)</title><rect x="27.7586%" y="53" width="0.0431%" height="15" fill="rgb(233,99,24)" fg:x="644" fg:w="1"/><text x="28.0086%" y="63.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (1 samples, 0.04%)</title><rect x="27.7586%" y="37" width="0.0431%" height="15" fill="rgb(234,209,42)" fg:x="644" fg:w="1"/><text x="28.0086%" y="47.50"></text></g><g><title>jsode::parser::JsonCursor::create_object_block (12 samples, 0.52%)</title><rect x="27.3707%" y="261" width="0.5172%" height="15" fill="rgb(227,7,12)" fg:x="635" fg:w="12"/><text x="27.6207%" y="271.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (10 samples, 0.43%)</title><rect x="27.4569%" y="245" width="0.4310%" height="15" fill="rgb(245,203,43)" fg:x="637" fg:w="10"/><text x="27.7069%" y="255.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (9 samples, 0.39%)</title><rect x="27.5000%" y="229" width="0.3879%" height="15" fill="rgb(238,205,33)" fg:x="638" fg:w="9"/><text x="27.7500%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (7 samples, 0.30%)</title><rect x="27.5862%" y="213" width="0.3017%" height="15" fill="rgb(231,56,7)" fg:x="640" fg:w="7"/><text x="27.8362%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (7 samples, 0.30%)</title><rect x="27.5862%" y="197" width="0.3017%" height="15" fill="rgb(244,186,29)" fg:x="640" fg:w="7"/><text x="27.8362%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (6 samples, 0.26%)</title><rect x="27.6293%" y="181" width="0.2586%" height="15" fill="rgb(234,111,31)" fg:x="641" fg:w="6"/><text x="27.8793%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (6 samples, 0.26%)</title><rect x="27.6293%" y="165" width="0.2586%" height="15" fill="rgb(241,149,10)" fg:x="641" fg:w="6"/><text x="27.8793%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (6 samples, 0.26%)</title><rect x="27.6293%" y="149" width="0.2586%" height="15" fill="rgb(249,206,44)" fg:x="641" fg:w="6"/><text x="27.8793%" y="159.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (2 samples, 0.09%)</title><rect x="27.8017%" y="133" width="0.0862%" height="15" fill="rgb(251,153,30)" fg:x="645" fg:w="2"/><text x="28.0517%" y="143.50"></text></g><g><title>jsode::parser::JsonCursor::rollup_indexes (3 samples, 0.13%)</title><rect x="27.8879%" y="261" width="0.1293%" height="15" fill="rgb(239,152,38)" fg:x="647" fg:w="3"/><text x="28.1379%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 0.09%)</title><rect x="27.9310%" y="245" width="0.0862%" height="15" fill="rgb(249,139,47)" fg:x="648" fg:w="2"/><text x="28.1810%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.09%)</title><rect x="27.9310%" y="229" width="0.0862%" height="15" fill="rgb(244,64,35)" fg:x="648" fg:w="2"/><text x="28.1810%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.04%)</title><rect x="27.9741%" y="213" width="0.0431%" height="15" fill="rgb(216,46,15)" fg:x="649" fg:w="1"/><text x="28.2241%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="27.9741%" y="197" width="0.0431%" height="15" fill="rgb(250,74,19)" fg:x="649" fg:w="1"/><text x="28.2241%" y="207.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="27.9741%" y="181" width="0.0431%" height="15" fill="rgb(249,42,33)" fg:x="649" fg:w="1"/><text x="28.2241%" y="191.50"></text></g><g><title>jsode::parser::JsonCursor::parse_array_item (17 samples, 0.73%)</title><rect x="27.3276%" y="277" width="0.7328%" height="15" fill="rgb(242,149,17)" fg:x="634" fg:w="17"/><text x="27.5776%" y="287.50"></text></g><g><title>jsode::parser::JsonParser::next_token_skip (1 samples, 0.04%)</title><rect x="28.0172%" y="261" width="0.0431%" height="15" fill="rgb(244,29,21)" fg:x="650" fg:w="1"/><text x="28.2672%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="28.0172%" y="245" width="0.0431%" height="15" fill="rgb(220,130,37)" fg:x="650" fg:w="1"/><text x="28.2672%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (17 samples, 0.73%)</title><rect x="29.2241%" y="261" width="0.7328%" height="15" fill="rgb(211,67,2)" fg:x="678" fg:w="17"/><text x="29.4741%" y="271.50"></text></g><g><title>[libc.so.6] (16 samples, 0.69%)</title><rect x="29.2672%" y="245" width="0.6897%" height="15" fill="rgb(235,68,52)" fg:x="679" fg:w="16"/><text x="29.5172%" y="255.50"></text></g><g><title>[libc.so.6] (40 samples, 1.72%)</title><rect x="29.9569%" y="261" width="1.7241%" height="15" fill="rgb(246,142,3)" fg:x="695" fg:w="40"/><text x="30.2069%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.04%)</title><rect x="31.7672%" y="213" width="0.0431%" height="15" fill="rgb(241,25,7)" fg:x="737" fg:w="1"/><text x="32.0172%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="31.7672%" y="197" width="0.0431%" height="15" fill="rgb(242,119,39)" fg:x="737" fg:w="1"/><text x="32.0172%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="31.7241%" y="229" width="0.1293%" height="15" fill="rgb(241,98,45)" fg:x="736" fg:w="3"/><text x="31.9741%" y="239.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (1 samples, 0.04%)</title><rect x="31.8103%" y="213" width="0.0431%" height="15" fill="rgb(254,28,30)" fg:x="738" fg:w="1"/><text x="32.0603%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::cast (1 samples, 0.04%)</title><rect x="31.8103%" y="197" width="0.0431%" height="15" fill="rgb(241,142,54)" fg:x="738" fg:w="1"/><text x="32.0603%" y="207.50"></text></g><g><title>cfree (15 samples, 0.65%)</title><rect x="31.9828%" y="165" width="0.6466%" height="15" fill="rgb(222,85,15)" fg:x="742" fg:w="15"/><text x="32.2328%" y="175.50"></text></g><g><title>[libc.so.6] (8 samples, 0.34%)</title><rect x="32.2845%" y="149" width="0.3448%" height="15" fill="rgb(210,85,47)" fg:x="749" fg:w="8"/><text x="32.5345%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (20 samples, 0.86%)</title><rect x="31.8966%" y="197" width="0.8621%" height="15" fill="rgb(224,206,25)" fg:x="740" fg:w="20"/><text x="32.1466%" y="207.50"></text></g><g><title>alloc::alloc::dealloc (18 samples, 0.78%)</title><rect x="31.9828%" y="181" width="0.7759%" height="15" fill="rgb(243,201,19)" fg:x="742" fg:w="18"/><text x="32.2328%" y="191.50"></text></g><g><title>core::alloc::layout::Layout::align (3 samples, 0.13%)</title><rect x="32.6293%" y="165" width="0.1293%" height="15" fill="rgb(236,59,4)" fg:x="757" fg:w="3"/><text x="32.8793%" y="175.50"></text></g><g><title>core::ptr::alignment::Alignment::as_usize (2 samples, 0.09%)</title><rect x="32.6724%" y="149" width="0.0862%" height="15" fill="rgb(254,179,45)" fg:x="758" fg:w="2"/><text x="32.9224%" y="159.50"></text></g><g><title>core::alloc::layout::Layout::from_size_align_unchecked (2 samples, 0.09%)</title><rect x="32.9310%" y="181" width="0.0862%" height="15" fill="rgb(226,14,10)" fg:x="764" fg:w="2"/><text x="33.1810%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;jsode::core::JsonType&gt; (32 samples, 1.38%)</title><rect x="31.6810%" y="261" width="1.3793%" height="15" fill="rgb(244,27,41)" fg:x="735" fg:w="32"/><text x="31.9310%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;jsode::core::StrType&gt;&gt; (31 samples, 1.34%)</title><rect x="31.7241%" y="245" width="1.3362%" height="15" fill="rgb(235,35,32)" fg:x="736" fg:w="31"/><text x="31.9741%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;jsode::core::StrType&gt;&gt; (28 samples, 1.21%)</title><rect x="31.8534%" y="229" width="1.2069%" height="15" fill="rgb(218,68,31)" fg:x="739" fg:w="28"/><text x="32.1034%" y="239.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 1.21%)</title><rect x="31.8534%" y="213" width="1.2069%" height="15" fill="rgb(207,120,37)" fg:x="739" fg:w="28"/><text x="32.1034%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (7 samples, 0.30%)</title><rect x="32.7586%" y="197" width="0.3017%" height="15" fill="rgb(227,98,0)" fg:x="760" fg:w="7"/><text x="33.0086%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_mul (1 samples, 0.04%)</title><rect x="33.0172%" y="181" width="0.0431%" height="15" fill="rgb(207,7,3)" fg:x="766" fg:w="1"/><text x="33.2672%" y="191.50"></text></g><g><title>jsode::core::Span::collapse (1 samples, 0.04%)</title><rect x="33.0603%" y="261" width="0.0431%" height="15" fill="rgb(206,98,19)" fg:x="767" fg:w="1"/><text x="33.3103%" y="271.50"></text></g><g><title>jsode::parser::JsonCursor::create_object_block (1 samples, 0.04%)</title><rect x="33.1034%" y="261" width="0.0431%" height="15" fill="rgb(217,5,26)" fg:x="768" fg:w="1"/><text x="33.3534%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="33.1034%" y="245" width="0.0431%" height="15" fill="rgb(235,190,38)" fg:x="768" fg:w="1"/><text x="33.3534%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="33.1466%" y="245" width="0.0431%" height="15" fill="rgb(247,86,24)" fg:x="769" fg:w="1"/><text x="33.3966%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::back_mut (1 samples, 0.04%)</title><rect x="33.1897%" y="245" width="0.0431%" height="15" fill="rgb(205,101,16)" fg:x="770" fg:w="1"/><text x="33.4397%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (1 samples, 0.04%)</title><rect x="33.1897%" y="229" width="0.0431%" height="15" fill="rgb(246,168,33)" fg:x="770" fg:w="1"/><text x="33.4397%" y="239.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (1 samples, 0.04%)</title><rect x="33.1897%" y="213" width="0.0431%" height="15" fill="rgb(231,114,1)" fg:x="770" fg:w="1"/><text x="33.4397%" y="223.50"></text></g><g><title>jsode::common::hash_str (1 samples, 0.04%)</title><rect x="33.2328%" y="245" width="0.0431%" height="15" fill="rgb(207,184,53)" fg:x="771" fg:w="1"/><text x="33.4828%" y="255.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="33.2328%" y="229" width="0.0431%" height="15" fill="rgb(224,95,51)" fg:x="771" fg:w="1"/><text x="33.4828%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="33.2328%" y="213" width="0.0431%" height="15" fill="rgb(212,188,45)" fg:x="771" fg:w="1"/><text x="33.4828%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="33.2328%" y="197" width="0.0431%" height="15" fill="rgb(223,154,38)" fg:x="771" fg:w="1"/><text x="33.4828%" y="207.50"></text></g><g><title>jsode::parser::JsonCursor::update_prop_index (4 samples, 0.17%)</title><rect x="33.1466%" y="261" width="0.1724%" height="15" fill="rgb(251,22,52)" fg:x="769" fg:w="4"/><text x="33.3966%" y="271.50"></text></g><g><title>jsode::parser::JsonParser::take_slice (1 samples, 0.04%)</title><rect x="33.2759%" y="245" width="0.0431%" height="15" fill="rgb(229,209,22)" fg:x="772" fg:w="1"/><text x="33.5259%" y="255.50"></text></g><g><title>jsode::lexer::Tokenizer::take_slice (1 samples, 0.04%)</title><rect x="33.2759%" y="229" width="0.0431%" height="15" fill="rgb(234,138,34)" fg:x="772" fg:w="1"/><text x="33.5259%" y="239.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.04%)</title><rect x="33.2759%" y="213" width="0.0431%" height="15" fill="rgb(212,95,11)" fg:x="772" fg:w="1"/><text x="33.5259%" y="223.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.04%)</title><rect x="33.2759%" y="197" width="0.0431%" height="15" fill="rgb(240,179,47)" fg:x="772" fg:w="1"/><text x="33.5259%" y="207.50"></text></g><g><title>jsode::parser::JsonParser::next_token (9 samples, 0.39%)</title><rect x="33.3190%" y="261" width="0.3879%" height="15" fill="rgb(240,163,11)" fg:x="773" fg:w="9"/><text x="33.5690%" y="271.50"></text></g><g><title>[libc.so.6] (8 samples, 0.34%)</title><rect x="33.3621%" y="245" width="0.3448%" height="15" fill="rgb(236,37,12)" fg:x="774" fg:w="8"/><text x="33.6121%" y="255.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (164 samples, 7.07%)</title><rect x="28.0603%" y="277" width="7.0690%" height="15" fill="rgb(232,164,16)" fg:x="651" fg:w="164"/><text x="28.3103%" y="287.50">jsode::pa..</text></g><g><title>jsode::parser::JsonParser::next_token_skip (33 samples, 1.42%)</title><rect x="33.7069%" y="261" width="1.4224%" height="15" fill="rgb(244,205,15)" fg:x="782" fg:w="33"/><text x="33.9569%" y="271.50"></text></g><g><title>[libc.so.6] (24 samples, 1.03%)</title><rect x="34.0948%" y="245" width="1.0345%" height="15" fill="rgb(223,117,47)" fg:x="791" fg:w="24"/><text x="34.3448%" y="255.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.30%)</title><rect x="35.3017%" y="261" width="0.3017%" height="15" fill="rgb(244,107,35)" fg:x="819" fg:w="7"/><text x="35.5517%" y="271.50"></text></g><g><title>[libc.so.6] (7 samples, 0.30%)</title><rect x="35.3017%" y="245" width="0.3017%" height="15" fill="rgb(205,140,8)" fg:x="819" fg:w="7"/><text x="35.5517%" y="255.50"></text></g><g><title>std::panic::catch_unwind (338 samples, 14.57%)</title><rect x="21.2931%" y="421" width="14.5690%" height="15" fill="rgb(228,84,46)" fg:x="494" fg:w="338"/><text x="21.5431%" y="431.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (338 samples, 14.57%)</title><rect x="21.2931%" y="405" width="14.5690%" height="15" fill="rgb(254,188,9)" fg:x="494" fg:w="338"/><text x="21.5431%" y="415.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (338 samples, 14.57%)</title><rect x="21.2931%" y="389" width="14.5690%" height="15" fill="rgb(206,112,54)" fg:x="494" fg:w="338"/><text x="21.5431%" y="399.50">std::panicking::try::d..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (338 samples, 14.57%)</title><rect x="21.2931%" y="373" width="14.5690%" height="15" fill="rgb(216,84,49)" fg:x="494" fg:w="338"/><text x="21.5431%" y="383.50">core::ops::function::i..</text></g><g><title>std::rt::lang_start::_{{closure}} (338 samples, 14.57%)</title><rect x="21.2931%" y="357" width="14.5690%" height="15" fill="rgb(214,194,35)" fg:x="494" fg:w="338"/><text x="21.5431%" y="367.50">std::rt::lang_start::_..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (338 samples, 14.57%)</title><rect x="21.2931%" y="341" width="14.5690%" height="15" fill="rgb(249,28,3)" fg:x="494" fg:w="338"/><text x="21.5431%" y="351.50">std::sys_common::backt..</text></g><g><title>core::ops::function::FnOnce::call_once (338 samples, 14.57%)</title><rect x="21.2931%" y="325" width="14.5690%" height="15" fill="rgb(222,56,52)" fg:x="494" fg:w="338"/><text x="21.5431%" y="335.50">core::ops::function::F..</text></g><g><title>jsode::main (338 samples, 14.57%)</title><rect x="21.2931%" y="309" width="14.5690%" height="15" fill="rgb(245,217,50)" fg:x="494" fg:w="338"/><text x="21.5431%" y="319.50">jsode::main</text></g><g><title>jsode::parser::JsonParser::parse (334 samples, 14.40%)</title><rect x="21.4655%" y="293" width="14.3966%" height="15" fill="rgb(213,201,24)" fg:x="498" fg:w="334"/><text x="21.7155%" y="303.50">jsode::parser::JsonPar..</text></g><g><title>jsode::parser::JsonParser::next_token (17 samples, 0.73%)</title><rect x="35.1293%" y="277" width="0.7328%" height="15" fill="rgb(248,116,28)" fg:x="815" fg:w="17"/><text x="35.3793%" y="287.50"></text></g><g><title>[libc.so.6] (6 samples, 0.26%)</title><rect x="35.6034%" y="261" width="0.2586%" height="15" fill="rgb(219,72,43)" fg:x="826" fg:w="6"/><text x="35.8534%" y="271.50"></text></g><g><title>_start (339 samples, 14.61%)</title><rect x="21.2931%" y="581" width="14.6121%" height="15" fill="rgb(209,138,14)" fg:x="494" fg:w="339"/><text x="21.5431%" y="591.50">_start</text></g><g><title>__libc_start_main (339 samples, 14.61%)</title><rect x="21.2931%" y="565" width="14.6121%" height="15" fill="rgb(222,18,33)" fg:x="494" fg:w="339"/><text x="21.5431%" y="575.50">__libc_start_main</text></g><g><title>[libc.so.6] (339 samples, 14.61%)</title><rect x="21.2931%" y="549" width="14.6121%" height="15" fill="rgb(213,199,7)" fg:x="494" fg:w="339"/><text x="21.5431%" y="559.50">[libc.so.6]</text></g><g><title>main (339 samples, 14.61%)</title><rect x="21.2931%" y="533" width="14.6121%" height="15" fill="rgb(250,110,10)" fg:x="494" fg:w="339"/><text x="21.5431%" y="543.50">main</text></g><g><title>std::rt::lang_start (339 samples, 14.61%)</title><rect x="21.2931%" y="517" width="14.6121%" height="15" fill="rgb(248,123,6)" fg:x="494" fg:w="339"/><text x="21.5431%" y="527.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (339 samples, 14.61%)</title><rect x="21.2931%" y="501" width="14.6121%" height="15" fill="rgb(206,91,31)" fg:x="494" fg:w="339"/><text x="21.5431%" y="511.50">std::rt::lang_start_in..</text></g><g><title>std::panic::catch_unwind (339 samples, 14.61%)</title><rect x="21.2931%" y="485" width="14.6121%" height="15" fill="rgb(211,154,13)" fg:x="494" fg:w="339"/><text x="21.5431%" y="495.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (339 samples, 14.61%)</title><rect x="21.2931%" y="469" width="14.6121%" height="15" fill="rgb(225,148,7)" fg:x="494" fg:w="339"/><text x="21.5431%" y="479.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (339 samples, 14.61%)</title><rect x="21.2931%" y="453" width="14.6121%" height="15" fill="rgb(220,160,43)" fg:x="494" fg:w="339"/><text x="21.5431%" y="463.50">std::panicking::try::d..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (339 samples, 14.61%)</title><rect x="21.2931%" y="437" width="14.6121%" height="15" fill="rgb(213,52,39)" fg:x="494" fg:w="339"/><text x="21.5431%" y="447.50">std::rt::lang_start_in..</text></g><g><title>std::rt::init (1 samples, 0.04%)</title><rect x="35.8621%" y="421" width="0.0431%" height="15" fill="rgb(243,137,7)" fg:x="832" fg:w="1"/><text x="36.1121%" y="431.50"></text></g><g><title>std::sys::pal::unix::thread::guard::init (1 samples, 0.04%)</title><rect x="35.8621%" y="405" width="0.0431%" height="15" fill="rgb(230,79,13)" fg:x="832" fg:w="1"/><text x="36.1121%" y="415.50"></text></g><g><title>std::sys::pal::unix::thread::guard::get_stack_start_aligned (1 samples, 0.04%)</title><rect x="35.8621%" y="389" width="0.0431%" height="15" fill="rgb(247,105,23)" fg:x="832" fg:w="1"/><text x="36.1121%" y="399.50"></text></g><g><title>std::sys::pal::unix::thread::guard::get_stack_start (1 samples, 0.04%)</title><rect x="35.8621%" y="373" width="0.0431%" height="15" fill="rgb(223,179,41)" fg:x="832" fg:w="1"/><text x="36.1121%" y="383.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.04%)</title><rect x="35.8621%" y="357" width="0.0431%" height="15" fill="rgb(218,9,34)" fg:x="832" fg:w="1"/><text x="36.1121%" y="367.50"></text></g><g><title>__getdelim (1 samples, 0.04%)</title><rect x="35.8621%" y="341" width="0.0431%" height="15" fill="rgb(222,106,8)" fg:x="832" fg:w="1"/><text x="36.1121%" y="351.50"></text></g><g><title>_IO_file_underflow (1 samples, 0.04%)</title><rect x="35.8621%" y="325" width="0.0431%" height="15" fill="rgb(211,220,0)" fg:x="832" fg:w="1"/><text x="36.1121%" y="335.50"></text></g><g><title>_IO_doallocbuf (1 samples, 0.04%)</title><rect x="35.8621%" y="309" width="0.0431%" height="15" fill="rgb(229,52,16)" fg:x="832" fg:w="1"/><text x="36.1121%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="35.9052%" y="581" width="0.0431%" height="15" fill="rgb(212,155,18)" fg:x="833" fg:w="1"/><text x="36.1552%" y="591.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="35.9483%" y="581" width="0.0431%" height="15" fill="rgb(242,21,14)" fg:x="834" fg:w="1"/><text x="36.1983%" y="591.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (3 samples, 0.13%)</title><rect x="35.9914%" y="581" width="0.1293%" height="15" fill="rgb(222,19,48)" fg:x="835" fg:w="3"/><text x="36.2414%" y="591.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.04%)</title><rect x="36.1207%" y="581" width="0.0431%" height="15" fill="rgb(232,45,27)" fg:x="838" fg:w="1"/><text x="36.3707%" y="591.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="36.1638%" y="581" width="0.0431%" height="15" fill="rgb(249,103,42)" fg:x="839" fg:w="1"/><text x="36.4138%" y="591.50"></text></g><g><title>jsode::common::hash_str (3 samples, 0.13%)</title><rect x="36.2069%" y="501" width="0.1293%" height="15" fill="rgb(246,81,33)" fg:x="840" fg:w="3"/><text x="36.4569%" y="511.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.13%)</title><rect x="36.2069%" y="485" width="0.1293%" height="15" fill="rgb(252,33,42)" fg:x="840" fg:w="3"/><text x="36.4569%" y="495.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.13%)</title><rect x="36.2069%" y="469" width="0.1293%" height="15" fill="rgb(209,212,41)" fg:x="840" fg:w="3"/><text x="36.4569%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.13%)</title><rect x="36.2069%" y="453" width="0.1293%" height="15" fill="rgb(207,154,6)" fg:x="840" fg:w="3"/><text x="36.4569%" y="463.50"></text></g><g><title>jsode::parser::JsonCursor::create_prop_block (16 samples, 0.69%)</title><rect x="36.2069%" y="517" width="0.6897%" height="15" fill="rgb(223,64,47)" fg:x="840" fg:w="16"/><text x="36.4569%" y="527.50"></text></g><g><title>jsode::parser::JsonParser::take_slice (13 samples, 0.56%)</title><rect x="36.3362%" y="501" width="0.5603%" height="15" fill="rgb(211,161,38)" fg:x="843" fg:w="13"/><text x="36.5862%" y="511.50"></text></g><g><title>jsode::lexer::Tokenizer::take_slice (13 samples, 0.56%)</title><rect x="36.3362%" y="485" width="0.5603%" height="15" fill="rgb(219,138,40)" fg:x="843" fg:w="13"/><text x="36.5862%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (13 samples, 0.56%)</title><rect x="36.3362%" y="469" width="0.5603%" height="15" fill="rgb(241,228,46)" fg:x="843" fg:w="13"/><text x="36.5862%" y="479.50"></text></g><g><title>core::str::validations::run_utf8_validation (10 samples, 0.43%)</title><rect x="36.4655%" y="453" width="0.4310%" height="15" fill="rgb(223,209,38)" fg:x="846" fg:w="10"/><text x="36.7155%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (19 samples, 0.82%)</title><rect x="36.2069%" y="581" width="0.8190%" height="15" fill="rgb(236,164,45)" fg:x="840" fg:w="19"/><text x="36.4569%" y="591.50"></text></g><g><title>jsode::main (19 samples, 0.82%)</title><rect x="36.2069%" y="565" width="0.8190%" height="15" fill="rgb(231,15,5)" fg:x="840" fg:w="19"/><text x="36.4569%" y="575.50"></text></g><g><title>jsode::parser::JsonParser::parse (19 samples, 0.82%)</title><rect x="36.2069%" y="549" width="0.8190%" height="15" fill="rgb(252,35,15)" fg:x="840" fg:w="19"/><text x="36.4569%" y="559.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (19 samples, 0.82%)</title><rect x="36.2069%" y="533" width="0.8190%" height="15" fill="rgb(248,181,18)" fg:x="840" fg:w="19"/><text x="36.4569%" y="543.50"></text></g><g><title>jsode::parser::JsonCursor::update_prop_index (3 samples, 0.13%)</title><rect x="36.8966%" y="517" width="0.1293%" height="15" fill="rgb(233,39,42)" fg:x="856" fg:w="3"/><text x="37.1466%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.13%)</title><rect x="36.8966%" y="501" width="0.1293%" height="15" fill="rgb(238,110,33)" fg:x="856" fg:w="3"/><text x="37.1466%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.13%)</title><rect x="36.8966%" y="485" width="0.1293%" height="15" fill="rgb(233,195,10)" fg:x="856" fg:w="3"/><text x="37.1466%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.13%)</title><rect x="36.8966%" y="469" width="0.1293%" height="15" fill="rgb(254,105,3)" fg:x="856" fg:w="3"/><text x="37.1466%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.13%)</title><rect x="36.8966%" y="453" width="0.1293%" height="15" fill="rgb(221,225,9)" fg:x="856" fg:w="3"/><text x="37.1466%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.13%)</title><rect x="36.8966%" y="437" width="0.1293%" height="15" fill="rgb(224,227,45)" fg:x="856" fg:w="3"/><text x="37.1466%" y="447.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.13%)</title><rect x="36.8966%" y="421" width="0.1293%" height="15" fill="rgb(229,198,43)" fg:x="856" fg:w="3"/><text x="37.1466%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.13%)</title><rect x="36.8966%" y="405" width="0.1293%" height="15" fill="rgb(206,209,35)" fg:x="856" fg:w="3"/><text x="37.1466%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.13%)</title><rect x="36.8966%" y="389" width="0.1293%" height="15" fill="rgb(245,195,53)" fg:x="856" fg:w="3"/><text x="37.1466%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="36.9828%" y="373" width="0.0431%" height="15" fill="rgb(240,92,26)" fg:x="858" fg:w="1"/><text x="37.2328%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;jsode::core::StrType&gt;&gt; (1 samples, 0.04%)</title><rect x="37.0259%" y="581" width="0.0431%" height="15" fill="rgb(207,40,23)" fg:x="859" fg:w="1"/><text x="37.2759%" y="591.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (2 samples, 0.09%)</title><rect x="37.0690%" y="581" width="0.0862%" height="15" fill="rgb(223,111,35)" fg:x="860" fg:w="2"/><text x="37.3190%" y="591.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.04%)</title><rect x="37.1552%" y="581" width="0.0431%" height="15" fill="rgb(229,147,28)" fg:x="862" fg:w="1"/><text x="37.4052%" y="591.50"></text></g><g><title>jsode::lexer::Tokenizer::next_item (1 samples, 0.04%)</title><rect x="37.1983%" y="581" width="0.0431%" height="15" fill="rgb(211,29,28)" fg:x="863" fg:w="1"/><text x="37.4483%" y="591.50"></text></g><g><title>jsode::parser::JsonCursor::create_array_block (1 samples, 0.04%)</title><rect x="37.2414%" y="533" width="0.0431%" height="15" fill="rgb(228,72,33)" fg:x="864" fg:w="1"/><text x="37.4914%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.04%)</title><rect x="37.2414%" y="517" width="0.0431%" height="15" fill="rgb(205,214,31)" fg:x="864" fg:w="1"/><text x="37.4914%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="37.2414%" y="501" width="0.0431%" height="15" fill="rgb(224,111,15)" fg:x="864" fg:w="1"/><text x="37.4914%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="37.2414%" y="485" width="0.0431%" height="15" fill="rgb(253,21,26)" fg:x="864" fg:w="1"/><text x="37.4914%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="37.2414%" y="469" width="0.0431%" height="15" fill="rgb(245,139,43)" fg:x="864" fg:w="1"/><text x="37.4914%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="37.2414%" y="453" width="0.0431%" height="15" fill="rgb(252,170,7)" fg:x="864" fg:w="1"/><text x="37.4914%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="37.2414%" y="437" width="0.0431%" height="15" fill="rgb(231,118,14)" fg:x="864" fg:w="1"/><text x="37.4914%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="37.2414%" y="421" width="0.0431%" height="15" fill="rgb(238,83,0)" fg:x="864" fg:w="1"/><text x="37.4914%" y="431.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="37.2414%" y="405" width="0.0431%" height="15" fill="rgb(221,39,39)" fg:x="864" fg:w="1"/><text x="37.4914%" y="415.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (1 samples, 0.04%)</title><rect x="37.2414%" y="389" width="0.0431%" height="15" fill="rgb(222,119,46)" fg:x="864" fg:w="1"/><text x="37.4914%" y="399.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="37.2414%" y="373" width="0.0431%" height="15" fill="rgb(222,165,49)" fg:x="864" fg:w="1"/><text x="37.4914%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.04%)</title><rect x="37.2414%" y="357" width="0.0431%" height="15" fill="rgb(219,113,52)" fg:x="864" fg:w="1"/><text x="37.4914%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.04%)</title><rect x="37.2414%" y="341" width="0.0431%" height="15" fill="rgb(214,7,15)" fg:x="864" fg:w="1"/><text x="37.4914%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.04%)</title><rect x="37.2414%" y="325" width="0.0431%" height="15" fill="rgb(235,32,4)" fg:x="864" fg:w="1"/><text x="37.4914%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="37.4569%" y="405" width="0.0431%" height="15" fill="rgb(238,90,54)" fg:x="869" fg:w="1"/><text x="37.7069%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::ctrl (2 samples, 0.09%)</title><rect x="37.5000%" y="405" width="0.0862%" height="15" fill="rgb(213,208,19)" fg:x="870" fg:w="2"/><text x="37.7500%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (3 samples, 0.13%)</title><rect x="37.5862%" y="405" width="0.1293%" height="15" fill="rgb(233,156,4)" fg:x="872" fg:w="3"/><text x="37.8362%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="37.6724%" y="389" width="0.0431%" height="15" fill="rgb(207,194,5)" fg:x="874" fg:w="1"/><text x="37.9224%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.04%)</title><rect x="37.6724%" y="373" width="0.0431%" height="15" fill="rgb(206,111,30)" fg:x="874" fg:w="1"/><text x="37.9224%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::num_ctrl_bytes (1 samples, 0.04%)</title><rect x="37.7155%" y="405" width="0.0431%" height="15" fill="rgb(243,70,54)" fg:x="875" fg:w="1"/><text x="37.9655%" y="415.50"></text></g><g><title>jsode::parser::JsonCursor::create_object_block (15 samples, 0.65%)</title><rect x="37.2845%" y="533" width="0.6466%" height="15" fill="rgb(242,28,8)" fg:x="865" fg:w="15"/><text x="37.5345%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (15 samples, 0.65%)</title><rect x="37.2845%" y="517" width="0.6466%" height="15" fill="rgb(219,106,18)" fg:x="865" fg:w="15"/><text x="37.5345%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (15 samples, 0.65%)</title><rect x="37.2845%" y="501" width="0.6466%" height="15" fill="rgb(244,222,10)" fg:x="865" fg:w="15"/><text x="37.5345%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (15 samples, 0.65%)</title><rect x="37.2845%" y="485" width="0.6466%" height="15" fill="rgb(236,179,52)" fg:x="865" fg:w="15"/><text x="37.5345%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (15 samples, 0.65%)</title><rect x="37.2845%" y="469" width="0.6466%" height="15" fill="rgb(213,23,39)" fg:x="865" fg:w="15"/><text x="37.5345%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (15 samples, 0.65%)</title><rect x="37.2845%" y="453" width="0.6466%" height="15" fill="rgb(238,48,10)" fg:x="865" fg:w="15"/><text x="37.5345%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (15 samples, 0.65%)</title><rect x="37.2845%" y="437" width="0.6466%" height="15" fill="rgb(251,196,23)" fg:x="865" fg:w="15"/><text x="37.5345%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (15 samples, 0.65%)</title><rect x="37.2845%" y="421" width="0.6466%" height="15" fill="rgb(250,152,24)" fg:x="865" fg:w="15"/><text x="37.5345%" y="431.50"></text></g><g><title>hashbrown::raw::capacity_to_buckets (4 samples, 0.17%)</title><rect x="37.7586%" y="405" width="0.1724%" height="15" fill="rgb(209,150,17)" fg:x="876" fg:w="4"/><text x="38.0086%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::next_power_of_two (1 samples, 0.04%)</title><rect x="37.8879%" y="389" width="0.0431%" height="15" fill="rgb(234,202,34)" fg:x="879" fg:w="1"/><text x="38.1379%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.30%)</title><rect x="37.9310%" y="453" width="0.3017%" height="15" fill="rgb(253,148,53)" fg:x="880" fg:w="7"/><text x="38.1810%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="38.1466%" y="437" width="0.0862%" height="15" fill="rgb(218,129,16)" fg:x="885" fg:w="2"/><text x="38.3966%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (44 samples, 1.90%)</title><rect x="37.9310%" y="501" width="1.8966%" height="15" fill="rgb(216,85,19)" fg:x="880" fg:w="44"/><text x="38.1810%" y="511.50">&lt;..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (44 samples, 1.90%)</title><rect x="37.9310%" y="485" width="1.8966%" height="15" fill="rgb(235,228,7)" fg:x="880" fg:w="44"/><text x="38.1810%" y="495.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (44 samples, 1.90%)</title><rect x="37.9310%" y="469" width="1.8966%" height="15" fill="rgb(245,175,0)" fg:x="880" fg:w="44"/><text x="38.1810%" y="479.50">&lt;..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (37 samples, 1.59%)</title><rect x="38.2328%" y="453" width="1.5948%" height="15" fill="rgb(208,168,36)" fg:x="887" fg:w="37"/><text x="38.4828%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.47%)</title><rect x="39.3534%" y="437" width="0.4741%" height="15" fill="rgb(246,171,24)" fg:x="913" fg:w="11"/><text x="39.6034%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.39%)</title><rect x="39.9138%" y="453" width="0.3879%" height="15" fill="rgb(215,142,24)" fg:x="926" fg:w="9"/><text x="40.1638%" y="463.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="40.2155%" y="437" width="0.0862%" height="15" fill="rgb(250,187,7)" fg:x="933" fg:w="2"/><text x="40.4655%" y="447.50"></text></g><g><title>core::hash::sip::u8to64_le (5 samples, 0.22%)</title><rect x="40.3017%" y="453" width="0.2155%" height="15" fill="rgb(228,66,33)" fg:x="935" fg:w="5"/><text x="40.5517%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="40.4741%" y="437" width="0.0431%" height="15" fill="rgb(234,215,21)" fg:x="939" fg:w="1"/><text x="40.7241%" y="447.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (6 samples, 0.26%)</title><rect x="40.5172%" y="421" width="0.2586%" height="15" fill="rgb(222,191,20)" fg:x="940" fg:w="6"/><text x="40.7672%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (5 samples, 0.22%)</title><rect x="40.5603%" y="405" width="0.2155%" height="15" fill="rgb(245,79,54)" fg:x="941" fg:w="5"/><text x="40.8103%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (4 samples, 0.17%)</title><rect x="40.6034%" y="389" width="0.1724%" height="15" fill="rgb(240,10,37)" fg:x="942" fg:w="4"/><text x="40.8534%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (4 samples, 0.17%)</title><rect x="40.6034%" y="373" width="0.1724%" height="15" fill="rgb(214,192,32)" fg:x="942" fg:w="4"/><text x="40.8534%" y="383.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 1.12%)</title><rect x="39.8276%" y="501" width="1.1207%" height="15" fill="rgb(209,36,54)" fg:x="924" fg:w="26"/><text x="40.0776%" y="511.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (26 samples, 1.12%)</title><rect x="39.8276%" y="485" width="1.1207%" height="15" fill="rgb(220,10,11)" fg:x="924" fg:w="26"/><text x="40.0776%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (26 samples, 1.12%)</title><rect x="39.8276%" y="469" width="1.1207%" height="15" fill="rgb(221,106,17)" fg:x="924" fg:w="26"/><text x="40.0776%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.43%)</title><rect x="40.5172%" y="453" width="0.4310%" height="15" fill="rgb(251,142,44)" fg:x="940" fg:w="10"/><text x="40.7672%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (10 samples, 0.43%)</title><rect x="40.5172%" y="437" width="0.4310%" height="15" fill="rgb(238,13,15)" fg:x="940" fg:w="10"/><text x="40.7672%" y="447.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (4 samples, 0.17%)</title><rect x="40.7759%" y="421" width="0.1724%" height="15" fill="rgb(208,107,27)" fg:x="946" fg:w="4"/><text x="41.0259%" y="431.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (2 samples, 0.09%)</title><rect x="40.8621%" y="405" width="0.0862%" height="15" fill="rgb(205,136,37)" fg:x="948" fg:w="2"/><text x="41.1121%" y="415.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="40.9914%" y="485" width="0.2155%" height="15" fill="rgb(250,205,27)" fg:x="951" fg:w="5"/><text x="41.2414%" y="495.50"></text></g><g><title>[libc.so.6] (3 samples, 0.13%)</title><rect x="41.2069%" y="469" width="0.1293%" height="15" fill="rgb(210,80,43)" fg:x="956" fg:w="3"/><text x="41.4569%" y="479.50"></text></g><g><title>jsode::common::hash_str (92 samples, 3.97%)</title><rect x="37.9310%" y="517" width="3.9655%" height="15" fill="rgb(247,160,36)" fg:x="880" fg:w="92"/><text x="38.1810%" y="527.50">jsod..</text></g><g><title>std::hash::random::DefaultHasher::new (22 samples, 0.95%)</title><rect x="40.9483%" y="501" width="0.9483%" height="15" fill="rgb(234,13,49)" fg:x="950" fg:w="22"/><text x="41.1983%" y="511.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (16 samples, 0.69%)</title><rect x="41.2069%" y="485" width="0.6897%" height="15" fill="rgb(234,122,0)" fg:x="956" fg:w="16"/><text x="41.4569%" y="495.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (13 samples, 0.56%)</title><rect x="41.3362%" y="469" width="0.5603%" height="15" fill="rgb(207,146,38)" fg:x="959" fg:w="13"/><text x="41.5862%" y="479.50"></text></g><g><title>[libc.so.6] (6 samples, 0.26%)</title><rect x="41.6379%" y="453" width="0.2586%" height="15" fill="rgb(207,177,25)" fg:x="966" fg:w="6"/><text x="41.8879%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.09%)</title><rect x="41.8966%" y="485" width="0.0862%" height="15" fill="rgb(211,178,42)" fg:x="972" fg:w="2"/><text x="42.1466%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (8 samples, 0.34%)</title><rect x="42.2414%" y="421" width="0.3448%" height="15" fill="rgb(230,69,54)" fg:x="980" fg:w="8"/><text x="42.4914%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (8 samples, 0.34%)</title><rect x="42.2414%" y="405" width="0.3448%" height="15" fill="rgb(214,135,41)" fg:x="980" fg:w="8"/><text x="42.4914%" y="415.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (12 samples, 0.52%)</title><rect x="42.1121%" y="453" width="0.5172%" height="15" fill="rgb(237,67,25)" fg:x="977" fg:w="12"/><text x="42.3621%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (9 samples, 0.39%)</title><rect x="42.2414%" y="437" width="0.3879%" height="15" fill="rgb(222,189,50)" fg:x="980" fg:w="9"/><text x="42.4914%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to::runtime_impl (1 samples, 0.04%)</title><rect x="42.5862%" y="421" width="0.0431%" height="15" fill="rgb(245,148,34)" fg:x="988" fg:w="1"/><text x="42.8362%" y="431.50"></text></g><g><title>jsode::parser::JsonParser::take_slice (20 samples, 0.86%)</title><rect x="41.8966%" y="517" width="0.8621%" height="15" fill="rgb(222,29,6)" fg:x="972" fg:w="20"/><text x="42.1466%" y="527.50"></text></g><g><title>jsode::lexer::Tokenizer::take_slice (20 samples, 0.86%)</title><rect x="41.8966%" y="501" width="0.8621%" height="15" fill="rgb(221,189,43)" fg:x="972" fg:w="20"/><text x="42.1466%" y="511.50"></text></g><g><title>core::slice::raw::from_raw_parts (18 samples, 0.78%)</title><rect x="41.9828%" y="485" width="0.7759%" height="15" fill="rgb(207,36,27)" fg:x="974" fg:w="18"/><text x="42.2328%" y="495.50"></text></g><g><title>core::slice::raw::from_raw_parts::precondition_check (16 samples, 0.69%)</title><rect x="42.0690%" y="469" width="0.6897%" height="15" fill="rgb(217,90,24)" fg:x="976" fg:w="16"/><text x="42.3190%" y="479.50"></text></g><g><title>core::intrinsics::is_valid_allocation_size (3 samples, 0.13%)</title><rect x="42.6293%" y="453" width="0.1293%" height="15" fill="rgb(224,66,35)" fg:x="989" fg:w="3"/><text x="42.8793%" y="463.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (14 samples, 0.60%)</title><rect x="43.1034%" y="453" width="0.6034%" height="15" fill="rgb(221,13,50)" fg:x="1000" fg:w="14"/><text x="43.3534%" y="463.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (14 samples, 0.60%)</title><rect x="43.1034%" y="437" width="0.6034%" height="15" fill="rgb(236,68,49)" fg:x="1000" fg:w="14"/><text x="43.3534%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (14 samples, 0.60%)</title><rect x="43.1034%" y="421" width="0.6034%" height="15" fill="rgb(229,146,28)" fg:x="1000" fg:w="14"/><text x="43.3534%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (10 samples, 0.43%)</title><rect x="43.2759%" y="405" width="0.4310%" height="15" fill="rgb(225,31,38)" fg:x="1004" fg:w="10"/><text x="43.5259%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="43.6207%" y="389" width="0.0862%" height="15" fill="rgb(250,208,3)" fg:x="1012" fg:w="2"/><text x="43.8707%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (15 samples, 0.65%)</title><rect x="43.1034%" y="485" width="0.6466%" height="15" fill="rgb(246,54,23)" fg:x="1000" fg:w="15"/><text x="43.3534%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (15 samples, 0.65%)</title><rect x="43.1034%" y="469" width="0.6466%" height="15" fill="rgb(243,76,11)" fg:x="1000" fg:w="15"/><text x="43.3534%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.04%)</title><rect x="43.7069%" y="453" width="0.0431%" height="15" fill="rgb(245,21,50)" fg:x="1014" fg:w="1"/><text x="43.9569%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.04%)</title><rect x="43.7069%" y="437" width="0.0431%" height="15" fill="rgb(228,9,43)" fg:x="1014" fg:w="1"/><text x="43.9569%" y="447.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.04%)</title><rect x="43.7069%" y="421" width="0.0431%" height="15" fill="rgb(208,100,47)" fg:x="1014" fg:w="1"/><text x="43.9569%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_mut (1 samples, 0.04%)</title><rect x="43.7500%" y="485" width="0.0431%" height="15" fill="rgb(232,26,8)" fg:x="1015" fg:w="1"/><text x="44.0000%" y="495.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="43.7500%" y="469" width="0.0431%" height="15" fill="rgb(216,166,38)" fg:x="1015" fg:w="1"/><text x="44.0000%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="43.7500%" y="453" width="0.0431%" height="15" fill="rgb(251,202,51)" fg:x="1015" fg:w="1"/><text x="44.0000%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="43.7500%" y="437" width="0.0431%" height="15" fill="rgb(254,216,34)" fg:x="1015" fg:w="1"/><text x="44.0000%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (6 samples, 0.26%)</title><rect x="43.7931%" y="485" width="0.2586%" height="15" fill="rgb(251,32,27)" fg:x="1016" fg:w="6"/><text x="44.0431%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="44.0086%" y="469" width="0.0431%" height="15" fill="rgb(208,127,28)" fg:x="1021" fg:w="1"/><text x="44.2586%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (2 samples, 0.09%)</title><rect x="44.1379%" y="453" width="0.0862%" height="15" fill="rgb(224,137,22)" fg:x="1024" fg:w="2"/><text x="44.3879%" y="463.50"></text></g><g><title>core::ptr::write (2 samples, 0.09%)</title><rect x="44.1379%" y="437" width="0.0862%" height="15" fill="rgb(254,70,32)" fg:x="1024" fg:w="2"/><text x="44.3879%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (3 samples, 0.13%)</title><rect x="44.1379%" y="469" width="0.1293%" height="15" fill="rgb(229,75,37)" fg:x="1024" fg:w="3"/><text x="44.3879%" y="479.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="44.2241%" y="453" width="0.0431%" height="15" fill="rgb(252,64,23)" fg:x="1026" fg:w="1"/><text x="44.4741%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="44.2241%" y="437" width="0.0431%" height="15" fill="rgb(232,162,48)" fg:x="1026" fg:w="1"/><text x="44.4741%" y="447.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="44.2241%" y="421" width="0.0431%" height="15" fill="rgb(246,160,12)" fg:x="1026" fg:w="1"/><text x="44.4741%" y="431.50"></text></g><g><title>jsode::parser::JsonCursor::create_prop_block (154 samples, 6.64%)</title><rect x="37.9310%" y="533" width="6.6379%" height="15" fill="rgb(247,166,0)" fg:x="880" fg:w="154"/><text x="38.1810%" y="543.50">jsode::pa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (42 samples, 1.81%)</title><rect x="42.7586%" y="517" width="1.8103%" height="15" fill="rgb(249,219,21)" fg:x="992" fg:w="42"/><text x="43.0086%" y="527.50">s..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 1.81%)</title><rect x="42.7586%" y="501" width="1.8103%" height="15" fill="rgb(205,209,3)" fg:x="992" fg:w="42"/><text x="43.0086%" y="511.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (12 samples, 0.52%)</title><rect x="44.0517%" y="485" width="0.5172%" height="15" fill="rgb(243,44,1)" fg:x="1022" fg:w="12"/><text x="44.3017%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (7 samples, 0.30%)</title><rect x="44.2672%" y="469" width="0.3017%" height="15" fill="rgb(206,159,16)" fg:x="1027" fg:w="7"/><text x="44.5172%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (6 samples, 0.26%)</title><rect x="44.3103%" y="453" width="0.2586%" height="15" fill="rgb(244,77,30)" fg:x="1028" fg:w="6"/><text x="44.5603%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (6 samples, 0.26%)</title><rect x="44.3103%" y="437" width="0.2586%" height="15" fill="rgb(218,69,12)" fg:x="1028" fg:w="6"/><text x="44.5603%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::ctrl (2 samples, 0.09%)</title><rect x="44.4828%" y="421" width="0.0862%" height="15" fill="rgb(212,87,7)" fg:x="1032" fg:w="2"/><text x="44.7328%" y="431.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="44.5259%" y="405" width="0.0431%" height="15" fill="rgb(245,114,25)" fg:x="1033" fg:w="1"/><text x="44.7759%" y="415.50"></text></g><g><title>jsode::parser::JsonCursor::rollup_indexes (3 samples, 0.13%)</title><rect x="44.5690%" y="533" width="0.1293%" height="15" fill="rgb(210,61,42)" fg:x="1034" fg:w="3"/><text x="44.8190%" y="543.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.04%)</title><rect x="44.6983%" y="357" width="0.0431%" height="15" fill="rgb(211,52,33)" fg:x="1037" fg:w="1"/><text x="44.9483%" y="367.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.09%)</title><rect x="44.6983%" y="485" width="0.0862%" height="15" fill="rgb(234,58,33)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.09%)</title><rect x="44.6983%" y="469" width="0.0862%" height="15" fill="rgb(220,115,36)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.09%)</title><rect x="44.6983%" y="453" width="0.0862%" height="15" fill="rgb(243,153,54)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="463.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.09%)</title><rect x="44.6983%" y="437" width="0.0862%" height="15" fill="rgb(251,47,18)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="447.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.09%)</title><rect x="44.6983%" y="421" width="0.0862%" height="15" fill="rgb(242,102,42)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="431.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="44.6983%" y="405" width="0.0862%" height="15" fill="rgb(234,31,38)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="415.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="44.6983%" y="389" width="0.0862%" height="15" fill="rgb(221,117,51)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="44.6983%" y="373" width="0.0862%" height="15" fill="rgb(212,20,18)" fg:x="1037" fg:w="2"/><text x="44.9483%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="44.7414%" y="357" width="0.0431%" height="15" fill="rgb(245,133,36)" fg:x="1038" fg:w="1"/><text x="44.9914%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.04%)</title><rect x="44.7414%" y="341" width="0.0431%" height="15" fill="rgb(212,6,19)" fg:x="1038" fg:w="1"/><text x="44.9914%" y="351.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="44.7414%" y="325" width="0.0431%" height="15" fill="rgb(218,1,36)" fg:x="1038" fg:w="1"/><text x="44.9914%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.04%)</title><rect x="44.7414%" y="309" width="0.0431%" height="15" fill="rgb(246,84,54)" fg:x="1038" fg:w="1"/><text x="44.9914%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.04%)</title><rect x="44.7414%" y="293" width="0.0431%" height="15" fill="rgb(242,110,6)" fg:x="1038" fg:w="1"/><text x="44.9914%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.04%)</title><rect x="44.7414%" y="277" width="0.0431%" height="15" fill="rgb(214,47,5)" fg:x="1038" fg:w="1"/><text x="44.9914%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="44.8276%" y="453" width="0.0431%" height="15" fill="rgb(218,159,25)" fg:x="1040" fg:w="1"/><text x="45.0776%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="44.8707%" y="453" width="0.0431%" height="15" fill="rgb(215,211,28)" fg:x="1041" fg:w="1"/><text x="45.1207%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="44.8707%" y="437" width="0.0431%" height="15" fill="rgb(238,59,32)" fg:x="1041" fg:w="1"/><text x="45.1207%" y="447.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="44.8707%" y="421" width="0.0431%" height="15" fill="rgb(226,82,3)" fg:x="1041" fg:w="1"/><text x="45.1207%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.09%)</title><rect x="44.9138%" y="453" width="0.0862%" height="15" fill="rgb(240,164,32)" fg:x="1042" fg:w="2"/><text x="45.1638%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="44.9569%" y="437" width="0.0431%" height="15" fill="rgb(232,46,7)" fg:x="1043" fg:w="1"/><text x="45.2069%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (1 samples, 0.04%)</title><rect x="44.9569%" y="421" width="0.0431%" height="15" fill="rgb(229,129,53)" fg:x="1043" fg:w="1"/><text x="45.2069%" y="431.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1 samples, 0.04%)</title><rect x="44.9569%" y="405" width="0.0431%" height="15" fill="rgb(234,188,29)" fg:x="1043" fg:w="1"/><text x="45.2069%" y="415.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="44.9569%" y="389" width="0.0431%" height="15" fill="rgb(246,141,4)" fg:x="1043" fg:w="1"/><text x="45.2069%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.04%)</title><rect x="45.0000%" y="453" width="0.0431%" height="15" fill="rgb(229,23,39)" fg:x="1044" fg:w="1"/><text x="45.2500%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.09%)</title><rect x="45.0431%" y="453" width="0.0862%" height="15" fill="rgb(206,12,3)" fg:x="1045" fg:w="2"/><text x="45.2931%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.09%)</title><rect x="45.0431%" y="437" width="0.0862%" height="15" fill="rgb(252,226,20)" fg:x="1045" fg:w="2"/><text x="45.2931%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.09%)</title><rect x="45.0431%" y="421" width="0.0862%" height="15" fill="rgb(216,123,35)" fg:x="1045" fg:w="2"/><text x="45.2931%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.04%)</title><rect x="45.1724%" y="421" width="0.0431%" height="15" fill="rgb(212,68,40)" fg:x="1048" fg:w="1"/><text x="45.4224%" y="431.50"></text></g><g><title>jsode::main (186 samples, 8.02%)</title><rect x="37.2414%" y="581" width="8.0172%" height="15" fill="rgb(254,125,32)" fg:x="864" fg:w="186"/><text x="37.4914%" y="591.50">jsode::main</text></g><g><title>jsode::parser::JsonParser::parse (186 samples, 8.02%)</title><rect x="37.2414%" y="565" width="8.0172%" height="15" fill="rgb(253,97,22)" fg:x="864" fg:w="186"/><text x="37.4914%" y="575.50">jsode::pars..</text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (186 samples, 8.02%)</title><rect x="37.2414%" y="549" width="8.0172%" height="15" fill="rgb(241,101,14)" fg:x="864" fg:w="186"/><text x="37.4914%" y="559.50">jsode::pars..</text></g><g><title>jsode::parser::JsonCursor::update_prop_index (13 samples, 0.56%)</title><rect x="44.6983%" y="533" width="0.5603%" height="15" fill="rgb(238,103,29)" fg:x="1037" fg:w="13"/><text x="44.9483%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (13 samples, 0.56%)</title><rect x="44.6983%" y="517" width="0.5603%" height="15" fill="rgb(233,195,47)" fg:x="1037" fg:w="13"/><text x="44.9483%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13 samples, 0.56%)</title><rect x="44.6983%" y="501" width="0.5603%" height="15" fill="rgb(246,218,30)" fg:x="1037" fg:w="13"/><text x="44.9483%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (11 samples, 0.47%)</title><rect x="44.7845%" y="485" width="0.4741%" height="15" fill="rgb(219,145,47)" fg:x="1039" fg:w="11"/><text x="45.0345%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (11 samples, 0.47%)</title><rect x="44.7845%" y="469" width="0.4741%" height="15" fill="rgb(243,12,26)" fg:x="1039" fg:w="11"/><text x="45.0345%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (3 samples, 0.13%)</title><rect x="45.1293%" y="453" width="0.1293%" height="15" fill="rgb(214,87,16)" fg:x="1047" fg:w="3"/><text x="45.3793%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.13%)</title><rect x="45.1293%" y="437" width="0.1293%" height="15" fill="rgb(208,99,42)" fg:x="1047" fg:w="3"/><text x="45.3793%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.04%)</title><rect x="45.2155%" y="421" width="0.0431%" height="15" fill="rgb(253,99,2)" fg:x="1049" fg:w="1"/><text x="45.4655%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.04%)</title><rect x="45.2155%" y="405" width="0.0431%" height="15" fill="rgb(220,168,23)" fg:x="1049" fg:w="1"/><text x="45.4655%" y="415.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (5 samples, 0.22%)</title><rect x="45.2586%" y="581" width="0.2155%" height="15" fill="rgb(242,38,24)" fg:x="1050" fg:w="5"/><text x="45.5086%" y="591.50"></text></g><g><title>jsode::parser::JsonParser::next_token_skip (3 samples, 0.13%)</title><rect x="45.3448%" y="565" width="0.1293%" height="15" fill="rgb(225,182,9)" fg:x="1052" fg:w="3"/><text x="45.5948%" y="575.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.13%)</title><rect x="45.3448%" y="549" width="0.1293%" height="15" fill="rgb(243,178,37)" fg:x="1052" fg:w="3"/><text x="45.5948%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (14 samples, 0.60%)</title><rect x="46.8103%" y="549" width="0.6034%" height="15" fill="rgb(232,139,19)" fg:x="1086" fg:w="14"/><text x="47.0603%" y="559.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (13 samples, 0.56%)</title><rect x="46.8534%" y="533" width="0.5603%" height="15" fill="rgb(225,201,24)" fg:x="1087" fg:w="13"/><text x="47.1034%" y="543.50"></text></g><g><title>[libc.so.6] (13 samples, 0.56%)</title><rect x="46.8534%" y="517" width="0.5603%" height="15" fill="rgb(221,47,46)" fg:x="1087" fg:w="13"/><text x="47.1034%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (7 samples, 0.30%)</title><rect x="47.4138%" y="549" width="0.3017%" height="15" fill="rgb(249,23,13)" fg:x="1100" fg:w="7"/><text x="47.6638%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="47.7155%" y="533" width="0.0431%" height="15" fill="rgb(219,9,5)" fg:x="1107" fg:w="1"/><text x="47.9655%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.17%)</title><rect x="47.7155%" y="549" width="0.1724%" height="15" fill="rgb(254,171,16)" fg:x="1107" fg:w="4"/><text x="47.9655%" y="559.50"></text></g><g><title>core::ptr::write (3 samples, 0.13%)</title><rect x="47.7586%" y="533" width="0.1293%" height="15" fill="rgb(230,171,20)" fg:x="1108" fg:w="3"/><text x="48.0086%" y="543.50"></text></g><g><title>[libc.so.6] (3 samples, 0.13%)</title><rect x="47.7586%" y="517" width="0.1293%" height="15" fill="rgb(210,71,41)" fg:x="1108" fg:w="3"/><text x="48.0086%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (2 samples, 0.09%)</title><rect x="47.8879%" y="549" width="0.0862%" height="15" fill="rgb(206,173,20)" fg:x="1111" fg:w="2"/><text x="48.1379%" y="559.50"></text></g><g><title>jsode::core::JsonToken::close_curly (2 samples, 0.09%)</title><rect x="47.9741%" y="549" width="0.0862%" height="15" fill="rgb(233,88,34)" fg:x="1113" fg:w="2"/><text x="48.2241%" y="559.50"></text></g><g><title>jsode::core::JsonToken::colon (1 samples, 0.04%)</title><rect x="48.0603%" y="549" width="0.0431%" height="15" fill="rgb(223,209,46)" fg:x="1115" fg:w="1"/><text x="48.3103%" y="559.50"></text></g><g><title>jsode::lexer::Tokenizer::move_backward_then_consume_until (4 samples, 0.17%)</title><rect x="48.1034%" y="549" width="0.1724%" height="15" fill="rgb(250,43,18)" fg:x="1116" fg:w="4"/><text x="48.3534%" y="559.50"></text></g><g><title>jsode::lexer::Tokenizer::consume_until (4 samples, 0.17%)</title><rect x="48.1034%" y="533" width="0.1724%" height="15" fill="rgb(208,13,10)" fg:x="1116" fg:w="4"/><text x="48.3534%" y="543.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (3 samples, 0.13%)</title><rect x="48.1466%" y="517" width="0.1293%" height="15" fill="rgb(212,200,36)" fg:x="1117" fg:w="3"/><text x="48.3966%" y="527.50"></text></g><g><title>jsode::parser::JsonParser::next_token (75 samples, 3.23%)</title><rect x="45.4741%" y="581" width="3.2328%" height="15" fill="rgb(225,90,30)" fg:x="1055" fg:w="75"/><text x="45.7241%" y="591.50">jso..</text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 3.19%)</title><rect x="45.5172%" y="565" width="3.1897%" height="15" fill="rgb(236,182,39)" fg:x="1056" fg:w="74"/><text x="45.7672%" y="575.50">&lt;js..</text></g><g><title>jsode::lexer::Tokenizer::next_item (10 samples, 0.43%)</title><rect x="48.2759%" y="549" width="0.4310%" height="15" fill="rgb(212,144,35)" fg:x="1120" fg:w="10"/><text x="48.5259%" y="559.50"></text></g><g><title>core::ptr::read (2 samples, 0.09%)</title><rect x="48.6207%" y="533" width="0.0862%" height="15" fill="rgb(228,63,44)" fg:x="1128" fg:w="2"/><text x="48.8707%" y="543.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (15 samples, 0.65%)</title><rect x="52.0259%" y="549" width="0.6466%" height="15" fill="rgb(228,109,6)" fg:x="1207" fg:w="15"/><text x="52.2759%" y="559.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::convert::From&lt;T&gt;&gt;::from (13 samples, 0.56%)</title><rect x="52.1121%" y="533" width="0.5603%" height="15" fill="rgb(238,117,24)" fg:x="1209" fg:w="13"/><text x="52.3621%" y="543.50"></text></g><g><title>[libc.so.6] (12 samples, 0.52%)</title><rect x="52.1552%" y="517" width="0.5172%" height="15" fill="rgb(242,26,26)" fg:x="1210" fg:w="12"/><text x="52.4052%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.13%)</title><rect x="52.6724%" y="549" width="0.1293%" height="15" fill="rgb(221,92,48)" fg:x="1222" fg:w="3"/><text x="52.9224%" y="559.50"></text></g><g><title>[jsode] (1 samples, 0.04%)</title><rect x="52.8017%" y="549" width="0.0431%" height="15" fill="rgb(209,209,32)" fg:x="1225" fg:w="1"/><text x="53.0517%" y="559.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.04%)</title><rect x="52.8017%" y="533" width="0.0431%" height="15" fill="rgb(221,70,22)" fg:x="1225" fg:w="1"/><text x="53.0517%" y="543.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="52.9741%" y="533" width="0.2155%" height="15" fill="rgb(248,145,5)" fg:x="1229" fg:w="5"/><text x="53.2241%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="53.1897%" y="533" width="0.0431%" height="15" fill="rgb(226,116,26)" fg:x="1234" fg:w="1"/><text x="53.4397%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.82%)</title><rect x="52.8448%" y="549" width="0.8190%" height="15" fill="rgb(244,5,17)" fg:x="1226" fg:w="19"/><text x="53.0948%" y="559.50"></text></g><g><title>core::ptr::write (10 samples, 0.43%)</title><rect x="53.2328%" y="533" width="0.4310%" height="15" fill="rgb(252,159,33)" fg:x="1235" fg:w="10"/><text x="53.4828%" y="543.50"></text></g><g><title>[libc.so.6] (9 samples, 0.39%)</title><rect x="53.2759%" y="517" width="0.3879%" height="15" fill="rgb(206,71,0)" fg:x="1236" fg:w="9"/><text x="53.5259%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (3 samples, 0.13%)</title><rect x="53.6638%" y="549" width="0.1293%" height="15" fill="rgb(233,118,54)" fg:x="1245" fg:w="3"/><text x="53.9138%" y="559.50"></text></g><g><title>jsode::core::JsonToken::number (1 samples, 0.04%)</title><rect x="53.7931%" y="549" width="0.0431%" height="15" fill="rgb(234,83,48)" fg:x="1248" fg:w="1"/><text x="54.0431%" y="559.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="53.7931%" y="533" width="0.0431%" height="15" fill="rgb(228,3,54)" fg:x="1248" fg:w="1"/><text x="54.0431%" y="543.50"></text></g><g><title>jsode::core::JsonToken::str (17 samples, 0.73%)</title><rect x="53.8362%" y="549" width="0.7328%" height="15" fill="rgb(226,155,13)" fg:x="1249" fg:w="17"/><text x="54.0862%" y="559.50"></text></g><g><title>[libc.so.6] (13 samples, 0.56%)</title><rect x="54.0086%" y="533" width="0.5603%" height="15" fill="rgb(241,28,37)" fg:x="1253" fg:w="13"/><text x="54.2586%" y="543.50"></text></g><g><title>jsode::core::Span::new (2 samples, 0.09%)</title><rect x="54.5690%" y="549" width="0.0862%" height="15" fill="rgb(233,93,10)" fg:x="1266" fg:w="2"/><text x="54.8190%" y="559.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (84 samples, 3.62%)</title><rect x="60.3448%" y="517" width="3.6207%" height="15" fill="rgb(225,113,19)" fg:x="1400" fg:w="84"/><text x="60.5948%" y="527.50">&lt;jso..</text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii_digit (1 samples, 0.04%)</title><rect x="63.9224%" y="501" width="0.0431%" height="15" fill="rgb(241,2,18)" fg:x="1483" fg:w="1"/><text x="64.1724%" y="511.50"></text></g><g><title>jsode::lexer::Tokenizer::move_backward_then_consume_until (222 samples, 9.57%)</title><rect x="54.6552%" y="549" width="9.5690%" height="15" fill="rgb(228,207,21)" fg:x="1268" fg:w="222"/><text x="54.9052%" y="559.50">jsode::lexer::..</text></g><g><title>jsode::lexer::Tokenizer::consume_until (216 samples, 9.31%)</title><rect x="54.9138%" y="533" width="9.3103%" height="15" fill="rgb(213,211,35)" fg:x="1274" fg:w="216"/><text x="55.1638%" y="543.50">jsode::lexer:..</text></g><g><title>jsode::lexer::Tokenizer::step_back (6 samples, 0.26%)</title><rect x="63.9655%" y="517" width="0.2586%" height="15" fill="rgb(209,83,10)" fg:x="1484" fg:w="6"/><text x="64.2155%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="65.5172%" y="533" width="0.0431%" height="15" fill="rgb(209,164,1)" fg:x="1520" fg:w="1"/><text x="65.7672%" y="543.50"></text></g><g><title>jsode::lexer::Tokenizer::next_item (37 samples, 1.59%)</title><rect x="64.2241%" y="549" width="1.5948%" height="15" fill="rgb(213,184,43)" fg:x="1490" fg:w="37"/><text x="64.4741%" y="559.50"></text></g><g><title>core::ptr::read (6 samples, 0.26%)</title><rect x="65.5603%" y="533" width="0.2586%" height="15" fill="rgb(231,61,34)" fg:x="1521" fg:w="6"/><text x="65.8103%" y="543.50"></text></g><g><title>jsode::lexer::Tokenizer::peek_prev_item (2 samples, 0.09%)</title><rect x="65.8190%" y="549" width="0.0862%" height="15" fill="rgb(235,75,3)" fg:x="1527" fg:w="2"/><text x="66.0690%" y="559.50"></text></g><g><title>jsode::parser::JsonParser::next_token_skip (400 samples, 17.24%)</title><rect x="48.7069%" y="581" width="17.2414%" height="15" fill="rgb(220,106,47)" fg:x="1130" fg:w="400"/><text x="48.9569%" y="591.50">jsode::parser::JsonParser::..</text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (400 samples, 17.24%)</title><rect x="48.7069%" y="565" width="17.2414%" height="15" fill="rgb(210,196,33)" fg:x="1130" fg:w="400"/><text x="48.9569%" y="575.50">&lt;jsode::lexer::Tokenizer as..</text></g><g><title>jsode::lexer::Tokenizer::step_back (1 samples, 0.04%)</title><rect x="65.9052%" y="549" width="0.0431%" height="15" fill="rgb(229,154,42)" fg:x="1529" fg:w="1"/><text x="66.1552%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.17%)</title><rect x="66.1207%" y="389" width="0.1724%" height="15" fill="rgb(228,114,26)" fg:x="1534" fg:w="4"/><text x="66.3707%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.09%)</title><rect x="66.2069%" y="373" width="0.0862%" height="15" fill="rgb(208,144,1)" fg:x="1536" fg:w="2"/><text x="66.4569%" y="383.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (6 samples, 0.26%)</title><rect x="66.0776%" y="405" width="0.2586%" height="15" fill="rgb(239,112,37)" fg:x="1533" fg:w="6"/><text x="66.3276%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.04%)</title><rect x="66.2931%" y="389" width="0.0431%" height="15" fill="rgb(210,96,50)" fg:x="1538" fg:w="1"/><text x="66.5431%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="66.2931%" y="373" width="0.0431%" height="15" fill="rgb(222,178,2)" fg:x="1538" fg:w="1"/><text x="66.5431%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="66.4224%" y="357" width="0.0431%" height="15" fill="rgb(226,74,18)" fg:x="1541" fg:w="1"/><text x="66.6724%" y="367.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="66.4224%" y="341" width="0.0431%" height="15" fill="rgb(225,67,54)" fg:x="1541" fg:w="1"/><text x="66.6724%" y="351.50"></text></g><g><title>core::ptr::read_volatile::precondition_check (1 samples, 0.04%)</title><rect x="66.4224%" y="325" width="0.0431%" height="15" fill="rgb(251,92,32)" fg:x="1541" fg:w="1"/><text x="66.6724%" y="335.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="66.4224%" y="309" width="0.0431%" height="15" fill="rgb(228,149,22)" fg:x="1541" fg:w="1"/><text x="66.6724%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.04%)</title><rect x="66.4224%" y="293" width="0.0431%" height="15" fill="rgb(243,54,13)" fg:x="1541" fg:w="1"/><text x="66.6724%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (1 samples, 0.04%)</title><rect x="66.4224%" y="277" width="0.0431%" height="15" fill="rgb(243,180,28)" fg:x="1541" fg:w="1"/><text x="66.6724%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (1 samples, 0.04%)</title><rect x="66.4224%" y="261" width="0.0431%" height="15" fill="rgb(208,167,24)" fg:x="1541" fg:w="1"/><text x="66.6724%" y="271.50"></text></g><g><title>jsode::parser::JsonCursor::create_object_block (11 samples, 0.47%)</title><rect x="66.0776%" y="549" width="0.4741%" height="15" fill="rgb(245,73,45)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V&gt;::with_capacity (11 samples, 0.47%)</title><rect x="66.0776%" y="533" width="0.4741%" height="15" fill="rgb(237,203,48)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (11 samples, 0.47%)</title><rect x="66.0776%" y="517" width="0.4741%" height="15" fill="rgb(211,197,16)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S&gt;::with_capacity_and_hasher (11 samples, 0.47%)</title><rect x="66.0776%" y="501" width="0.4741%" height="15" fill="rgb(243,99,51)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T&gt;::with_capacity (11 samples, 0.47%)</title><rect x="66.0776%" y="485" width="0.4741%" height="15" fill="rgb(215,123,29)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (11 samples, 0.47%)</title><rect x="66.0776%" y="469" width="0.4741%" height="15" fill="rgb(239,186,37)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::with_capacity (11 samples, 0.47%)</title><rect x="66.0776%" y="453" width="0.4741%" height="15" fill="rgb(252,136,39)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (11 samples, 0.47%)</title><rect x="66.0776%" y="437" width="0.4741%" height="15" fill="rgb(223,213,32)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (11 samples, 0.47%)</title><rect x="66.0776%" y="421" width="0.4741%" height="15" fill="rgb(233,115,5)" fg:x="1533" fg:w="11"/><text x="66.3276%" y="431.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (5 samples, 0.22%)</title><rect x="66.3362%" y="405" width="0.2155%" height="15" fill="rgb(207,226,44)" fg:x="1539" fg:w="5"/><text x="66.5862%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.22%)</title><rect x="66.3362%" y="389" width="0.2155%" height="15" fill="rgb(208,126,0)" fg:x="1539" fg:w="5"/><text x="66.5862%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.22%)</title><rect x="66.3362%" y="373" width="0.2155%" height="15" fill="rgb(244,66,21)" fg:x="1539" fg:w="5"/><text x="66.5862%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new (2 samples, 0.09%)</title><rect x="66.4655%" y="357" width="0.0862%" height="15" fill="rgb(222,97,12)" fg:x="1542" fg:w="2"/><text x="66.7155%" y="367.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="66.5086%" y="341" width="0.0431%" height="15" fill="rgb(219,213,19)" fg:x="1543" fg:w="1"/><text x="66.7586%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (3 samples, 0.13%)</title><rect x="66.7672%" y="389" width="0.1293%" height="15" fill="rgb(252,169,30)" fg:x="1549" fg:w="3"/><text x="67.0172%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (3 samples, 0.13%)</title><rect x="66.7672%" y="373" width="0.1293%" height="15" fill="rgb(206,32,51)" fg:x="1549" fg:w="3"/><text x="67.0172%" y="383.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (7 samples, 0.30%)</title><rect x="66.6379%" y="421" width="0.3017%" height="15" fill="rgb(250,172,42)" fg:x="1546" fg:w="7"/><text x="66.8879%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (4 samples, 0.17%)</title><rect x="66.7672%" y="405" width="0.1724%" height="15" fill="rgb(209,34,43)" fg:x="1549" fg:w="4"/><text x="67.0172%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to::runtime_impl (1 samples, 0.04%)</title><rect x="66.8966%" y="389" width="0.0431%" height="15" fill="rgb(223,11,35)" fg:x="1552" fg:w="1"/><text x="67.1466%" y="399.50"></text></g><g><title>jsode::common::hash_str (12 samples, 0.52%)</title><rect x="66.5517%" y="533" width="0.5172%" height="15" fill="rgb(251,219,26)" fg:x="1544" fg:w="12"/><text x="66.8017%" y="543.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (12 samples, 0.52%)</title><rect x="66.5517%" y="517" width="0.5172%" height="15" fill="rgb(231,119,3)" fg:x="1544" fg:w="12"/><text x="66.8017%" y="527.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (12 samples, 0.52%)</title><rect x="66.5517%" y="501" width="0.5172%" height="15" fill="rgb(216,97,11)" fg:x="1544" fg:w="12"/><text x="66.8017%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (12 samples, 0.52%)</title><rect x="66.5517%" y="485" width="0.5172%" height="15" fill="rgb(223,59,9)" fg:x="1544" fg:w="12"/><text x="66.8017%" y="495.50"></text></g><g><title>core::hash::sip::u8to64_le (12 samples, 0.52%)</title><rect x="66.5517%" y="469" width="0.5172%" height="15" fill="rgb(233,93,31)" fg:x="1544" fg:w="12"/><text x="66.8017%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.52%)</title><rect x="66.5517%" y="453" width="0.5172%" height="15" fill="rgb(239,81,33)" fg:x="1544" fg:w="12"/><text x="66.8017%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (12 samples, 0.52%)</title><rect x="66.5517%" y="437" width="0.5172%" height="15" fill="rgb(213,120,34)" fg:x="1544" fg:w="12"/><text x="66.8017%" y="447.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (3 samples, 0.13%)</title><rect x="66.9397%" y="421" width="0.1293%" height="15" fill="rgb(243,49,53)" fg:x="1553" fg:w="3"/><text x="67.1897%" y="431.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (2 samples, 0.09%)</title><rect x="66.9828%" y="405" width="0.0862%" height="15" fill="rgb(247,216,33)" fg:x="1554" fg:w="2"/><text x="67.2328%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.09%)</title><rect x="66.9828%" y="389" width="0.0862%" height="15" fill="rgb(226,26,14)" fg:x="1554" fg:w="2"/><text x="67.2328%" y="399.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (35 samples, 1.51%)</title><rect x="67.0690%" y="469" width="1.5086%" height="15" fill="rgb(215,49,53)" fg:x="1556" fg:w="35"/><text x="67.3190%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (35 samples, 1.51%)</title><rect x="67.0690%" y="453" width="1.5086%" height="15" fill="rgb(245,162,40)" fg:x="1556" fg:w="35"/><text x="67.3190%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (35 samples, 1.51%)</title><rect x="67.0690%" y="437" width="1.5086%" height="15" fill="rgb(229,68,17)" fg:x="1556" fg:w="35"/><text x="67.3190%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35 samples, 1.51%)</title><rect x="67.0690%" y="421" width="1.5086%" height="15" fill="rgb(213,182,10)" fg:x="1556" fg:w="35"/><text x="67.3190%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (11 samples, 0.47%)</title><rect x="68.1034%" y="405" width="0.4741%" height="15" fill="rgb(245,125,30)" fg:x="1580" fg:w="11"/><text x="68.3534%" y="415.50"></text></g><g><title>[libc.so.6] (7 samples, 0.30%)</title><rect x="68.6207%" y="453" width="0.3017%" height="15" fill="rgb(232,202,2)" fg:x="1592" fg:w="7"/><text x="68.8707%" y="463.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="68.9655%" y="437" width="0.2155%" height="15" fill="rgb(237,140,51)" fg:x="1600" fg:w="5"/><text x="69.2155%" y="447.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (33 samples, 1.42%)</title><rect x="68.5776%" y="469" width="1.4224%" height="15" fill="rgb(236,157,25)" fg:x="1591" fg:w="33"/><text x="68.8276%" y="479.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (25 samples, 1.08%)</title><rect x="68.9224%" y="453" width="1.0776%" height="15" fill="rgb(219,209,0)" fg:x="1599" fg:w="25"/><text x="69.1724%" y="463.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (19 samples, 0.82%)</title><rect x="69.1810%" y="437" width="0.8190%" height="15" fill="rgb(240,116,54)" fg:x="1605" fg:w="19"/><text x="69.4310%" y="447.50"></text></g><g><title>[libc.so.6] (13 samples, 0.56%)</title><rect x="69.4397%" y="421" width="0.5603%" height="15" fill="rgb(216,10,36)" fg:x="1611" fg:w="13"/><text x="69.6897%" y="431.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.52%)</title><rect x="70.0862%" y="373" width="0.5172%" height="15" fill="rgb(222,72,44)" fg:x="1626" fg:w="12"/><text x="70.3362%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.13%)</title><rect x="70.4741%" y="357" width="0.1293%" height="15" fill="rgb(232,159,9)" fg:x="1635" fg:w="3"/><text x="70.7241%" y="367.50"></text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.17%)</title><rect x="70.6034%" y="373" width="0.1724%" height="15" fill="rgb(210,39,32)" fg:x="1638" fg:w="4"/><text x="70.8534%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="70.7328%" y="357" width="0.0431%" height="15" fill="rgb(216,194,45)" fg:x="1641" fg:w="1"/><text x="70.9828%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (3 samples, 0.13%)</title><rect x="70.9483%" y="325" width="0.1293%" height="15" fill="rgb(218,18,35)" fg:x="1646" fg:w="3"/><text x="71.1983%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (3 samples, 0.13%)</title><rect x="70.9483%" y="309" width="0.1293%" height="15" fill="rgb(207,83,51)" fg:x="1646" fg:w="3"/><text x="71.1983%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (3 samples, 0.13%)</title><rect x="70.9483%" y="293" width="0.1293%" height="15" fill="rgb(225,63,43)" fg:x="1646" fg:w="3"/><text x="71.1983%" y="303.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (6 samples, 0.26%)</title><rect x="70.8621%" y="341" width="0.2586%" height="15" fill="rgb(207,57,36)" fg:x="1644" fg:w="6"/><text x="71.1121%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_null (1 samples, 0.04%)</title><rect x="71.0776%" y="325" width="0.0431%" height="15" fill="rgb(216,99,33)" fg:x="1649" fg:w="1"/><text x="71.3276%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.52%)</title><rect x="70.7759%" y="373" width="0.5172%" height="15" fill="rgb(225,42,16)" fg:x="1642" fg:w="12"/><text x="71.0259%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (12 samples, 0.52%)</title><rect x="70.7759%" y="357" width="0.5172%" height="15" fill="rgb(220,201,45)" fg:x="1642" fg:w="12"/><text x="71.0259%" y="367.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (4 samples, 0.17%)</title><rect x="71.1207%" y="341" width="0.1724%" height="15" fill="rgb(225,33,4)" fg:x="1650" fg:w="4"/><text x="71.3707%" y="351.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (3 samples, 0.13%)</title><rect x="71.1638%" y="325" width="0.1293%" height="15" fill="rgb(224,33,50)" fg:x="1651" fg:w="3"/><text x="71.4138%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (2 samples, 0.09%)</title><rect x="71.2069%" y="309" width="0.0862%" height="15" fill="rgb(246,198,51)" fg:x="1652" fg:w="2"/><text x="71.4569%" y="319.50"></text></g><g><title>hashbrown::map::make_hash (99 samples, 4.27%)</title><rect x="67.0690%" y="501" width="4.2672%" height="15" fill="rgb(205,22,4)" fg:x="1556" fg:w="99"/><text x="67.3190%" y="511.50">hashb..</text></g><g><title>core::hash::BuildHasher::hash_one (99 samples, 4.27%)</title><rect x="67.0690%" y="485" width="4.2672%" height="15" fill="rgb(206,3,8)" fg:x="1556" fg:w="99"/><text x="67.3190%" y="495.50">core:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (31 samples, 1.34%)</title><rect x="70.0000%" y="469" width="1.3362%" height="15" fill="rgb(251,23,15)" fg:x="1624" fg:w="31"/><text x="70.2500%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (31 samples, 1.34%)</title><rect x="70.0000%" y="453" width="1.3362%" height="15" fill="rgb(252,88,28)" fg:x="1624" fg:w="31"/><text x="70.2500%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (31 samples, 1.34%)</title><rect x="70.0000%" y="437" width="1.3362%" height="15" fill="rgb(212,127,14)" fg:x="1624" fg:w="31"/><text x="70.2500%" y="447.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 1.34%)</title><rect x="70.0000%" y="421" width="1.3362%" height="15" fill="rgb(247,145,37)" fg:x="1624" fg:w="31"/><text x="70.2500%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (31 samples, 1.34%)</title><rect x="70.0000%" y="405" width="1.3362%" height="15" fill="rgb(209,117,53)" fg:x="1624" fg:w="31"/><text x="70.2500%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (31 samples, 1.34%)</title><rect x="70.0000%" y="389" width="1.3362%" height="15" fill="rgb(212,90,42)" fg:x="1624" fg:w="31"/><text x="70.2500%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="71.2931%" y="373" width="0.0431%" height="15" fill="rgb(218,164,37)" fg:x="1654" fg:w="1"/><text x="71.5431%" y="383.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="71.3362%" y="437" width="0.0431%" height="15" fill="rgb(246,65,34)" fg:x="1655" fg:w="1"/><text x="71.5862%" y="447.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="71.3362%" y="421" width="0.0431%" height="15" fill="rgb(231,100,33)" fg:x="1655" fg:w="1"/><text x="71.5862%" y="431.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.04%)</title><rect x="71.3362%" y="405" width="0.0431%" height="15" fill="rgb(228,126,14)" fg:x="1655" fg:w="1"/><text x="71.5862%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::FullBucketsIndices as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.17%)</title><rect x="71.4224%" y="421" width="0.1724%" height="15" fill="rgb(215,173,21)" fg:x="1657" fg:w="4"/><text x="71.6724%" y="431.50"></text></g><g><title>hashbrown::raw::FullBucketsIndices::next_impl (1 samples, 0.04%)</title><rect x="71.5517%" y="405" width="0.0431%" height="15" fill="rgb(210,6,40)" fg:x="1660" fg:w="1"/><text x="71.8017%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="71.5517%" y="389" width="0.0431%" height="15" fill="rgb(212,48,18)" fg:x="1660" fg:w="1"/><text x="71.8017%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="71.5517%" y="373" width="0.0431%" height="15" fill="rgb(230,214,11)" fg:x="1660" fg:w="1"/><text x="71.8017%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (1 samples, 0.04%)</title><rect x="71.5517%" y="357" width="0.0431%" height="15" fill="rgb(254,105,39)" fg:x="1660" fg:w="1"/><text x="71.8017%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1 samples, 0.04%)</title><rect x="71.5517%" y="341" width="0.0431%" height="15" fill="rgb(245,158,5)" fg:x="1660" fg:w="1"/><text x="71.8017%" y="351.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="71.5517%" y="325" width="0.0431%" height="15" fill="rgb(249,208,11)" fg:x="1660" fg:w="1"/><text x="71.8017%" y="335.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (2 samples, 0.09%)</title><rect x="71.5948%" y="389" width="0.0862%" height="15" fill="rgb(210,39,28)" fg:x="1661" fg:w="2"/><text x="71.8448%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.09%)</title><rect x="71.5948%" y="373" width="0.0862%" height="15" fill="rgb(211,56,53)" fg:x="1661" fg:w="2"/><text x="71.8448%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (2 samples, 0.09%)</title><rect x="71.5948%" y="357" width="0.0862%" height="15" fill="rgb(226,201,30)" fg:x="1661" fg:w="2"/><text x="71.8448%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (2 samples, 0.09%)</title><rect x="71.5948%" y="341" width="0.0862%" height="15" fill="rgb(239,101,34)" fg:x="1661" fg:w="2"/><text x="71.8448%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.13%)</title><rect x="71.5948%" y="421" width="0.1293%" height="15" fill="rgb(226,209,5)" fg:x="1661" fg:w="3"/><text x="71.8448%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (3 samples, 0.13%)</title><rect x="71.5948%" y="405" width="0.1293%" height="15" fill="rgb(250,105,47)" fg:x="1661" fg:w="3"/><text x="71.8448%" y="415.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (1 samples, 0.04%)</title><rect x="71.6810%" y="389" width="0.0431%" height="15" fill="rgb(230,72,3)" fg:x="1663" fg:w="1"/><text x="71.9310%" y="399.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (1 samples, 0.04%)</title><rect x="71.6810%" y="373" width="0.0431%" height="15" fill="rgb(232,218,39)" fg:x="1663" fg:w="1"/><text x="71.9310%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (1 samples, 0.04%)</title><rect x="71.7672%" y="325" width="0.0431%" height="15" fill="rgb(248,166,6)" fg:x="1665" fg:w="1"/><text x="72.0172%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (3 samples, 0.13%)</title><rect x="71.7241%" y="421" width="0.1293%" height="15" fill="rgb(247,89,20)" fg:x="1664" fg:w="3"/><text x="71.9741%" y="431.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.13%)</title><rect x="71.7241%" y="405" width="0.1293%" height="15" fill="rgb(248,130,54)" fg:x="1664" fg:w="3"/><text x="71.9741%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (3 samples, 0.13%)</title><rect x="71.7241%" y="389" width="0.1293%" height="15" fill="rgb(234,196,4)" fg:x="1664" fg:w="3"/><text x="71.9741%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (2 samples, 0.09%)</title><rect x="71.7672%" y="373" width="0.0862%" height="15" fill="rgb(250,143,31)" fg:x="1665" fg:w="2"/><text x="72.0172%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (2 samples, 0.09%)</title><rect x="71.7672%" y="357" width="0.0862%" height="15" fill="rgb(211,110,34)" fg:x="1665" fg:w="2"/><text x="72.0172%" y="367.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (2 samples, 0.09%)</title><rect x="71.7672%" y="341" width="0.0862%" height="15" fill="rgb(215,124,48)" fg:x="1665" fg:w="2"/><text x="72.0172%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="71.8103%" y="325" width="0.0431%" height="15" fill="rgb(216,46,13)" fg:x="1666" fg:w="1"/><text x="72.0603%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.17%)</title><rect x="72.0690%" y="309" width="0.1724%" height="15" fill="rgb(205,184,25)" fg:x="1672" fg:w="4"/><text x="72.3190%" y="319.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (23 samples, 0.99%)</title><rect x="71.9397%" y="357" width="0.9914%" height="15" fill="rgb(228,1,10)" fg:x="1669" fg:w="23"/><text x="72.1897%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (23 samples, 0.99%)</title><rect x="71.9397%" y="341" width="0.9914%" height="15" fill="rgb(213,116,27)" fg:x="1669" fg:w="23"/><text x="72.1897%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (23 samples, 0.99%)</title><rect x="71.9397%" y="325" width="0.9914%" height="15" fill="rgb(241,95,50)" fg:x="1669" fg:w="23"/><text x="72.1897%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (16 samples, 0.69%)</title><rect x="72.2414%" y="309" width="0.6897%" height="15" fill="rgb(238,48,32)" fg:x="1676" fg:w="16"/><text x="72.4914%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.22%)</title><rect x="72.7155%" y="293" width="0.2155%" height="15" fill="rgb(235,113,49)" fg:x="1687" fg:w="5"/><text x="72.9655%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="72.9310%" y="341" width="0.0431%" height="15" fill="rgb(205,127,43)" fg:x="1692" fg:w="1"/><text x="73.1810%" y="351.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="72.9741%" y="325" width="0.0862%" height="15" fill="rgb(250,162,2)" fg:x="1693" fg:w="2"/><text x="73.2241%" y="335.50"></text></g><g><title>[libc.so.6] (5 samples, 0.22%)</title><rect x="73.0603%" y="309" width="0.2155%" height="15" fill="rgb(220,13,41)" fg:x="1695" fg:w="5"/><text x="73.3103%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (9 samples, 0.39%)</title><rect x="72.9310%" y="357" width="0.3879%" height="15" fill="rgb(249,221,25)" fg:x="1692" fg:w="9"/><text x="73.1810%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (8 samples, 0.34%)</title><rect x="72.9741%" y="341" width="0.3448%" height="15" fill="rgb(215,208,19)" fg:x="1693" fg:w="8"/><text x="73.2241%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (6 samples, 0.26%)</title><rect x="73.0603%" y="325" width="0.2586%" height="15" fill="rgb(236,175,2)" fg:x="1695" fg:w="6"/><text x="73.3103%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="73.2759%" y="309" width="0.0431%" height="15" fill="rgb(241,52,2)" fg:x="1700" fg:w="1"/><text x="73.5259%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.17%)</title><rect x="73.4052%" y="261" width="0.1724%" height="15" fill="rgb(248,140,14)" fg:x="1703" fg:w="4"/><text x="73.6552%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="73.5345%" y="245" width="0.0431%" height="15" fill="rgb(253,22,42)" fg:x="1706" fg:w="1"/><text x="73.7845%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.09%)</title><rect x="73.5776%" y="261" width="0.0862%" height="15" fill="rgb(234,61,47)" fg:x="1707" fg:w="2"/><text x="73.8276%" y="271.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (3 samples, 0.13%)</title><rect x="73.7500%" y="229" width="0.1293%" height="15" fill="rgb(208,226,15)" fg:x="1711" fg:w="3"/><text x="74.0000%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (2 samples, 0.09%)</title><rect x="73.7931%" y="213" width="0.0862%" height="15" fill="rgb(217,221,4)" fg:x="1712" fg:w="2"/><text x="74.0431%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (2 samples, 0.09%)</title><rect x="73.7931%" y="197" width="0.0862%" height="15" fill="rgb(212,174,34)" fg:x="1712" fg:w="2"/><text x="74.0431%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (2 samples, 0.09%)</title><rect x="73.7931%" y="181" width="0.0862%" height="15" fill="rgb(253,83,4)" fg:x="1712" fg:w="2"/><text x="74.0431%" y="191.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (1 samples, 0.04%)</title><rect x="73.8793%" y="197" width="0.0431%" height="15" fill="rgb(250,195,49)" fg:x="1714" fg:w="1"/><text x="74.1293%" y="207.50"></text></g><g><title>hashbrown::map::make_hasher::_{{closure}} (48 samples, 2.07%)</title><rect x="71.8966%" y="405" width="2.0690%" height="15" fill="rgb(241,192,25)" fg:x="1668" fg:w="48"/><text x="72.1466%" y="415.50">h..</text></g><g><title>hashbrown::map::make_hash (47 samples, 2.03%)</title><rect x="71.9397%" y="389" width="2.0259%" height="15" fill="rgb(208,124,10)" fg:x="1669" fg:w="47"/><text x="72.1897%" y="399.50">h..</text></g><g><title>core::hash::BuildHasher::hash_one (47 samples, 2.03%)</title><rect x="71.9397%" y="373" width="2.0259%" height="15" fill="rgb(222,33,0)" fg:x="1669" fg:w="47"/><text x="72.1897%" y="383.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (15 samples, 0.65%)</title><rect x="73.3190%" y="357" width="0.6466%" height="15" fill="rgb(234,209,28)" fg:x="1701" fg:w="15"/><text x="73.5690%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (14 samples, 0.60%)</title><rect x="73.3621%" y="341" width="0.6034%" height="15" fill="rgb(224,11,23)" fg:x="1702" fg:w="14"/><text x="73.6121%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 0.60%)</title><rect x="73.3621%" y="325" width="0.6034%" height="15" fill="rgb(232,99,1)" fg:x="1702" fg:w="14"/><text x="73.6121%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 0.60%)</title><rect x="73.3621%" y="309" width="0.6034%" height="15" fill="rgb(237,95,45)" fg:x="1702" fg:w="14"/><text x="73.6121%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 0.60%)</title><rect x="73.3621%" y="293" width="0.6034%" height="15" fill="rgb(208,109,11)" fg:x="1702" fg:w="14"/><text x="73.6121%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 0.60%)</title><rect x="73.3621%" y="277" width="0.6034%" height="15" fill="rgb(216,190,48)" fg:x="1702" fg:w="14"/><text x="73.6121%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.30%)</title><rect x="73.6638%" y="261" width="0.3017%" height="15" fill="rgb(251,171,36)" fg:x="1709" fg:w="7"/><text x="73.9138%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (7 samples, 0.30%)</title><rect x="73.6638%" y="245" width="0.3017%" height="15" fill="rgb(230,62,22)" fg:x="1709" fg:w="7"/><text x="73.9138%" y="255.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (2 samples, 0.09%)</title><rect x="73.8793%" y="229" width="0.0862%" height="15" fill="rgb(225,114,35)" fg:x="1714" fg:w="2"/><text x="74.1293%" y="239.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (2 samples, 0.09%)</title><rect x="73.8793%" y="213" width="0.0862%" height="15" fill="rgb(215,118,42)" fg:x="1714" fg:w="2"/><text x="74.1293%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.04%)</title><rect x="73.9224%" y="197" width="0.0431%" height="15" fill="rgb(243,119,21)" fg:x="1715" fg:w="1"/><text x="74.1724%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="73.9224%" y="181" width="0.0431%" height="15" fill="rgb(252,177,53)" fg:x="1715" fg:w="1"/><text x="74.1724%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.04%)</title><rect x="73.9655%" y="405" width="0.0431%" height="15" fill="rgb(237,209,29)" fg:x="1716" fg:w="1"/><text x="74.2155%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="73.9655%" y="389" width="0.0431%" height="15" fill="rgb(212,65,23)" fg:x="1716" fg:w="1"/><text x="74.2155%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::_{{closure}} (52 samples, 2.24%)</title><rect x="71.8534%" y="421" width="2.2414%" height="15" fill="rgb(230,222,46)" fg:x="1667" fg:w="52"/><text x="72.1034%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTableInner::bucket (2 samples, 0.09%)</title><rect x="74.0086%" y="405" width="0.0862%" height="15" fill="rgb(215,135,32)" fg:x="1717" fg:w="2"/><text x="74.2586%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.09%)</title><rect x="74.0086%" y="389" width="0.0862%" height="15" fill="rgb(246,101,22)" fg:x="1717" fg:w="2"/><text x="74.2586%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::bucket_ptr (3 samples, 0.13%)</title><rect x="74.0948%" y="421" width="0.1293%" height="15" fill="rgb(206,107,13)" fg:x="1719" fg:w="3"/><text x="74.3448%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (3 samples, 0.13%)</title><rect x="74.0948%" y="405" width="0.1293%" height="15" fill="rgb(250,100,44)" fg:x="1719" fg:w="3"/><text x="74.3448%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="74.1810%" y="389" width="0.0431%" height="15" fill="rgb(231,147,38)" fg:x="1721" fg:w="1"/><text x="74.4310%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::full_buckets_indices (2 samples, 0.09%)</title><rect x="74.2241%" y="421" width="0.0862%" height="15" fill="rgb(229,8,40)" fg:x="1722" fg:w="2"/><text x="74.4741%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.09%)</title><rect x="74.2241%" y="405" width="0.0862%" height="15" fill="rgb(221,135,30)" fg:x="1722" fg:w="2"/><text x="74.4741%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (2 samples, 0.09%)</title><rect x="74.2241%" y="389" width="0.0862%" height="15" fill="rgb(249,193,18)" fg:x="1722" fg:w="2"/><text x="74.4741%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (1 samples, 0.04%)</title><rect x="74.3103%" y="389" width="0.0431%" height="15" fill="rgb(209,133,39)" fg:x="1724" fg:w="1"/><text x="74.5603%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (3 samples, 0.13%)</title><rect x="74.3966%" y="373" width="0.1293%" height="15" fill="rgb(232,100,14)" fg:x="1726" fg:w="3"/><text x="74.6466%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (2 samples, 0.09%)</title><rect x="74.4397%" y="357" width="0.0862%" height="15" fill="rgb(224,185,1)" fg:x="1727" fg:w="2"/><text x="74.6897%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (2 samples, 0.09%)</title><rect x="74.4397%" y="341" width="0.0862%" height="15" fill="rgb(223,139,8)" fg:x="1727" fg:w="2"/><text x="74.6897%" y="351.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (1 samples, 0.04%)</title><rect x="74.4828%" y="325" width="0.0431%" height="15" fill="rgb(232,213,38)" fg:x="1728" fg:w="1"/><text x="74.7328%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="74.4828%" y="309" width="0.0431%" height="15" fill="rgb(207,94,22)" fg:x="1728" fg:w="1"/><text x="74.7328%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (10 samples, 0.43%)</title><rect x="74.3534%" y="389" width="0.4310%" height="15" fill="rgb(219,183,54)" fg:x="1725" fg:w="10"/><text x="74.6034%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (6 samples, 0.26%)</title><rect x="74.5259%" y="373" width="0.2586%" height="15" fill="rgb(216,185,54)" fg:x="1729" fg:w="6"/><text x="74.7759%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.17%)</title><rect x="74.6121%" y="357" width="0.1724%" height="15" fill="rgb(254,217,39)" fg:x="1731" fg:w="4"/><text x="74.8621%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (3 samples, 0.13%)</title><rect x="74.7845%" y="389" width="0.1293%" height="15" fill="rgb(240,178,23)" fg:x="1735" fg:w="3"/><text x="75.0345%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.04%)</title><rect x="74.8707%" y="373" width="0.0431%" height="15" fill="rgb(218,11,47)" fg:x="1737" fg:w="1"/><text x="75.1207%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (1 samples, 0.04%)</title><rect x="75.0431%" y="357" width="0.0431%" height="15" fill="rgb(218,51,51)" fg:x="1741" fg:w="1"/><text x="75.2931%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_insert_slot (23 samples, 0.99%)</title><rect x="74.3103%" y="421" width="0.9914%" height="15" fill="rgb(238,126,27)" fg:x="1724" fg:w="23"/><text x="74.5603%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot (23 samples, 0.99%)</title><rect x="74.3103%" y="405" width="0.9914%" height="15" fill="rgb(249,202,22)" fg:x="1724" fg:w="23"/><text x="74.5603%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (9 samples, 0.39%)</title><rect x="74.9138%" y="389" width="0.3879%" height="15" fill="rgb(254,195,49)" fg:x="1738" fg:w="9"/><text x="75.1638%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (7 samples, 0.30%)</title><rect x="75.0000%" y="373" width="0.3017%" height="15" fill="rgb(208,123,14)" fg:x="1740" fg:w="7"/><text x="75.2500%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.22%)</title><rect x="75.0862%" y="357" width="0.2155%" height="15" fill="rgb(224,200,8)" fg:x="1742" fg:w="5"/><text x="75.3362%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (5 samples, 0.22%)</title><rect x="75.0862%" y="341" width="0.2155%" height="15" fill="rgb(217,61,36)" fg:x="1742" fg:w="5"/><text x="75.3362%" y="351.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (4 samples, 0.17%)</title><rect x="75.1293%" y="325" width="0.1724%" height="15" fill="rgb(206,35,45)" fg:x="1743" fg:w="4"/><text x="75.3793%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (3 samples, 0.13%)</title><rect x="75.1724%" y="309" width="0.1293%" height="15" fill="rgb(217,65,33)" fg:x="1744" fg:w="3"/><text x="75.4224%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (2 samples, 0.09%)</title><rect x="75.2155%" y="293" width="0.0862%" height="15" fill="rgb(222,158,48)" fg:x="1745" fg:w="2"/><text x="75.4655%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (2 samples, 0.09%)</title><rect x="75.2155%" y="277" width="0.0862%" height="15" fill="rgb(254,2,54)" fg:x="1745" fg:w="2"/><text x="75.4655%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="75.3017%" y="325" width="0.0431%" height="15" fill="rgb(250,143,38)" fg:x="1747" fg:w="1"/><text x="75.5517%" y="335.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="75.3017%" y="309" width="0.0431%" height="15" fill="rgb(248,25,0)" fg:x="1747" fg:w="1"/><text x="75.5517%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (94 samples, 4.05%)</title><rect x="71.3362%" y="485" width="4.0517%" height="15" fill="rgb(206,152,27)" fg:x="1655" fg:w="94"/><text x="71.5862%" y="495.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (94 samples, 4.05%)</title><rect x="71.3362%" y="469" width="4.0517%" height="15" fill="rgb(240,77,30)" fg:x="1655" fg:w="94"/><text x="71.5862%" y="479.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (94 samples, 4.05%)</title><rect x="71.3362%" y="453" width="4.0517%" height="15" fill="rgb(231,5,3)" fg:x="1655" fg:w="94"/><text x="71.5862%" y="463.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (93 samples, 4.01%)</title><rect x="71.3793%" y="437" width="4.0086%" height="15" fill="rgb(207,226,32)" fg:x="1656" fg:w="93"/><text x="71.6293%" y="447.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (2 samples, 0.09%)</title><rect x="75.3017%" y="421" width="0.0862%" height="15" fill="rgb(222,207,47)" fg:x="1747" fg:w="2"/><text x="75.5517%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (2 samples, 0.09%)</title><rect x="75.3017%" y="405" width="0.0862%" height="15" fill="rgb(229,115,45)" fg:x="1747" fg:w="2"/><text x="75.5517%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (2 samples, 0.09%)</title><rect x="75.3017%" y="389" width="0.0862%" height="15" fill="rgb(224,191,6)" fg:x="1747" fg:w="2"/><text x="75.5517%" y="399.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.09%)</title><rect x="75.3017%" y="373" width="0.0862%" height="15" fill="rgb(230,227,24)" fg:x="1747" fg:w="2"/><text x="75.5517%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.09%)</title><rect x="75.3017%" y="357" width="0.0862%" height="15" fill="rgb(228,80,19)" fg:x="1747" fg:w="2"/><text x="75.5517%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.09%)</title><rect x="75.3017%" y="341" width="0.0862%" height="15" fill="rgb(247,229,0)" fg:x="1747" fg:w="2"/><text x="75.5517%" y="351.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;[T]&gt;::slice_from_raw_parts (1 samples, 0.04%)</title><rect x="75.3448%" y="325" width="0.0431%" height="15" fill="rgb(237,194,15)" fg:x="1748" fg:w="1"/><text x="75.5948%" y="335.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="75.3448%" y="309" width="0.0431%" height="15" fill="rgb(219,203,20)" fg:x="1748" fg:w="1"/><text x="75.5948%" y="319.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.04%)</title><rect x="75.3448%" y="293" width="0.0431%" height="15" fill="rgb(234,128,8)" fg:x="1748" fg:w="1"/><text x="75.5948%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.09%)</title><rect x="75.5603%" y="469" width="0.0862%" height="15" fill="rgb(248,202,8)" fg:x="1753" fg:w="2"/><text x="75.8103%" y="479.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.09%)</title><rect x="75.5603%" y="453" width="0.0862%" height="15" fill="rgb(206,104,37)" fg:x="1753" fg:w="2"/><text x="75.8103%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.04%)</title><rect x="75.6466%" y="469" width="0.0431%" height="15" fill="rgb(223,8,27)" fg:x="1755" fg:w="1"/><text x="75.8966%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.04%)</title><rect x="75.7328%" y="453" width="0.0431%" height="15" fill="rgb(216,217,28)" fg:x="1757" fg:w="1"/><text x="75.9828%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (5 samples, 0.22%)</title><rect x="75.7759%" y="453" width="0.2155%" height="15" fill="rgb(249,199,1)" fg:x="1758" fg:w="5"/><text x="76.0259%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (4 samples, 0.17%)</title><rect x="75.8190%" y="437" width="0.1724%" height="15" fill="rgb(240,85,17)" fg:x="1759" fg:w="4"/><text x="76.0690%" y="447.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (4 samples, 0.17%)</title><rect x="75.8190%" y="421" width="0.1724%" height="15" fill="rgb(206,108,45)" fg:x="1759" fg:w="4"/><text x="76.0690%" y="431.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (3 samples, 0.13%)</title><rect x="75.8621%" y="405" width="0.1293%" height="15" fill="rgb(245,210,41)" fg:x="1760" fg:w="3"/><text x="76.1121%" y="415.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="75.9483%" y="389" width="0.0431%" height="15" fill="rgb(206,13,37)" fg:x="1762" fg:w="1"/><text x="76.1983%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (19 samples, 0.82%)</title><rect x="75.6897%" y="469" width="0.8190%" height="15" fill="rgb(250,61,18)" fg:x="1756" fg:w="19"/><text x="75.9397%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (12 samples, 0.52%)</title><rect x="75.9914%" y="453" width="0.5172%" height="15" fill="rgb(235,172,48)" fg:x="1763" fg:w="12"/><text x="76.2414%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (12 samples, 0.52%)</title><rect x="75.9914%" y="437" width="0.5172%" height="15" fill="rgb(249,201,17)" fg:x="1763" fg:w="12"/><text x="76.2414%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::fix_insert_slot (1 samples, 0.04%)</title><rect x="76.5086%" y="469" width="0.0431%" height="15" fill="rgb(219,208,6)" fg:x="1775" fg:w="1"/><text x="76.7586%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::is_bucket_full (1 samples, 0.04%)</title><rect x="76.5086%" y="453" width="0.0431%" height="15" fill="rgb(248,31,23)" fg:x="1775" fg:w="1"/><text x="76.7586%" y="463.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.04%)</title><rect x="76.5086%" y="437" width="0.0431%" height="15" fill="rgb(245,15,42)" fg:x="1775" fg:w="1"/><text x="76.7586%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (1 samples, 0.04%)</title><rect x="76.7672%" y="437" width="0.0431%" height="15" fill="rgb(222,217,39)" fg:x="1781" fg:w="1"/><text x="77.0172%" y="447.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (9 samples, 0.39%)</title><rect x="77.1983%" y="405" width="0.3879%" height="15" fill="rgb(210,219,27)" fg:x="1791" fg:w="9"/><text x="77.4483%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (6 samples, 0.26%)</title><rect x="77.3276%" y="389" width="0.2586%" height="15" fill="rgb(252,166,36)" fg:x="1794" fg:w="6"/><text x="77.5776%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (5 samples, 0.22%)</title><rect x="77.3707%" y="373" width="0.2155%" height="15" fill="rgb(245,132,34)" fg:x="1795" fg:w="5"/><text x="77.6207%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (5 samples, 0.22%)</title><rect x="77.3707%" y="357" width="0.2155%" height="15" fill="rgb(236,54,3)" fg:x="1795" fg:w="5"/><text x="77.6207%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::abs_diff (1 samples, 0.04%)</title><rect x="77.6293%" y="373" width="0.0431%" height="15" fill="rgb(241,173,43)" fg:x="1801" fg:w="1"/><text x="77.8793%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.09%)</title><rect x="77.6724%" y="373" width="0.0862%" height="15" fill="rgb(215,190,9)" fg:x="1802" fg:w="2"/><text x="77.9224%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (29 samples, 1.25%)</title><rect x="76.5517%" y="469" width="1.2500%" height="15" fill="rgb(242,101,16)" fg:x="1776" fg:w="29"/><text x="76.8017%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (29 samples, 1.25%)</title><rect x="76.5517%" y="453" width="1.2500%" height="15" fill="rgb(223,190,21)" fg:x="1776" fg:w="29"/><text x="76.8017%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.99%)</title><rect x="76.8103%" y="437" width="0.9914%" height="15" fill="rgb(215,228,25)" fg:x="1782" fg:w="23"/><text x="77.0603%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (22 samples, 0.95%)</title><rect x="76.8534%" y="421" width="0.9483%" height="15" fill="rgb(225,36,22)" fg:x="1783" fg:w="22"/><text x="77.1034%" y="431.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (5 samples, 0.22%)</title><rect x="77.5862%" y="405" width="0.2155%" height="15" fill="rgb(251,106,46)" fg:x="1800" fg:w="5"/><text x="77.8362%" y="415.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (5 samples, 0.22%)</title><rect x="77.5862%" y="389" width="0.2155%" height="15" fill="rgb(208,90,1)" fg:x="1800" fg:w="5"/><text x="77.8362%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::addr (1 samples, 0.04%)</title><rect x="77.7586%" y="373" width="0.0431%" height="15" fill="rgb(243,10,4)" fg:x="1804" fg:w="1"/><text x="78.0086%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (2 samples, 0.09%)</title><rect x="78.0172%" y="453" width="0.0862%" height="15" fill="rgb(212,137,27)" fg:x="1810" fg:w="2"/><text x="78.2672%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.30%)</title><rect x="78.1034%" y="453" width="0.3017%" height="15" fill="rgb(231,220,49)" fg:x="1812" fg:w="7"/><text x="78.3534%" y="463.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.04%)</title><rect x="78.3621%" y="437" width="0.0431%" height="15" fill="rgb(237,96,20)" fg:x="1818" fg:w="1"/><text x="78.6121%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (20 samples, 0.86%)</title><rect x="77.8017%" y="469" width="0.8621%" height="15" fill="rgb(239,229,30)" fg:x="1805" fg:w="20"/><text x="78.0517%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (6 samples, 0.26%)</title><rect x="78.4052%" y="453" width="0.2586%" height="15" fill="rgb(219,65,33)" fg:x="1819" fg:w="6"/><text x="78.6552%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (6 samples, 0.26%)</title><rect x="78.4052%" y="437" width="0.2586%" height="15" fill="rgb(243,134,7)" fg:x="1819" fg:w="6"/><text x="78.6552%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (5 samples, 0.22%)</title><rect x="78.7931%" y="437" width="0.2155%" height="15" fill="rgb(216,177,54)" fg:x="1828" fg:w="5"/><text x="79.0431%" y="447.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.04%)</title><rect x="78.9655%" y="421" width="0.0431%" height="15" fill="rgb(211,160,20)" fg:x="1832" fg:w="1"/><text x="79.2155%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (7 samples, 0.30%)</title><rect x="79.0086%" y="437" width="0.3017%" height="15" fill="rgb(239,85,39)" fg:x="1833" fg:w="7"/><text x="79.2586%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (197 samples, 8.49%)</title><rect x="71.3362%" y="501" width="8.4914%" height="15" fill="rgb(232,125,22)" fg:x="1655" fg:w="197"/><text x="71.5862%" y="511.50">hashbrown::r..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (103 samples, 4.44%)</title><rect x="75.3879%" y="485" width="4.4397%" height="15" fill="rgb(244,57,34)" fg:x="1749" fg:w="103"/><text x="75.6379%" y="495.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (27 samples, 1.16%)</title><rect x="78.6638%" y="469" width="1.1638%" height="15" fill="rgb(214,203,32)" fg:x="1825" fg:w="27"/><text x="78.9138%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (27 samples, 1.16%)</title><rect x="78.6638%" y="453" width="1.1638%" height="15" fill="rgb(207,58,43)" fg:x="1825" fg:w="27"/><text x="78.9138%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (12 samples, 0.52%)</title><rect x="79.3103%" y="437" width="0.5172%" height="15" fill="rgb(215,193,15)" fg:x="1840" fg:w="12"/><text x="79.5603%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (12 samples, 0.52%)</title><rect x="79.3103%" y="421" width="0.5172%" height="15" fill="rgb(232,15,44)" fg:x="1840" fg:w="12"/><text x="79.5603%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (3 samples, 0.13%)</title><rect x="79.8276%" y="469" width="0.1293%" height="15" fill="rgb(212,3,48)" fg:x="1852" fg:w="3"/><text x="80.0776%" y="479.50"></text></g><g><title>jsode::parser::JsonCursor::create_prop_block (313 samples, 13.49%)</title><rect x="66.5517%" y="549" width="13.4914%" height="15" fill="rgb(218,128,7)" fg:x="1544" fg:w="313"/><text x="66.8017%" y="559.50">jsode::parser::JsonC..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (301 samples, 12.97%)</title><rect x="67.0690%" y="533" width="12.9741%" height="15" fill="rgb(226,216,39)" fg:x="1556" fg:w="301"/><text x="67.3190%" y="543.50">std::collections::h..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (301 samples, 12.97%)</title><rect x="67.0690%" y="517" width="12.9741%" height="15" fill="rgb(243,47,51)" fg:x="1556" fg:w="301"/><text x="67.3190%" y="527.50">hashbrown::map::Has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (5 samples, 0.22%)</title><rect x="79.8276%" y="501" width="0.2155%" height="15" fill="rgb(241,183,40)" fg:x="1852" fg:w="5"/><text x="80.0776%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5 samples, 0.22%)</title><rect x="79.8276%" y="485" width="0.2155%" height="15" fill="rgb(231,217,32)" fg:x="1852" fg:w="5"/><text x="80.0776%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::data_end (2 samples, 0.09%)</title><rect x="79.9569%" y="469" width="0.0862%" height="15" fill="rgb(229,61,38)" fg:x="1855" fg:w="2"/><text x="80.2069%" y="479.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.09%)</title><rect x="79.9569%" y="453" width="0.0862%" height="15" fill="rgb(225,210,5)" fg:x="1855" fg:w="2"/><text x="80.2069%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.04%)</title><rect x="80.0000%" y="437" width="0.0431%" height="15" fill="rgb(231,79,45)" fg:x="1856" fg:w="1"/><text x="80.2500%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_iter_from (1 samples, 0.04%)</title><rect x="80.1724%" y="453" width="0.0431%" height="15" fill="rgb(224,100,7)" fg:x="1860" fg:w="1"/><text x="80.4224%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::into_allocation (1 samples, 0.04%)</title><rect x="80.1724%" y="437" width="0.0431%" height="15" fill="rgb(241,198,18)" fg:x="1860" fg:w="1"/><text x="80.4224%" y="447.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="80.1724%" y="421" width="0.0431%" height="15" fill="rgb(252,97,53)" fg:x="1860" fg:w="1"/><text x="80.4224%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::load_aligned (2 samples, 0.09%)</title><rect x="80.2586%" y="405" width="0.0862%" height="15" fill="rgb(220,88,7)" fg:x="1862" fg:w="2"/><text x="80.5086%" y="415.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_load_si128 (1 samples, 0.04%)</title><rect x="80.3017%" y="389" width="0.0431%" height="15" fill="rgb(213,176,14)" fg:x="1863" fg:w="1"/><text x="80.5517%" y="399.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (3 samples, 0.13%)</title><rect x="80.3879%" y="357" width="0.1293%" height="15" fill="rgb(246,73,7)" fg:x="1865" fg:w="3"/><text x="80.6379%" y="367.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (7 samples, 0.30%)</title><rect x="80.2586%" y="421" width="0.3017%" height="15" fill="rgb(245,64,36)" fg:x="1862" fg:w="7"/><text x="80.5086%" y="431.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (5 samples, 0.22%)</title><rect x="80.3448%" y="405" width="0.2155%" height="15" fill="rgb(245,80,10)" fg:x="1864" fg:w="5"/><text x="80.5948%" y="415.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (4 samples, 0.17%)</title><rect x="80.3879%" y="389" width="0.1724%" height="15" fill="rgb(232,107,50)" fg:x="1865" fg:w="4"/><text x="80.6379%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.17%)</title><rect x="80.3879%" y="373" width="0.1724%" height="15" fill="rgb(253,3,0)" fg:x="1865" fg:w="4"/><text x="80.6379%" y="383.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.04%)</title><rect x="80.5172%" y="357" width="0.0431%" height="15" fill="rgb(212,99,53)" fg:x="1868" fg:w="1"/><text x="80.7672%" y="367.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.52%)</title><rect x="80.0862%" y="485" width="0.5172%" height="15" fill="rgb(249,111,54)" fg:x="1858" fg:w="12"/><text x="80.3362%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (11 samples, 0.47%)</title><rect x="80.1293%" y="469" width="0.4741%" height="15" fill="rgb(249,55,30)" fg:x="1859" fg:w="11"/><text x="80.3793%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (9 samples, 0.39%)</title><rect x="80.2155%" y="453" width="0.3879%" height="15" fill="rgb(237,47,42)" fg:x="1861" fg:w="9"/><text x="80.4655%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (9 samples, 0.39%)</title><rect x="80.2155%" y="437" width="0.3879%" height="15" fill="rgb(211,20,18)" fg:x="1861" fg:w="9"/><text x="80.4655%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::data_end (1 samples, 0.04%)</title><rect x="80.5603%" y="421" width="0.0431%" height="15" fill="rgb(231,203,46)" fg:x="1869" fg:w="1"/><text x="80.8103%" y="431.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (15 samples, 0.65%)</title><rect x="80.0862%" y="501" width="0.6466%" height="15" fill="rgb(237,142,3)" fg:x="1858" fg:w="15"/><text x="80.3362%" y="511.50"></text></g><g><title>[libc.so.6] (3 samples, 0.13%)</title><rect x="80.6034%" y="485" width="0.1293%" height="15" fill="rgb(241,107,1)" fg:x="1870" fg:w="3"/><text x="80.8534%" y="495.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.13%)</title><rect x="81.0776%" y="421" width="0.1293%" height="15" fill="rgb(229,83,13)" fg:x="1881" fg:w="3"/><text x="81.3276%" y="431.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (1 samples, 0.04%)</title><rect x="81.5517%" y="373" width="0.0431%" height="15" fill="rgb(241,91,40)" fg:x="1892" fg:w="1"/><text x="81.8017%" y="383.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.17%)</title><rect x="81.5948%" y="373" width="0.1724%" height="15" fill="rgb(225,3,45)" fg:x="1893" fg:w="4"/><text x="81.8448%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.26%)</title><rect x="81.7672%" y="373" width="0.2586%" height="15" fill="rgb(244,223,14)" fg:x="1897" fg:w="6"/><text x="82.0172%" y="383.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (3 samples, 0.13%)</title><rect x="81.8966%" y="357" width="0.1293%" height="15" fill="rgb(224,124,37)" fg:x="1900" fg:w="3"/><text x="82.1466%" y="367.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (3 samples, 0.13%)</title><rect x="81.8966%" y="341" width="0.1293%" height="15" fill="rgb(251,171,30)" fg:x="1900" fg:w="3"/><text x="82.1466%" y="351.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (3 samples, 0.13%)</title><rect x="81.8966%" y="325" width="0.1293%" height="15" fill="rgb(236,46,54)" fg:x="1900" fg:w="3"/><text x="82.1466%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="81.9828%" y="309" width="0.0431%" height="15" fill="rgb(245,213,5)" fg:x="1902" fg:w="1"/><text x="82.2328%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.60%)</title><rect x="81.4655%" y="389" width="0.6034%" height="15" fill="rgb(230,144,27)" fg:x="1890" fg:w="14"/><text x="81.7155%" y="399.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::remove_lowest_bit (1 samples, 0.04%)</title><rect x="82.0259%" y="373" width="0.0431%" height="15" fill="rgb(220,86,6)" fg:x="1903" fg:w="1"/><text x="82.2759%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="82.2414%" y="373" width="0.0431%" height="15" fill="rgb(240,20,13)" fg:x="1908" fg:w="1"/><text x="82.4914%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="82.2845%" y="373" width="0.0431%" height="15" fill="rgb(217,89,34)" fg:x="1909" fg:w="1"/><text x="82.5345%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (27 samples, 1.16%)</title><rect x="81.2069%" y="421" width="1.1638%" height="15" fill="rgb(229,13,5)" fg:x="1884" fg:w="27"/><text x="81.4569%" y="431.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (24 samples, 1.03%)</title><rect x="81.3362%" y="405" width="1.0345%" height="15" fill="rgb(244,67,35)" fg:x="1887" fg:w="24"/><text x="81.5862%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (7 samples, 0.30%)</title><rect x="82.0690%" y="389" width="0.3017%" height="15" fill="rgb(221,40,2)" fg:x="1904" fg:w="7"/><text x="82.3190%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.04%)</title><rect x="82.3276%" y="373" width="0.0431%" height="15" fill="rgb(237,157,21)" fg:x="1910" fg:w="1"/><text x="82.5776%" y="383.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked::precondition_check (1 samples, 0.04%)</title><rect x="82.3276%" y="357" width="0.0431%" height="15" fill="rgb(222,94,11)" fg:x="1910" fg:w="1"/><text x="82.5776%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (1 samples, 0.04%)</title><rect x="82.3276%" y="341" width="0.0431%" height="15" fill="rgb(249,113,6)" fg:x="1910" fg:w="1"/><text x="82.5776%" y="351.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::read (6 samples, 0.26%)</title><rect x="82.3707%" y="405" width="0.2586%" height="15" fill="rgb(238,137,36)" fg:x="1911" fg:w="6"/><text x="82.6207%" y="415.50"></text></g><g><title>core::ptr::read (4 samples, 0.17%)</title><rect x="82.4569%" y="389" width="0.1724%" height="15" fill="rgb(210,102,26)" fg:x="1913" fg:w="4"/><text x="82.7069%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="82.7586%" y="389" width="0.0431%" height="15" fill="rgb(218,30,30)" fg:x="1920" fg:w="1"/><text x="83.0086%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="82.7586%" y="373" width="0.0431%" height="15" fill="rgb(214,67,26)" fg:x="1920" fg:w="1"/><text x="83.0086%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 1.98%)</title><rect x="80.8621%" y="437" width="1.9828%" height="15" fill="rgb(251,9,53)" fg:x="1876" fg:w="46"/><text x="81.1121%" y="447.50">&lt;..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::read (11 samples, 0.47%)</title><rect x="82.3707%" y="421" width="0.4741%" height="15" fill="rgb(228,204,25)" fg:x="1911" fg:w="11"/><text x="82.6207%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (5 samples, 0.22%)</title><rect x="82.6293%" y="405" width="0.2155%" height="15" fill="rgb(207,153,8)" fg:x="1917" fg:w="5"/><text x="82.8793%" y="415.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="82.8017%" y="389" width="0.0431%" height="15" fill="rgb(242,9,16)" fg:x="1921" fg:w="1"/><text x="83.0517%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (12 samples, 0.52%)</title><rect x="83.1466%" y="309" width="0.5172%" height="15" fill="rgb(217,211,10)" fg:x="1929" fg:w="12"/><text x="83.3966%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="83.6207%" y="293" width="0.0431%" height="15" fill="rgb(219,228,52)" fg:x="1940" fg:w="1"/><text x="83.8707%" y="303.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (56 samples, 2.41%)</title><rect x="82.9741%" y="357" width="2.4138%" height="15" fill="rgb(231,92,29)" fg:x="1925" fg:w="56"/><text x="83.2241%" y="367.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (56 samples, 2.41%)</title><rect x="82.9741%" y="341" width="2.4138%" height="15" fill="rgb(232,8,23)" fg:x="1925" fg:w="56"/><text x="83.2241%" y="351.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (56 samples, 2.41%)</title><rect x="82.9741%" y="325" width="2.4138%" height="15" fill="rgb(216,211,34)" fg:x="1925" fg:w="56"/><text x="83.2241%" y="335.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (40 samples, 1.72%)</title><rect x="83.6638%" y="309" width="1.7241%" height="15" fill="rgb(236,151,0)" fg:x="1941" fg:w="40"/><text x="83.9138%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (7 samples, 0.30%)</title><rect x="85.0862%" y="293" width="0.3017%" height="15" fill="rgb(209,168,3)" fg:x="1974" fg:w="7"/><text x="85.3362%" y="303.50"></text></g><g><title>[libc.so.6] (4 samples, 0.17%)</title><rect x="85.4310%" y="341" width="0.1724%" height="15" fill="rgb(208,129,28)" fg:x="1982" fg:w="4"/><text x="85.6810%" y="351.50"></text></g><g><title>[libc.so.6] (6 samples, 0.26%)</title><rect x="85.6034%" y="325" width="0.2586%" height="15" fill="rgb(229,78,22)" fg:x="1986" fg:w="6"/><text x="85.8534%" y="335.50"></text></g><g><title>[libc.so.6] (13 samples, 0.56%)</title><rect x="85.9483%" y="309" width="0.5603%" height="15" fill="rgb(228,187,13)" fg:x="1994" fg:w="13"/><text x="86.1983%" y="319.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (27 samples, 1.16%)</title><rect x="85.3879%" y="357" width="1.1638%" height="15" fill="rgb(240,119,24)" fg:x="1981" fg:w="27"/><text x="85.6379%" y="367.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (22 samples, 0.95%)</title><rect x="85.6034%" y="341" width="0.9483%" height="15" fill="rgb(209,194,42)" fg:x="1986" fg:w="22"/><text x="85.8534%" y="351.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (16 samples, 0.69%)</title><rect x="85.8621%" y="325" width="0.6897%" height="15" fill="rgb(247,200,46)" fg:x="1992" fg:w="16"/><text x="86.1121%" y="335.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="86.5086%" y="309" width="0.0431%" height="15" fill="rgb(218,76,16)" fg:x="2007" fg:w="1"/><text x="86.7586%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.30%)</title><rect x="86.7672%" y="261" width="0.3017%" height="15" fill="rgb(225,21,48)" fg:x="2013" fg:w="7"/><text x="87.0172%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="86.9828%" y="245" width="0.0862%" height="15" fill="rgb(239,223,50)" fg:x="2018" fg:w="2"/><text x="87.2328%" y="255.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.13%)</title><rect x="87.0690%" y="261" width="0.1293%" height="15" fill="rgb(244,45,21)" fg:x="2020" fg:w="3"/><text x="87.3190%" y="271.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (13 samples, 0.56%)</title><rect x="87.4569%" y="229" width="0.5603%" height="15" fill="rgb(232,33,43)" fg:x="2029" fg:w="13"/><text x="87.7069%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (11 samples, 0.47%)</title><rect x="87.5431%" y="213" width="0.4741%" height="15" fill="rgb(209,8,3)" fg:x="2031" fg:w="11"/><text x="87.7931%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (11 samples, 0.47%)</title><rect x="87.5431%" y="197" width="0.4741%" height="15" fill="rgb(214,25,53)" fg:x="2031" fg:w="11"/><text x="87.7931%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (11 samples, 0.47%)</title><rect x="87.5431%" y="181" width="0.4741%" height="15" fill="rgb(254,186,54)" fg:x="2031" fg:w="11"/><text x="87.7931%" y="191.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 1.55%)</title><rect x="86.5948%" y="309" width="1.5517%" height="15" fill="rgb(208,174,49)" fg:x="2009" fg:w="36"/><text x="86.8448%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (35 samples, 1.51%)</title><rect x="86.6379%" y="293" width="1.5086%" height="15" fill="rgb(233,191,51)" fg:x="2010" fg:w="35"/><text x="86.8879%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (35 samples, 1.51%)</title><rect x="86.6379%" y="277" width="1.5086%" height="15" fill="rgb(222,134,10)" fg:x="2010" fg:w="35"/><text x="86.8879%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (22 samples, 0.95%)</title><rect x="87.1983%" y="261" width="0.9483%" height="15" fill="rgb(230,226,20)" fg:x="2023" fg:w="22"/><text x="87.4483%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (21 samples, 0.91%)</title><rect x="87.2414%" y="245" width="0.9052%" height="15" fill="rgb(251,111,25)" fg:x="2024" fg:w="21"/><text x="87.4914%" y="255.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (3 samples, 0.13%)</title><rect x="88.0172%" y="229" width="0.1293%" height="15" fill="rgb(224,40,46)" fg:x="2042" fg:w="3"/><text x="88.2672%" y="239.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (3 samples, 0.13%)</title><rect x="88.0172%" y="213" width="0.1293%" height="15" fill="rgb(236,108,47)" fg:x="2042" fg:w="3"/><text x="88.2672%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (2 samples, 0.09%)</title><rect x="88.0603%" y="197" width="0.0862%" height="15" fill="rgb(234,93,0)" fg:x="2043" fg:w="2"/><text x="88.3103%" y="207.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="88.1034%" y="181" width="0.0431%" height="15" fill="rgb(224,213,32)" fg:x="2044" fg:w="1"/><text x="88.3534%" y="191.50"></text></g><g><title>hashbrown::map::make_hash (122 samples, 5.26%)</title><rect x="82.9310%" y="389" width="5.2586%" height="15" fill="rgb(251,11,48)" fg:x="1924" fg:w="122"/><text x="83.1810%" y="399.50">hashbr..</text></g><g><title>core::hash::BuildHasher::hash_one (122 samples, 5.26%)</title><rect x="82.9310%" y="373" width="5.2586%" height="15" fill="rgb(236,173,5)" fg:x="1924" fg:w="122"/><text x="83.1810%" y="383.50">core::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (38 samples, 1.64%)</title><rect x="86.5517%" y="357" width="1.6379%" height="15" fill="rgb(230,95,12)" fg:x="2008" fg:w="38"/><text x="86.8017%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (38 samples, 1.64%)</title><rect x="86.5517%" y="341" width="1.6379%" height="15" fill="rgb(232,209,1)" fg:x="2008" fg:w="38"/><text x="86.8017%" y="351.50"></text></g><g><title>core::hash::Hasher::write_usize (37 samples, 1.59%)</title><rect x="86.5948%" y="325" width="1.5948%" height="15" fill="rgb(232,6,1)" fg:x="2009" fg:w="37"/><text x="86.8448%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (1 samples, 0.04%)</title><rect x="88.1466%" y="309" width="0.0431%" height="15" fill="rgb(210,224,50)" fg:x="2045" fg:w="1"/><text x="88.3966%" y="319.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMask as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.04%)</title><rect x="88.6207%" y="357" width="0.0431%" height="15" fill="rgb(228,127,35)" fg:x="2056" fg:w="1"/><text x="88.8707%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.17%)</title><rect x="88.6638%" y="357" width="0.1724%" height="15" fill="rgb(245,102,45)" fg:x="2057" fg:w="4"/><text x="88.9138%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.09%)</title><rect x="88.7500%" y="341" width="0.0862%" height="15" fill="rgb(214,1,49)" fg:x="2059" fg:w="2"/><text x="89.0000%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.09%)</title><rect x="88.8362%" y="357" width="0.0862%" height="15" fill="rgb(226,163,40)" fg:x="2061" fg:w="2"/><text x="89.0862%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.04%)</title><rect x="88.8793%" y="341" width="0.0431%" height="15" fill="rgb(239,212,28)" fg:x="2062" fg:w="1"/><text x="89.1293%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_unchecked (1 samples, 0.04%)</title><rect x="88.9224%" y="357" width="0.0431%" height="15" fill="rgb(220,20,13)" fg:x="2063" fg:w="1"/><text x="89.1724%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot::_{{closure}} (1 samples, 0.04%)</title><rect x="88.9655%" y="357" width="0.0431%" height="15" fill="rgb(210,164,35)" fg:x="2064" fg:w="1"/><text x="89.2155%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (1 samples, 0.04%)</title><rect x="88.9655%" y="341" width="0.0431%" height="15" fill="rgb(248,109,41)" fg:x="2064" fg:w="1"/><text x="89.2155%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (1 samples, 0.04%)</title><rect x="88.9655%" y="325" width="0.0431%" height="15" fill="rgb(238,23,50)" fg:x="2064" fg:w="1"/><text x="89.2155%" y="335.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="88.9655%" y="309" width="0.0431%" height="15" fill="rgb(211,48,49)" fg:x="2064" fg:w="1"/><text x="89.2155%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.04%)</title><rect x="89.0948%" y="341" width="0.0431%" height="15" fill="rgb(223,36,21)" fg:x="2067" fg:w="1"/><text x="89.3448%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.26%)</title><rect x="89.1379%" y="341" width="0.2586%" height="15" fill="rgb(207,123,46)" fg:x="2068" fg:w="6"/><text x="89.3879%" y="351.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (4 samples, 0.17%)</title><rect x="89.2241%" y="325" width="0.1724%" height="15" fill="rgb(240,218,32)" fg:x="2070" fg:w="4"/><text x="89.4741%" y="335.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (4 samples, 0.17%)</title><rect x="89.2241%" y="309" width="0.1724%" height="15" fill="rgb(252,5,43)" fg:x="2070" fg:w="4"/><text x="89.4741%" y="319.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::get (3 samples, 0.13%)</title><rect x="89.2672%" y="293" width="0.1293%" height="15" fill="rgb(252,84,19)" fg:x="2071" fg:w="3"/><text x="89.5172%" y="303.50"></text></g><g><title>core::num::nonzero::NonZero&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="89.3534%" y="277" width="0.0431%" height="15" fill="rgb(243,152,39)" fg:x="2073" fg:w="1"/><text x="89.6034%" y="287.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (3 samples, 0.13%)</title><rect x="89.9569%" y="309" width="0.1293%" height="15" fill="rgb(234,160,15)" fg:x="2087" fg:w="3"/><text x="90.2069%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (26 samples, 1.12%)</title><rect x="89.0086%" y="357" width="1.1207%" height="15" fill="rgb(237,34,20)" fg:x="2065" fg:w="26"/><text x="89.2586%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (17 samples, 0.73%)</title><rect x="89.3966%" y="341" width="0.7328%" height="15" fill="rgb(229,97,13)" fg:x="2074" fg:w="17"/><text x="89.6466%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.73%)</title><rect x="89.3966%" y="325" width="0.7328%" height="15" fill="rgb(234,71,50)" fg:x="2074" fg:w="17"/><text x="89.6466%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.04%)</title><rect x="90.0862%" y="309" width="0.0431%" height="15" fill="rgb(253,155,4)" fg:x="2090" fg:w="1"/><text x="90.3362%" y="319.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (2 samples, 0.09%)</title><rect x="90.1293%" y="357" width="0.0862%" height="15" fill="rgb(222,185,37)" fg:x="2091" fg:w="2"/><text x="90.3793%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="90.2155%" y="357" width="0.0431%" height="15" fill="rgb(251,177,13)" fg:x="2093" fg:w="1"/><text x="90.4655%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_undefined_si128 (1 samples, 0.04%)</title><rect x="90.5172%" y="325" width="0.0431%" height="15" fill="rgb(250,179,40)" fg:x="2100" fg:w="1"/><text x="90.7672%" y="335.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (6 samples, 0.26%)</title><rect x="90.9052%" y="293" width="0.2586%" height="15" fill="rgb(242,44,2)" fg:x="2109" fg:w="6"/><text x="91.1552%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (5 samples, 0.22%)</title><rect x="90.9483%" y="277" width="0.2155%" height="15" fill="rgb(216,177,13)" fg:x="2110" fg:w="5"/><text x="91.1983%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::is_power_of_two (4 samples, 0.17%)</title><rect x="90.9914%" y="261" width="0.1724%" height="15" fill="rgb(216,106,43)" fg:x="2111" fg:w="4"/><text x="91.2414%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::count_ones (4 samples, 0.17%)</title><rect x="90.9914%" y="245" width="0.1724%" height="15" fill="rgb(216,183,2)" fg:x="2111" fg:w="4"/><text x="91.2414%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (24 samples, 1.03%)</title><rect x="90.2586%" y="357" width="1.0345%" height="15" fill="rgb(249,75,3)" fg:x="2094" fg:w="24"/><text x="90.5086%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (23 samples, 0.99%)</title><rect x="90.3017%" y="341" width="0.9914%" height="15" fill="rgb(219,67,39)" fg:x="2095" fg:w="23"/><text x="90.5517%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (17 samples, 0.73%)</title><rect x="90.5603%" y="325" width="0.7328%" height="15" fill="rgb(253,228,2)" fg:x="2101" fg:w="17"/><text x="90.8103%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (17 samples, 0.73%)</title><rect x="90.5603%" y="309" width="0.7328%" height="15" fill="rgb(235,138,27)" fg:x="2101" fg:w="17"/><text x="90.8103%" y="319.50"></text></g><g><title>core::intrinsics::is_nonoverlapping (3 samples, 0.13%)</title><rect x="91.1638%" y="293" width="0.1293%" height="15" fill="rgb(236,97,51)" fg:x="2115" fg:w="3"/><text x="91.4138%" y="303.50"></text></g><g><title>core::intrinsics::is_nonoverlapping::runtime (2 samples, 0.09%)</title><rect x="91.2069%" y="277" width="0.0862%" height="15" fill="rgb(240,80,30)" fg:x="2116" fg:w="2"/><text x="91.4569%" y="287.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_mul (1 samples, 0.04%)</title><rect x="91.2500%" y="261" width="0.0431%" height="15" fill="rgb(230,178,19)" fg:x="2117" fg:w="1"/><text x="91.5000%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_mul (1 samples, 0.04%)</title><rect x="91.2500%" y="245" width="0.0431%" height="15" fill="rgb(210,190,27)" fg:x="2117" fg:w="1"/><text x="91.5000%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (11 samples, 0.47%)</title><rect x="91.4655%" y="341" width="0.4741%" height="15" fill="rgb(222,107,31)" fg:x="2122" fg:w="11"/><text x="91.7155%" y="351.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (5 samples, 0.22%)</title><rect x="91.7241%" y="325" width="0.2155%" height="15" fill="rgb(216,127,34)" fg:x="2128" fg:w="5"/><text x="91.9741%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.43%)</title><rect x="91.9397%" y="341" width="0.4310%" height="15" fill="rgb(234,116,52)" fg:x="2133" fg:w="10"/><text x="92.1897%" y="351.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (1 samples, 0.04%)</title><rect x="92.3276%" y="325" width="0.0431%" height="15" fill="rgb(222,124,15)" fg:x="2142" fg:w="1"/><text x="92.5776%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (34 samples, 1.47%)</title><rect x="91.2931%" y="357" width="1.4655%" height="15" fill="rgb(231,179,28)" fg:x="2118" fg:w="34"/><text x="91.5431%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (9 samples, 0.39%)</title><rect x="92.3707%" y="341" width="0.3879%" height="15" fill="rgb(226,93,45)" fg:x="2143" fg:w="9"/><text x="92.6207%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (8 samples, 0.34%)</title><rect x="92.4138%" y="325" width="0.3448%" height="15" fill="rgb(215,8,51)" fg:x="2144" fg:w="8"/><text x="92.6638%" y="335.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.09%)</title><rect x="92.6724%" y="309" width="0.0862%" height="15" fill="rgb(223,106,5)" fg:x="2150" fg:w="2"/><text x="92.9224%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_cmpeq_epi8 (8 samples, 0.34%)</title><rect x="93.0172%" y="325" width="0.3448%" height="15" fill="rgb(250,191,5)" fg:x="2158" fg:w="8"/><text x="93.2672%" y="335.50"></text></g><g><title>core::core_arch::x86::m128iExt::as_i8x16 (2 samples, 0.09%)</title><rect x="93.2759%" y="309" width="0.0862%" height="15" fill="rgb(242,132,44)" fg:x="2164" fg:w="2"/><text x="93.5259%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (4 samples, 0.17%)</title><rect x="93.3621%" y="325" width="0.1724%" height="15" fill="rgb(251,152,29)" fg:x="2166" fg:w="4"/><text x="93.6121%" y="335.50"></text></g><g><title>core::core_arch::simd::i8x16::splat (1 samples, 0.04%)</title><rect x="93.4914%" y="309" width="0.0431%" height="15" fill="rgb(218,179,5)" fg:x="2169" fg:w="1"/><text x="93.7414%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (138 samples, 5.95%)</title><rect x="88.1897%" y="389" width="5.9483%" height="15" fill="rgb(227,67,19)" fg:x="2046" fg:w="138"/><text x="88.4397%" y="399.50">hashbrow..</text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (137 samples, 5.91%)</title><rect x="88.2328%" y="373" width="5.9052%" height="15" fill="rgb(233,119,31)" fg:x="2047" fg:w="137"/><text x="88.4828%" y="383.50">hashbrow..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (32 samples, 1.38%)</title><rect x="92.7586%" y="357" width="1.3793%" height="15" fill="rgb(241,120,22)" fg:x="2152" fg:w="32"/><text x="93.0086%" y="367.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (32 samples, 1.38%)</title><rect x="92.7586%" y="341" width="1.3793%" height="15" fill="rgb(224,102,30)" fg:x="2152" fg:w="32"/><text x="93.0086%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (14 samples, 0.60%)</title><rect x="93.5345%" y="325" width="0.6034%" height="15" fill="rgb(210,164,37)" fg:x="2170" fg:w="14"/><text x="93.7845%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (14 samples, 0.60%)</title><rect x="93.5345%" y="309" width="0.6034%" height="15" fill="rgb(226,191,16)" fg:x="2170" fg:w="14"/><text x="93.7845%" y="319.50"></text></g><g><title>core::core_arch::simd::i8x16::new (4 samples, 0.17%)</title><rect x="93.9655%" y="293" width="0.1724%" height="15" fill="rgb(214,40,45)" fg:x="2180" fg:w="4"/><text x="94.2155%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (5 samples, 0.22%)</title><rect x="94.3966%" y="357" width="0.2155%" height="15" fill="rgb(244,29,26)" fg:x="2190" fg:w="5"/><text x="94.6466%" y="367.50"></text></g><g><title>core::ptr::write (5 samples, 0.22%)</title><rect x="94.3966%" y="341" width="0.2155%" height="15" fill="rgb(216,16,5)" fg:x="2190" fg:w="5"/><text x="94.6466%" y="351.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (7 samples, 0.30%)</title><rect x="94.3966%" y="373" width="0.3017%" height="15" fill="rgb(249,76,35)" fg:x="2190" fg:w="7"/><text x="94.6466%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.09%)</title><rect x="94.6121%" y="357" width="0.0862%" height="15" fill="rgb(207,11,44)" fg:x="2195" fg:w="2"/><text x="94.8621%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (9 samples, 0.39%)</title><rect x="94.6983%" y="373" width="0.3879%" height="15" fill="rgb(228,190,49)" fg:x="2197" fg:w="9"/><text x="94.9483%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (8 samples, 0.34%)</title><rect x="94.7414%" y="357" width="0.3448%" height="15" fill="rgb(214,173,12)" fg:x="2198" fg:w="8"/><text x="94.9914%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl (6 samples, 0.26%)</title><rect x="95.0862%" y="341" width="0.2586%" height="15" fill="rgb(218,26,35)" fg:x="2206" fg:w="6"/><text x="95.3362%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::ctrl (1 samples, 0.04%)</title><rect x="95.3017%" y="325" width="0.0431%" height="15" fill="rgb(220,200,19)" fg:x="2211" fg:w="1"/><text x="95.5517%" y="335.50"></text></g><g><title>hashbrown::raw::RawTableInner::set_ctrl_h2 (7 samples, 0.30%)</title><rect x="95.0862%" y="357" width="0.3017%" height="15" fill="rgb(239,95,49)" fg:x="2206" fg:w="7"/><text x="95.3362%" y="367.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="95.3448%" y="341" width="0.0431%" height="15" fill="rgb(235,85,53)" fg:x="2212" fg:w="1"/><text x="95.5948%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (292 samples, 12.59%)</title><rect x="82.8448%" y="437" width="12.5862%" height="15" fill="rgb(233,133,31)" fg:x="1922" fg:w="292"/><text x="83.0948%" y="447.50">core::iter::traits:..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend::_{{closure}} (292 samples, 12.59%)</title><rect x="82.8448%" y="421" width="12.5862%" height="15" fill="rgb(218,25,20)" fg:x="1922" fg:w="292"/><text x="83.0948%" y="431.50">&lt;hashbrown::map::Ha..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (292 samples, 12.59%)</title><rect x="82.8448%" y="405" width="12.5862%" height="15" fill="rgb(252,210,38)" fg:x="1922" fg:w="292"/><text x="83.0948%" y="415.50">hashbrown::map::Has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (30 samples, 1.29%)</title><rect x="94.1379%" y="389" width="1.2931%" height="15" fill="rgb(242,134,21)" fg:x="2184" fg:w="30"/><text x="94.3879%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::record_item_insert_at (8 samples, 0.34%)</title><rect x="95.0862%" y="373" width="0.3448%" height="15" fill="rgb(213,28,48)" fg:x="2206" fg:w="8"/><text x="95.3362%" y="383.50"></text></g><g><title>hashbrown::raw::special_is_empty (1 samples, 0.04%)</title><rect x="95.3879%" y="357" width="0.0431%" height="15" fill="rgb(250,196,2)" fg:x="2213" fg:w="1"/><text x="95.6379%" y="367.50"></text></g><g><title>cfree (3 samples, 0.13%)</title><rect x="95.4310%" y="373" width="0.1293%" height="15" fill="rgb(227,5,17)" fg:x="2214" fg:w="3"/><text x="95.6810%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.09%)</title><rect x="95.4741%" y="357" width="0.0862%" height="15" fill="rgb(221,226,24)" fg:x="2215" fg:w="2"/><text x="95.7241%" y="367.50"></text></g><g><title>core::alloc::layout::Layout::align (1 samples, 0.04%)</title><rect x="95.5603%" y="373" width="0.0431%" height="15" fill="rgb(211,5,48)" fg:x="2217" fg:w="1"/><text x="95.8103%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (346 samples, 14.91%)</title><rect x="80.7328%" y="501" width="14.9138%" height="15" fill="rgb(219,150,6)" fg:x="1873" fg:w="346"/><text x="80.9828%" y="511.50">core::iter::traits::ite..</text></g><g><title>&lt;std::collections::hash::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::fold (346 samples, 14.91%)</title><rect x="80.7328%" y="485" width="14.9138%" height="15" fill="rgb(251,46,16)" fg:x="1873" fg:w="346"/><text x="80.9828%" y="495.50">&lt;std::collections::hash..</text></g><g><title>&lt;hashbrown::map::IntoIter&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::fold (346 samples, 14.91%)</title><rect x="80.7328%" y="469" width="14.9138%" height="15" fill="rgb(220,204,40)" fg:x="1873" fg:w="346"/><text x="80.9828%" y="479.50">&lt;hashbrown::map::IntoIt..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (346 samples, 14.91%)</title><rect x="80.7328%" y="453" width="14.9138%" height="15" fill="rgb(211,85,2)" fg:x="1873" fg:w="346"/><text x="80.9828%" y="463.50">core::iter::traits::ite..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawIntoIter&lt;(usize,usize)&gt;&gt; (5 samples, 0.22%)</title><rect x="95.4310%" y="437" width="0.2155%" height="15" fill="rgb(229,17,7)" fg:x="2214" fg:w="5"/><text x="95.6810%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawIntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.22%)</title><rect x="95.4310%" y="421" width="0.2155%" height="15" fill="rgb(239,72,28)" fg:x="2214" fg:w="5"/><text x="95.6810%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.22%)</title><rect x="95.4310%" y="405" width="0.2155%" height="15" fill="rgb(230,47,54)" fg:x="2214" fg:w="5"/><text x="95.6810%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.22%)</title><rect x="95.4310%" y="389" width="0.2155%" height="15" fill="rgb(214,50,8)" fg:x="2214" fg:w="5"/><text x="95.6810%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::size (1 samples, 0.04%)</title><rect x="95.6034%" y="373" width="0.0431%" height="15" fill="rgb(216,198,43)" fg:x="2218" fg:w="1"/><text x="95.8534%" y="383.50"></text></g><g><title>core::mem::swap (1 samples, 0.04%)</title><rect x="95.6897%" y="421" width="0.0431%" height="15" fill="rgb(234,20,35)" fg:x="2220" fg:w="1"/><text x="95.9397%" y="431.50"></text></g><g><title>core::ptr::swap_nonoverlapping (1 samples, 0.04%)</title><rect x="95.6897%" y="405" width="0.0431%" height="15" fill="rgb(254,45,19)" fg:x="2220" fg:w="1"/><text x="95.9397%" y="415.50"></text></g><g><title>core::ptr::swap_nonoverlapping::precondition_check (1 samples, 0.04%)</title><rect x="95.6897%" y="389" width="0.0431%" height="15" fill="rgb(219,14,44)" fg:x="2220" fg:w="1"/><text x="95.9397%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::scopeguard::ScopeGuard&lt;hashbrown::raw::RawTableInner,hashbrown::raw::RawTableInner::prepare_resize&lt;alloc::alloc::Global&gt;::{{closure}}&gt;&gt; (1 samples, 0.04%)</title><rect x="95.7328%" y="421" width="0.0431%" height="15" fill="rgb(217,220,26)" fg:x="2221" fg:w="1"/><text x="95.9828%" y="431.50"></text></g><g><title>&lt;hashbrown::scopeguard::ScopeGuard&lt;T,F&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="95.7328%" y="405" width="0.0431%" height="15" fill="rgb(213,158,28)" fg:x="2221" fg:w="1"/><text x="95.9828%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize::_{{closure}} (1 samples, 0.04%)</title><rect x="95.7328%" y="389" width="0.0431%" height="15" fill="rgb(252,51,52)" fg:x="2221" fg:w="1"/><text x="95.9828%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner::free_buckets (1 samples, 0.04%)</title><rect x="95.7328%" y="373" width="0.0431%" height="15" fill="rgb(246,89,16)" fg:x="2221" fg:w="1"/><text x="95.9828%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner::allocation_info (1 samples, 0.04%)</title><rect x="95.7328%" y="357" width="0.0431%" height="15" fill="rgb(216,158,49)" fg:x="2221" fg:w="1"/><text x="95.9828%" y="367.50"></text></g><g><title>hashbrown::raw::TableLayout::calculate_layout_for (1 samples, 0.04%)</title><rect x="95.7328%" y="341" width="0.0431%" height="15" fill="rgb(236,107,19)" fg:x="2221" fg:w="1"/><text x="95.9828%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (367 samples, 15.82%)</title><rect x="80.0431%" y="533" width="15.8190%" height="15" fill="rgb(228,185,30)" fg:x="1857" fg:w="367"/><text x="80.2931%" y="543.50">&lt;std::collections::hash:..</text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (367 samples, 15.82%)</title><rect x="80.0431%" y="517" width="15.8190%" height="15" fill="rgb(246,134,8)" fg:x="1857" fg:w="367"/><text x="80.2931%" y="527.50">&lt;hashbrown::map::HashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (5 samples, 0.22%)</title><rect x="95.6466%" y="501" width="0.2155%" height="15" fill="rgb(214,143,50)" fg:x="2219" fg:w="5"/><text x="95.8966%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.22%)</title><rect x="95.6466%" y="485" width="0.2155%" height="15" fill="rgb(228,75,8)" fg:x="2219" fg:w="5"/><text x="95.8966%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.22%)</title><rect x="95.6466%" y="469" width="0.2155%" height="15" fill="rgb(207,175,4)" fg:x="2219" fg:w="5"/><text x="95.8966%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner::reserve_rehash_inner (5 samples, 0.22%)</title><rect x="95.6466%" y="453" width="0.2155%" height="15" fill="rgb(205,108,24)" fg:x="2219" fg:w="5"/><text x="95.8966%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner::resize_inner (5 samples, 0.22%)</title><rect x="95.6466%" y="437" width="0.2155%" height="15" fill="rgb(244,120,49)" fg:x="2219" fg:w="5"/><text x="95.8966%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner::prepare_resize (2 samples, 0.09%)</title><rect x="95.7759%" y="421" width="0.0862%" height="15" fill="rgb(223,47,38)" fg:x="2222" fg:w="2"/><text x="96.0259%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner::fallible_with_capacity (1 samples, 0.04%)</title><rect x="95.8190%" y="405" width="0.0431%" height="15" fill="rgb(229,179,11)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner::new_uninitialized (1 samples, 0.04%)</title><rect x="95.8190%" y="389" width="0.0431%" height="15" fill="rgb(231,122,1)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="399.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.04%)</title><rect x="95.8190%" y="373" width="0.0431%" height="15" fill="rgb(245,119,9)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="95.8190%" y="357" width="0.0431%" height="15" fill="rgb(241,163,25)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="95.8190%" y="341" width="0.0431%" height="15" fill="rgb(217,214,3)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="95.8190%" y="325" width="0.0431%" height="15" fill="rgb(240,86,28)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="335.50"></text></g><g><title>malloc (1 samples, 0.04%)</title><rect x="95.8190%" y="309" width="0.0431%" height="15" fill="rgb(215,47,9)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="95.8190%" y="293" width="0.0431%" height="15" fill="rgb(252,25,45)" fg:x="2223" fg:w="1"/><text x="96.0690%" y="303.50"></text></g><g><title>jsode::parser::JsonCursor::rollup_indexes (368 samples, 15.86%)</title><rect x="80.0431%" y="549" width="15.8621%" height="15" fill="rgb(251,164,9)" fg:x="1857" fg:w="368"/><text x="80.2931%" y="559.50">jsode::parser::JsonCurso..</text></g><g><title>jsode::parser::JsonCursor::pop_state (1 samples, 0.04%)</title><rect x="95.8621%" y="533" width="0.0431%" height="15" fill="rgb(233,194,0)" fg:x="2224" fg:w="1"/><text x="96.1121%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::pop_back (1 samples, 0.04%)</title><rect x="95.8621%" y="517" width="0.0431%" height="15" fill="rgb(249,111,24)" fg:x="2224" fg:w="1"/><text x="96.1121%" y="527.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_insert_slot_in_group (2 samples, 0.09%)</title><rect x="95.9052%" y="469" width="0.0862%" height="15" fill="rgb(250,223,3)" fg:x="2225" fg:w="2"/><text x="96.1552%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (2 samples, 0.09%)</title><rect x="95.9052%" y="453" width="0.0862%" height="15" fill="rgb(236,178,37)" fg:x="2225" fg:w="2"/><text x="96.1552%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.09%)</title><rect x="95.9052%" y="437" width="0.0862%" height="15" fill="rgb(241,158,50)" fg:x="2225" fg:w="2"/><text x="96.1552%" y="447.50"></text></g><g><title>jsode::parser::JsonCursor::update_prop_index (3 samples, 0.13%)</title><rect x="95.9052%" y="549" width="0.1293%" height="15" fill="rgb(213,121,41)" fg:x="2225" fg:w="3"/><text x="96.1552%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (3 samples, 0.13%)</title><rect x="95.9052%" y="533" width="0.1293%" height="15" fill="rgb(240,92,3)" fg:x="2225" fg:w="3"/><text x="96.1552%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.13%)</title><rect x="95.9052%" y="517" width="0.1293%" height="15" fill="rgb(205,123,3)" fg:x="2225" fg:w="3"/><text x="96.1552%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (3 samples, 0.13%)</title><rect x="95.9052%" y="501" width="0.1293%" height="15" fill="rgb(205,97,47)" fg:x="2225" fg:w="3"/><text x="96.1552%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_or_find_insert_slot_inner (3 samples, 0.13%)</title><rect x="95.9052%" y="485" width="0.1293%" height="15" fill="rgb(247,152,14)" fg:x="2225" fg:w="3"/><text x="96.1552%" y="495.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.04%)</title><rect x="95.9914%" y="469" width="0.0431%" height="15" fill="rgb(248,195,53)" fg:x="2227" fg:w="1"/><text x="96.2414%" y="479.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.04%)</title><rect x="95.9914%" y="453" width="0.0431%" height="15" fill="rgb(226,201,16)" fg:x="2227" fg:w="1"/><text x="96.2414%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="95.9914%" y="437" width="0.0431%" height="15" fill="rgb(205,98,0)" fg:x="2227" fg:w="1"/><text x="96.2414%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.04%)</title><rect x="95.9914%" y="421" width="0.0431%" height="15" fill="rgb(214,191,48)" fg:x="2227" fg:w="1"/><text x="96.2414%" y="431.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="95.9914%" y="405" width="0.0431%" height="15" fill="rgb(237,112,39)" fg:x="2227" fg:w="1"/><text x="96.2414%" y="415.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (696 samples, 30.00%)</title><rect x="66.0776%" y="565" width="30.0000%" height="15" fill="rgb(247,203,27)" fg:x="1533" fg:w="696"/><text x="66.3276%" y="575.50">jsode::parser::JsonCursor::parse_object_prop</text></g><g><title>jsode::parser::JsonParser::next_token_skip (1 samples, 0.04%)</title><rect x="96.0345%" y="549" width="0.0431%" height="15" fill="rgb(235,124,28)" fg:x="2228" fg:w="1"/><text x="96.2845%" y="559.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="96.0345%" y="533" width="0.0431%" height="15" fill="rgb(208,207,46)" fg:x="2228" fg:w="1"/><text x="96.2845%" y="543.50"></text></g><g><title>jsode::parser::JsonParser::parse (700 samples, 30.17%)</title><rect x="65.9483%" y="581" width="30.1724%" height="15" fill="rgb(234,176,4)" fg:x="1530" fg:w="700"/><text x="66.1983%" y="591.50">jsode::parser::JsonParser::parse</text></g><g><title>jsode::parser::JsonParser::next_token (1 samples, 0.04%)</title><rect x="96.0776%" y="565" width="0.0431%" height="15" fill="rgb(230,133,28)" fg:x="2229" fg:w="1"/><text x="96.3276%" y="575.50"></text></g><g><title>&lt;jsode::lexer::Tokenizer as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="96.0776%" y="549" width="0.0431%" height="15" fill="rgb(211,137,40)" fg:x="2229" fg:w="1"/><text x="96.3276%" y="559.50"></text></g><g><title>memcpy$pltgot (28 samples, 1.21%)</title><rect x="96.1207%" y="581" width="1.2069%" height="15" fill="rgb(254,35,13)" fg:x="2230" fg:w="28"/><text x="96.3707%" y="591.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.09%)</title><rect x="97.3276%" y="469" width="0.0862%" height="15" fill="rgb(225,49,51)" fg:x="2258" fg:w="2"/><text x="97.5776%" y="479.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.13%)</title><rect x="97.3276%" y="581" width="0.1293%" height="15" fill="rgb(251,10,15)" fg:x="2258" fg:w="3"/><text x="97.5776%" y="591.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.13%)</title><rect x="97.3276%" y="565" width="0.1293%" height="15" fill="rgb(228,207,15)" fg:x="2258" fg:w="3"/><text x="97.5776%" y="575.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.13%)</title><rect x="97.3276%" y="549" width="0.1293%" height="15" fill="rgb(241,99,19)" fg:x="2258" fg:w="3"/><text x="97.5776%" y="559.50"></text></g><g><title>jsode::main (3 samples, 0.13%)</title><rect x="97.3276%" y="533" width="0.1293%" height="15" fill="rgb(207,104,49)" fg:x="2258" fg:w="3"/><text x="97.5776%" y="543.50"></text></g><g><title>jsode::parser::JsonParser::parse (3 samples, 0.13%)</title><rect x="97.3276%" y="517" width="0.1293%" height="15" fill="rgb(234,99,18)" fg:x="2258" fg:w="3"/><text x="97.5776%" y="527.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (3 samples, 0.13%)</title><rect x="97.3276%" y="501" width="0.1293%" height="15" fill="rgb(213,191,49)" fg:x="2258" fg:w="3"/><text x="97.5776%" y="511.50"></text></g><g><title>jsode::parser::JsonCursor::create_prop_block (3 samples, 0.13%)</title><rect x="97.3276%" y="485" width="0.1293%" height="15" fill="rgb(210,226,19)" fg:x="2258" fg:w="3"/><text x="97.5776%" y="495.50"></text></g><g><title>jsode::common::hash_str (1 samples, 0.04%)</title><rect x="97.4138%" y="469" width="0.0431%" height="15" fill="rgb(229,97,18)" fg:x="2260" fg:w="1"/><text x="97.6638%" y="479.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="97.4138%" y="453" width="0.0431%" height="15" fill="rgb(211,167,15)" fg:x="2260" fg:w="1"/><text x="97.6638%" y="463.50"></text></g><g><title>&lt;jsode::core::Span as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="98.1034%" y="325" width="0.0431%" height="15" fill="rgb(210,169,34)" fg:x="2276" fg:w="1"/><text x="98.3534%" y="335.50"></text></g><g><title>[libc.so.6] (12 samples, 0.52%)</title><rect x="98.1466%" y="325" width="0.5172%" height="15" fill="rgb(241,121,31)" fg:x="2277" fg:w="12"/><text x="98.3966%" y="335.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="98.7069%" y="293" width="0.0431%" height="15" fill="rgb(232,40,11)" fg:x="2290" fg:w="1"/><text x="98.9569%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.04%)</title><rect x="98.7069%" y="277" width="0.0431%" height="15" fill="rgb(205,86,26)" fg:x="2290" fg:w="1"/><text x="98.9569%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::get_mut (9 samples, 0.39%)</title><rect x="98.6638%" y="309" width="0.3879%" height="15" fill="rgb(231,126,28)" fg:x="2289" fg:w="9"/><text x="98.9138%" y="319.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::to_physical_idx (7 samples, 0.30%)</title><rect x="98.7500%" y="293" width="0.3017%" height="15" fill="rgb(219,221,18)" fg:x="2291" fg:w="7"/><text x="99.0000%" y="303.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::wrap_add (4 samples, 0.17%)</title><rect x="98.8793%" y="277" width="0.1724%" height="15" fill="rgb(211,40,0)" fg:x="2294" fg:w="4"/><text x="99.1293%" y="287.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::capacity (4 samples, 0.17%)</title><rect x="98.8793%" y="261" width="0.1724%" height="15" fill="rgb(239,85,43)" fg:x="2294" fg:w="4"/><text x="99.1293%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (3 samples, 0.13%)</title><rect x="98.9224%" y="245" width="0.1293%" height="15" fill="rgb(231,55,21)" fg:x="2295" fg:w="3"/><text x="99.1724%" y="255.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::back_mut (10 samples, 0.43%)</title><rect x="98.6638%" y="325" width="0.4310%" height="15" fill="rgb(225,184,43)" fg:x="2289" fg:w="10"/><text x="98.9138%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.04%)</title><rect x="99.0517%" y="309" width="0.0431%" height="15" fill="rgb(251,158,41)" fg:x="2298" fg:w="1"/><text x="99.3017%" y="319.50"></text></g><g><title>jsode::common::hash_str (1 samples, 0.04%)</title><rect x="99.0948%" y="325" width="0.0431%" height="15" fill="rgb(234,159,37)" fg:x="2299" fg:w="1"/><text x="99.3448%" y="335.50"></text></g><g><title>jsode::parser::JsonCursor::create_prop_block (41 samples, 1.77%)</title><rect x="97.4569%" y="341" width="1.7672%" height="15" fill="rgb(216,204,22)" fg:x="2261" fg:w="41"/><text x="97.7069%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (2 samples, 0.09%)</title><rect x="99.1379%" y="325" width="0.0862%" height="15" fill="rgb(214,17,3)" fg:x="2300" fg:w="2"/><text x="99.3879%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.30%)</title><rect x="99.2241%" y="309" width="0.3017%" height="15" fill="rgb(212,111,17)" fg:x="2302" fg:w="7"/><text x="99.4741%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.30%)</title><rect x="99.2241%" y="293" width="0.3017%" height="15" fill="rgb(221,157,24)" fg:x="2302" fg:w="7"/><text x="99.4741%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.30%)</title><rect x="99.2241%" y="277" width="0.3017%" height="15" fill="rgb(252,16,13)" fg:x="2302" fg:w="7"/><text x="99.4741%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (7 samples, 0.30%)</title><rect x="99.2241%" y="261" width="0.3017%" height="15" fill="rgb(221,62,2)" fg:x="2302" fg:w="7"/><text x="99.4741%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.09%)</title><rect x="99.4397%" y="245" width="0.0862%" height="15" fill="rgb(247,87,22)" fg:x="2307" fg:w="2"/><text x="99.6897%" y="255.50"></text></g><g><title>jsode::common::hash_str (9 samples, 0.39%)</title><rect x="99.2241%" y="325" width="0.3879%" height="15" fill="rgb(215,73,9)" fg:x="2302" fg:w="9"/><text x="99.4741%" y="335.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="99.5259%" y="309" width="0.0862%" height="15" fill="rgb(207,175,33)" fg:x="2309" fg:w="2"/><text x="99.7759%" y="319.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="99.5259%" y="293" width="0.0862%" height="15" fill="rgb(243,129,54)" fg:x="2309" fg:w="2"/><text x="99.7759%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="99.5259%" y="277" width="0.0862%" height="15" fill="rgb(227,119,45)" fg:x="2309" fg:w="2"/><text x="99.7759%" y="287.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.09%)</title><rect x="99.5259%" y="261" width="0.0862%" height="15" fill="rgb(205,109,36)" fg:x="2309" fg:w="2"/><text x="99.7759%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="99.5690%" y="245" width="0.0431%" height="15" fill="rgb(205,6,39)" fg:x="2310" fg:w="1"/><text x="99.8190%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping::precondition_check (1 samples, 0.04%)</title><rect x="99.5690%" y="229" width="0.0431%" height="15" fill="rgb(221,32,16)" fg:x="2310" fg:w="1"/><text x="99.8190%" y="239.50"></text></g><g><title>core::intrinsics::is_aligned_and_not_null (1 samples, 0.04%)</title><rect x="99.5690%" y="213" width="0.0431%" height="15" fill="rgb(228,144,50)" fg:x="2310" fg:w="1"/><text x="99.8190%" y="223.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to (1 samples, 0.04%)</title><rect x="99.5690%" y="197" width="0.0431%" height="15" fill="rgb(229,201,53)" fg:x="2310" fg:w="1"/><text x="99.8190%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::is_aligned_to::runtime_impl (1 samples, 0.04%)</title><rect x="99.5690%" y="181" width="0.0431%" height="15" fill="rgb(249,153,27)" fg:x="2310" fg:w="1"/><text x="99.8190%" y="191.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.6121%" y="245" width="0.0431%" height="15" fill="rgb(227,106,25)" fg:x="2311" fg:w="1"/><text x="99.8621%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="99.6552%" y="229" width="0.0431%" height="15" fill="rgb(230,65,29)" fg:x="2312" fg:w="1"/><text x="99.9052%" y="239.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (3 samples, 0.13%)</title><rect x="99.6121%" y="261" width="0.1293%" height="15" fill="rgb(221,57,46)" fg:x="2311" fg:w="3"/><text x="99.8621%" y="271.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.09%)</title><rect x="99.6552%" y="245" width="0.0862%" height="15" fill="rgb(229,161,17)" fg:x="2312" fg:w="2"/><text x="99.9052%" y="255.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="99.6983%" y="229" width="0.0431%" height="15" fill="rgb(222,213,11)" fg:x="2313" fg:w="1"/><text x="99.9483%" y="239.50"></text></g><g><title>hashbrown::map::make_hash (5 samples, 0.22%)</title><rect x="99.6121%" y="293" width="0.2155%" height="15" fill="rgb(235,35,13)" fg:x="2311" fg:w="5"/><text x="99.8621%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.22%)</title><rect x="99.6121%" y="277" width="0.2155%" height="15" fill="rgb(233,158,34)" fg:x="2311" fg:w="5"/><text x="99.8621%" y="287.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.09%)</title><rect x="99.7414%" y="261" width="0.0862%" height="15" fill="rgb(215,151,48)" fg:x="2314" fg:w="2"/><text x="99.9914%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (2 samples, 0.09%)</title><rect x="99.7414%" y="245" width="0.0862%" height="15" fill="rgb(229,84,14)" fg:x="2314" fg:w="2"/><text x="99.9914%" y="255.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.09%)</title><rect x="99.7414%" y="229" width="0.0862%" height="15" fill="rgb(229,68,14)" fg:x="2314" fg:w="2"/><text x="99.9914%" y="239.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="99.7414%" y="213" width="0.0862%" height="15" fill="rgb(243,106,26)" fg:x="2314" fg:w="2"/><text x="99.9914%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="99.7414%" y="197" width="0.0862%" height="15" fill="rgb(206,45,38)" fg:x="2314" fg:w="2"/><text x="99.9914%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.09%)</title><rect x="99.7414%" y="181" width="0.0862%" height="15" fill="rgb(226,6,15)" fg:x="2314" fg:w="2"/><text x="99.9914%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.09%)</title><rect x="99.7414%" y="165" width="0.0862%" height="15" fill="rgb(232,22,54)" fg:x="2314" fg:w="2"/><text x="99.9914%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="99.7845%" y="149" width="0.0431%" height="15" fill="rgb(229,222,32)" fg:x="2315" fg:w="1"/><text x="100.0345%" y="159.50"></text></g><g><title>std::rt::lang_start_internal (56 samples, 2.41%)</title><rect x="97.4569%" y="581" width="2.4138%" height="15" fill="rgb(228,62,29)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="591.50">st..</text></g><g><title>std::panic::catch_unwind (56 samples, 2.41%)</title><rect x="97.4569%" y="565" width="2.4138%" height="15" fill="rgb(251,103,34)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="575.50">st..</text></g><g><title>std::panicking::try (56 samples, 2.41%)</title><rect x="97.4569%" y="549" width="2.4138%" height="15" fill="rgb(233,12,30)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="559.50">st..</text></g><g><title>std::panicking::try::do_call (56 samples, 2.41%)</title><rect x="97.4569%" y="533" width="2.4138%" height="15" fill="rgb(238,52,0)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="543.50">st..</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (56 samples, 2.41%)</title><rect x="97.4569%" y="517" width="2.4138%" height="15" fill="rgb(223,98,5)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="527.50">st..</text></g><g><title>std::panic::catch_unwind (56 samples, 2.41%)</title><rect x="97.4569%" y="501" width="2.4138%" height="15" fill="rgb(228,75,37)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="511.50">st..</text></g><g><title>std::panicking::try (56 samples, 2.41%)</title><rect x="97.4569%" y="485" width="2.4138%" height="15" fill="rgb(205,115,49)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="495.50">st..</text></g><g><title>std::panicking::try::do_call (56 samples, 2.41%)</title><rect x="97.4569%" y="469" width="2.4138%" height="15" fill="rgb(250,154,43)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="479.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (56 samples, 2.41%)</title><rect x="97.4569%" y="453" width="2.4138%" height="15" fill="rgb(226,43,29)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="463.50">co..</text></g><g><title>std::rt::lang_start::_{{closure}} (56 samples, 2.41%)</title><rect x="97.4569%" y="437" width="2.4138%" height="15" fill="rgb(249,228,39)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="447.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (56 samples, 2.41%)</title><rect x="97.4569%" y="421" width="2.4138%" height="15" fill="rgb(216,79,43)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="431.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (56 samples, 2.41%)</title><rect x="97.4569%" y="405" width="2.4138%" height="15" fill="rgb(228,95,12)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="415.50">co..</text></g><g><title>jsode::main (56 samples, 2.41%)</title><rect x="97.4569%" y="389" width="2.4138%" height="15" fill="rgb(249,221,15)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="399.50">js..</text></g><g><title>jsode::parser::JsonParser::parse (56 samples, 2.41%)</title><rect x="97.4569%" y="373" width="2.4138%" height="15" fill="rgb(233,34,13)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="383.50">js..</text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (56 samples, 2.41%)</title><rect x="97.4569%" y="357" width="2.4138%" height="15" fill="rgb(214,103,39)" fg:x="2261" fg:w="56"/><text x="97.7069%" y="367.50">js..</text></g><g><title>jsode::parser::JsonCursor::update_prop_index (15 samples, 0.65%)</title><rect x="99.2241%" y="341" width="0.6466%" height="15" fill="rgb(251,126,39)" fg:x="2302" fg:w="15"/><text x="99.4741%" y="351.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (6 samples, 0.26%)</title><rect x="99.6121%" y="325" width="0.2586%" height="15" fill="rgb(214,216,36)" fg:x="2311" fg:w="6"/><text x="99.8621%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (6 samples, 0.26%)</title><rect x="99.6121%" y="309" width="0.2586%" height="15" fill="rgb(220,221,8)" fg:x="2311" fg:w="6"/><text x="99.8621%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_in_slot (1 samples, 0.04%)</title><rect x="99.8276%" y="293" width="0.0431%" height="15" fill="rgb(240,216,3)" fg:x="2316" fg:w="1"/><text x="100.0776%" y="303.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (1 samples, 0.04%)</title><rect x="99.8276%" y="277" width="0.0431%" height="15" fill="rgb(232,218,17)" fg:x="2316" fg:w="1"/><text x="100.0776%" y="287.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="99.8276%" y="261" width="0.0431%" height="15" fill="rgb(229,163,45)" fg:x="2316" fg:w="1"/><text x="100.0776%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="99.8276%" y="245" width="0.0431%" height="15" fill="rgb(231,110,42)" fg:x="2316" fg:w="1"/><text x="100.0776%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="99.8276%" y="229" width="0.0431%" height="15" fill="rgb(208,170,48)" fg:x="2316" fg:w="1"/><text x="100.0776%" y="239.50"></text></g><g><title>all (2,320 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(239,116,25)" fg:x="0" fg:w="2320"/><text x="0.2500%" y="623.50"></text></g><g><title>jsode (2,320 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(219,200,50)" fg:x="0" fg:w="2320"/><text x="0.2500%" y="607.50">jsode</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.13%)</title><rect x="99.8707%" y="581" width="0.1293%" height="15" fill="rgb(245,200,0)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="591.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.13%)</title><rect x="99.8707%" y="565" width="0.1293%" height="15" fill="rgb(245,119,33)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="575.50"></text></g><g><title>jsode::main (3 samples, 0.13%)</title><rect x="99.8707%" y="549" width="0.1293%" height="15" fill="rgb(231,125,12)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="559.50"></text></g><g><title>jsode::parser::JsonParser::parse (3 samples, 0.13%)</title><rect x="99.8707%" y="533" width="0.1293%" height="15" fill="rgb(216,96,41)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="543.50"></text></g><g><title>jsode::parser::JsonCursor::parse_object_prop (3 samples, 0.13%)</title><rect x="99.8707%" y="517" width="0.1293%" height="15" fill="rgb(248,43,45)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="527.50"></text></g><g><title>jsode::parser::JsonCursor::create_prop_block (3 samples, 0.13%)</title><rect x="99.8707%" y="501" width="0.1293%" height="15" fill="rgb(217,222,7)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="511.50"></text></g><g><title>jsode::parser::JsonParser::take_slice (3 samples, 0.13%)</title><rect x="99.8707%" y="485" width="0.1293%" height="15" fill="rgb(233,28,6)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="495.50"></text></g><g><title>jsode::lexer::Tokenizer::take_slice (3 samples, 0.13%)</title><rect x="99.8707%" y="469" width="0.1293%" height="15" fill="rgb(231,218,15)" fg:x="2317" fg:w="3"/><text x="100.1207%" y="479.50"></text></g></svg></svg>